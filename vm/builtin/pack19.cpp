
/* This file was generated by Ragel. Your edits will be lost.
 *
 * This is a state machine implementation of Array#pack.
 * See http://github.com/rubinius/rapa.
 *
 * vim: filetype=cpp
 */

#include <stdint.h>
#include <sstream>

#include "vm/config.h"

#include "vm.hpp"
#include "object_utils.hpp"
#include "on_stack.hpp"
#include "objectmemory.hpp"

#include "builtin/array.hpp"
#include "builtin/bytearray.hpp"
#include "builtin/encoding.hpp"
#include "builtin/exception.hpp"
#include "builtin/float.hpp"
#include "builtin/module.hpp"
#include "builtin/object.hpp"
#include "builtin/string.hpp"

#ifdef RBX_WINDOWS
#include <malloc.h>
#endif

namespace rubinius {
  namespace pack19 {
    inline Object* to_int(STATE, CallFrame* call_frame, Object* obj) {
      Array* args = Array::create(state, 1);
      args->set(state, 0, obj);

      return G(rubinius)->send(state, call_frame, state->symbol("pack_to_int"), args);
    }

#define BITS_LONG   (RBX_SIZEOF_LONG * 8)

    inline long check_long(STATE, Integer* obj) {
      if((obj)->fixnum_p()) {
        return force_as<Fixnum>(obj)->to_long();
      } else {
        Bignum* big = as<Bignum>(obj);
        big->verify_size(state, BITS_LONG);
        return big->to_long();
      }
    }

#define BITS_64     (64)

    inline long long check_long_long(STATE, Integer* obj) {
      if((obj)->fixnum_p()) {
        return force_as<Fixnum>(obj)->to_long_long();
      } else {
        Bignum* big = as<Bignum>(obj);
        big->verify_size(state, BITS_64);
        return big->to_long_long();
      }
    }

    inline Object* to_f(STATE, CallFrame* call_frame, Object* obj) {
      Array* args = Array::create(state, 1);
      args->set(state, 0, obj);

      return G(rubinius)->send(state, call_frame, state->symbol("pack_to_float"), args);
    }

    inline String* encoding_string(STATE, CallFrame* call_frame, Object* obj,
                                          const char* coerce_name)
    {
      String* s = try_as<String>(obj);
      if(s) return s;

      Array* args = Array::create(state, 1);
      args->set(state, 0, obj);

      std::string coerce_method("pack_");
      coerce_method += coerce_name;
      Object* result = G(rubinius)->send(state, call_frame,
            state->symbol(coerce_method.c_str()), args);

      if(!result) return 0;
      return as<String>(result);
    }

    inline uint16_t swap_2bytes(uint16_t x) {
      return (((x & 0x00ff)<<8) | ((x & 0xff00)>>8));
    }

    inline uint32_t swap_4bytes(uint32_t x) {
      return (((x & 0x000000ff) << 24)
             |((x & 0xff000000) >> 24)
             |((x & 0x0000ff00) << 8)
             |((x & 0x00ff0000) >> 8));
    }

    inline uint64_t swap_8bytes(uint64_t x) {
      return (((x & 0x00000000000000ffLL) << 56)
             |((x & 0xff00000000000000LL) >> 56)
             |((x & 0x000000000000ff00LL) << 40)
             |((x & 0x00ff000000000000LL) >> 40)
             |((x & 0x0000000000ff0000LL) << 24)
             |((x & 0x0000ff0000000000LL) >> 24)
             |((x & 0x00000000ff000000LL) << 8)
             |((x & 0x000000ff00000000LL) >> 8));
    }

    inline void swap_float(std::string& str, float value) {
      uint32_t x;

      memcpy(&x, &value, sizeof(float));
      x = swap_4bytes(x);

      str.append((const char*)&x, sizeof(uint32_t));
    }

    inline void swap_double(std::string& str, double value) {
      uint64_t x;

      memcpy(&x, &value, sizeof(double));
      x = swap_8bytes(x);

      str.append((const char*)&x, sizeof(uint64_t));
    }

    inline void double_element(std::string& str, double value) {
      str.append((const char*)&value, sizeof(double));
    }

    inline void float_element(std::string& str, float value) {
      str.append((const char*)&value, sizeof(float));
    }

    inline void short_element(std::string& str, int16_t value) {
      str.append((const char*)&value, sizeof(int16_t));
    }

    inline void int_element(std::string& str, int32_t value) {
      str.append((const char*)&value, sizeof(int32_t));
    }

    inline void long_element(std::string& str, int64_t value) {
      str.append((const char*)&value, sizeof(int64_t));
    }

    inline int32_t int32_element(STATE, Integer* value) {
      if(value->fixnum_p()) {
        long l = as<Fixnum>(value)->to_long();
        if(l > INT32_MAX || l < INT32_MIN) {
          Exception::range_error(state, "Fixnum value out of range of int32");
        }
        return l;
      } else {
        Bignum* big = as<Bignum>(value);
        big->verify_size(state, 32);
        return big->to_int();
      }
    }

#define QUOTABLE_PRINTABLE_BUFSIZE 1024

    void quotable_printable(String* s, std::string& str, int count) {
      static char hex_table[] = "0123456789ABCDEF";
      char buf[QUOTABLE_PRINTABLE_BUFSIZE];

      uint8_t* b = s->byte_address();
      uint8_t* e = b + s->byte_size();
      int i = 0, n = 0, prev = -1;

      for(; b < e; b++) {
        if((*b > 126) || (*b < 32 && *b != '\n' && *b != '\t') || (*b == '=')) {
          buf[i++] = '=';
          buf[i++] = hex_table[*b >> 4];
          buf[i++] = hex_table[*b & 0x0f];
          n += 3;
          prev = -1;
        } else if(*b == '\n') {
          if(prev == ' ' || prev == '\t') {
            buf[i++] = '=';
            buf[i++] = *b;
          }
          buf[i++] = *b;
          n = 0;
          prev = *b;
        } else {
          buf[i++] = *b;
          n++;
          prev = *b;
        }

        if(n > count) {
          buf[i++] = '=';
          buf[i++] = '\n';
          n = 0;
          prev = '\n';
        }

        if(i > QUOTABLE_PRINTABLE_BUFSIZE - 5) {
          str.append(buf, i);
          i = 0;
        }
      }

      if(n > 0) {
        buf[i++] = '=';
        buf[i++] = '\n';
      }

      if(i > 0) {
        str.append(buf, i);
      }
    }

    static const char uu_table[] =
      "`!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_";
    static const char b64_table[] =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

#define b64_uu_byte1(t, b)      t[077 & (*b >> 2)]
#define b64_uu_byte2(t, b, c)   t[077 & (((*b << 4) & 060) | ((c >> 4) & 017))]
#define b64_uu_byte3(t, b, c)   t[077 & (((b[1] << 2) & 074) | ((c >> 6) & 03))];
#define b64_uu_byte4(t, b)      t[077 & b[2]];

    void b64_uu_encode(String* s, std::string& str,
                       native_int count, native_int count_flag,
                       const char* table, int padding, bool encode_size)
    {
      char *buf = ALLOCA_N(char, count * 4 / 3 + 6);
      native_int i, chars, line, total = s->byte_size();
      uint8_t* b = s->byte_address();

      for(i = 0; total > 0; i = 0, total -= line) {
        line = total > count ? count : total;

        if(encode_size) buf[i++] = line + ' ';

        for(chars = line; chars >= 3; chars -= 3, b += 3) {
          buf[i++] = b64_uu_byte1(table, b);
          buf[i++] = b64_uu_byte2(table, b, b[1]);
          buf[i++] = b64_uu_byte3(table, b, b[2]);
          buf[i++] = b64_uu_byte4(table, b);
        }

        if(chars == 2) {
          buf[i++] = b64_uu_byte1(table, b);
          buf[i++] = b64_uu_byte2(table, b, b[1]);
          buf[i++] = b64_uu_byte3(table, b, '\0');
          buf[i++] = padding;
        } else if(chars == 1) {
          buf[i++] = b64_uu_byte1(table, b);
          buf[i++] = b64_uu_byte2(table, b, '\0');
          buf[i++] = padding;
          buf[i++] = padding;
        }

        b += chars;
        if(encode_size || (!encode_size && count_flag > 0)) {
          buf[i++] = '\n';
        }
        str.append(buf, i);
      }
    }

    void utf8_encode(STATE, std::string& str, Integer* value) {
      int32_t v = int32_element(state, value);

      if(!(v & ~0x7f)) {
        str.push_back(v);
      } else if(!(v & ~0x7ff)) {
        str.push_back(((v >> 6) & 0xff) | 0xc0);
        str.push_back((v & 0x3f) | 0x80);
      } else if(!(v & ~0xffff)) {
        str.push_back(((v >> 12) & 0xff) | 0xe0);
        str.push_back(((v >> 6)  & 0x3f) | 0x80);
        str.push_back((v & 0x3f) | 0x80);
      } else if(!(v & ~0x1fffff)) {
        str.push_back(((v >> 18) & 0xff) | 0xf0);
        str.push_back(((v >> 12) & 0x3f) | 0x80);
        str.push_back(((v >> 6)  & 0x3f) | 0x80);
        str.push_back((v & 0x3f) | 0x80);
      } else if(!(v & ~0x3ffffff)) {
        str.push_back(((v >> 24) & 0xff) | 0xf8);
        str.push_back(((v >> 18) & 0x3f) | 0x80);
        str.push_back(((v >> 12) & 0x3f) | 0x80);
        str.push_back(((v >> 6)  & 0x3f) | 0x80);
        str.push_back((v & 0x3f) | 0x80);
      } else if(!(v & ~0x7fffffff)) {
        str.push_back(((v >> 30) & 0xff) | 0xfc);
        str.push_back(((v >> 24) & 0x3f) | 0x80);
        str.push_back(((v >> 18) & 0x3f) | 0x80);
        str.push_back(((v >> 12) & 0x3f) | 0x80);
        str.push_back(((v >> 6)  & 0x3f) | 0x80);
        str.push_back((v & 0x3f) | 0x80);
      } else {
        Exception::range_error(state, "pack('U') value out of range");
      }
    }

    void ber_encode(STATE, std::string& str, Integer* value) {
      if(!value->positive_p()) {
        Exception::argument_error(state, "cannot BER compress a negative number");
      }

      std::string buf;

      if(try_as<Bignum>(value)) {
        static Fixnum* base = Fixnum::from(128);
        while(try_as<Bignum>(value)) {
          Array* ary;
          if(value->fixnum_p()) {
            ary = as<Fixnum>(value)->divmod(state, base);
          } else {
            ary = as<Bignum>(value)->divmod(state, base);
          }
          buf.push_back(as<Fixnum>(ary->get(state, 1))->to_native() | 0x80);
          value = as<Integer>(ary->get(state, 0));
        }
      }

      long v = value->to_long();

      while(v) {
        buf.push_back((v & 0x7f) | 0x80);
        v >>= 7;
      }

      if(buf.size() > 0) {
        char* a = const_cast<char*>(buf.c_str());
        char* b = a + buf.size() - 1;

        // clear continue bit
        *a &= 0x7f;

        // reverse string
        while(a < b) {
          int k = *a;
          *a++ = *b;
          *b-- = k;
        }

        str.append(buf.c_str(), buf.size());
      } else {
        str.push_back(0);
      }
    }

    inline native_int bit_extra(String* s, bool rest, native_int& count) {
      native_int extra = 0;

      if(rest) {
        count = s->byte_size();
      } else {
        native_int size = s->byte_size();
        if(count > size) {
          extra = (count - size + 1) / 2;
          count = size;
        }
      }

      return extra;
    }

    void bit_high(String* s, std::string& str, native_int count) {
      uint8_t* b = s->byte_address();
      int byte = 0;

      for(native_int i = 0; i++ < count; b++) {
        byte |= *b & 1;
        if(i & 7) {
          byte <<= 1;
        } else {
          str.push_back(byte & 0xff);
          byte = 0;
        }
      }

      if (count & 7) {
        byte <<= 7 - (count & 7);
        str.push_back(byte & 0xff);
      }
    }

    void bit_low(String* s, std::string& str, native_int count) {
      uint8_t* b = s->byte_address();
      int byte = 0;

      for(native_int i = 0; i++ < count; b++) {
        if(*b & 1)
          byte |= 128;

        if(i & 7) {
          byte >>= 1;
        } else {
          str.push_back(byte & 0xff);
          byte = 0;
        }
      }

      if(count & 7) {
        byte >>= 7 - (count & 7);
        str.push_back(byte & 0xff);
      }
    }

    inline native_int hex_extra(String* s, bool rest, native_int& count) {
      native_int extra = 0;

      if(rest) {
        count = s->byte_size();
      } else {
        native_int size = s->byte_size();
        if(count > size) {
          extra = (count + 1) / 2 - (size + 1) / 2;
          count = size;
        }
      }

      return extra;
    }

    void hex_high(String* s, std::string& str, native_int count) {
      uint8_t* b = s->byte_address();
      int byte = 0;

      for(native_int i = 0; i++ < count; b++) {
        if(ISALPHA(*b)) {
          byte |= ((*b & 15) + 9) & 15;
        } else {
          byte |= *b & 15;
        }

        if(i & 1) {
          byte <<= 4;
        } else {
          str.push_back(byte & 0xff);
          byte = 0;
        }
      }

      if(count & 1) {
        str.push_back(byte & 0xff);
      }
    }

    void hex_low(String* s, std::string& str, native_int count) {
      uint8_t* b = s->byte_address();
      int byte = 0;

      for(native_int i = 0; i++ < count; b++) {
        if(ISALPHA(*b)) {
          byte |= (((*b & 15) + 9) & 15) << 4;
        } else {
          byte |= (*b & 15) << 4;
        }

        if(i & 1) {
          byte >>= 4;
        } else {
          str.push_back(byte & 0xff);
          byte = 0;
        }
      }

      if(count & 1) {
        str.push_back(byte & 0xff);
      }
    }

    ByteArray* prepare_directives(STATE, String* directives,
                                  const char** p, const char** pe)
    {
      native_int size = directives->byte_size();
      ByteArray* ba = ByteArray::create_pinned(state, size);
      char* b = reinterpret_cast<char*>(ba->raw_bytes());
      char* d = reinterpret_cast<char*>(directives->byte_address());
      int i = 0, j = 0;

      while(i < size) {
        switch(d[i]) {
        case 0:
        case ' ':
        case '\t':
        case '\n':
        case '\v':
        case '\f':
        case '\r':
          i++;
          break;
        case '#':
          while(++i < size && d[i] != '\n')
            ; // ignore
          if(d[i] == '\n') i++;
          break;
        default:
          b[j++] = d[i++];
          break;
        }
      }

      *p = const_cast<const char*>(b);
      *pe = *p + j;

      return ba;
    }

    void exceeds_length_of_string(STATE, native_int count) {
      std::ostringstream msg;
      msg << "X" << count << " exceeds length of string";
      Exception::argument_error(state, msg.str().c_str());
    }

    void non_native_error(STATE, const char c) {
      std::ostringstream msg;
      msg << "'" << c << "' allowed only after types sSiIlL";
      Exception::argument_error(state, msg.str().c_str());
    }
  }


// Pack Float elements
#define pack_float_elements(format)   pack_elements(Float, pack19::to_f, format)

#define pack_double_le                pack_float_elements(pack_double_element_le)
#define pack_double_be                pack_float_elements(pack_double_element_be)

#define pack_float_le                 pack_float_elements(pack_float_element_le)
#define pack_float_be                 pack_float_elements(pack_float_element_be)

// Pack Integer elements
#define pack_integer_elements(format) pack_elements(Integer, pack19::to_int, format)

#define pack_byte_element(v)          str.push_back(pack19::check_long(state, v))
#define pack_byte                     pack_integer_elements(pack_byte_element)

#define pack_short_le                 pack_integer_elements(pack_short_element_le)
#define pack_short_be                 pack_integer_elements(pack_short_element_be)

#define pack_int_le                   pack_integer_elements(pack_int_element_le)
#define pack_int_be                   pack_integer_elements(pack_int_element_be)

#define pack_long_le                  pack_integer_elements(pack_long_element_le)
#define pack_long_be                  pack_integer_elements(pack_long_element_be)

// Pack UTF-8 elements
#define pack_utf8_element(v)          pack19::utf8_encode(state, str, v)
#define pack_utf8                     pack_elements(Integer, pack19::to_int, pack_utf8_element)

// Pack BER-compressed integers
#define pack_ber_element(v)           pack19::ber_encode(state, str, v)
#define pack_ber                      pack_elements(Integer, pack19::to_int, pack_ber_element)

// Wraps the logic for iterating over a number of elements,
// coercing them to the correct class and formatting them
// for the output string.
#define pack_elements(T, coerce, format)        \
  for(; index < stop; index++) {                \
    Object* item = self->get(state, index);     \
    T* value = try_as<T>(item);                 \
    if(!value) {                                \
      item = coerce(state, call_frame, item);   \
      if(!item) return 0;                       \
      value = as<T>(item);                      \
    }                                           \
    format(value);                              \
  }

// Macros that depend on endianness
#ifdef RBX_LITTLE_ENDIAN

# define pack_double_element_le(v)  (pack19::double_element(str, (v)->val))
# define pack_double_element_be(v)  (pack19::swap_double(str, (v)->val))
# define pack_double                pack_double_le

# define pack_float_element_le(v)   (pack19::float_element(str, (v)->val))
# define pack_float_element_be(v)   (pack19::swap_float(str, (v)->val))
# define pack_float                 pack_float_le

# define pack_short_element_le(v)   (pack19::short_element(str, pack19::check_long(state, v)))
# define pack_short_element_be(v)   (pack19::short_element(str, \
                                        pack19::swap_2bytes(pack19::check_long(state, v))))
# define pack_short                 pack_short_le

# define pack_int_element_le(v)     (pack19::int_element(str, pack19::check_long(state, v)))
# define pack_int_element_be(v)     (pack19::int_element(str, \
                                        pack19::swap_4bytes(pack19::check_long(state, v))))
# define pack_int                   pack_int_le

# define pack_long_element_le(v)    (pack19::long_element(str, pack19::check_long_long(state, v)))
# define pack_long_element_be(v)    (pack19::long_element(str, \
                                        pack19::swap_8bytes(pack19::check_long_long(state, v))))
# define pack_long                  pack_long_le

#else // Big endian

# define pack_double_element_le(v)  (pack19::swap_double(str, (v)->val))
# define pack_double_element_be(v)  (pack19::double_element(str, (v)->val))
# define pack_double                pack_double_be

# define pack_float_element_le(v)   (pack19::swap_float(str, (v)->val))
# define pack_float_element_be(v)   (pack19::float_element(str, (v)->val))
# define pack_float                 pack_float_be

# define pack_short_element_le(v)   (pack19::short_element(str, \
                                        pack19::swap_2bytes(pack19::check_long(state, v))))
# define pack_short_element_be(v)   (pack19::short_element(str, pack19::check_long(state, v)))
# define pack_short                 pack_short_be

# define pack_int_element_le(v)     (pack19::int_element(str, \
                                        pack19::swap_4bytes(pack19::check_long(state, v))))
# define pack_int_element_be(v)     (pack19::int_element(str, pack19::check_long(state, v)))
# define pack_int                   pack_int_be

# define pack_long_element_le(v)    (pack19::long_element(str, \
                                        pack19::swap_8bytes(pack19::check_long_long(state, v))))
# define pack_long_element_be(v)    (pack19::long_element(str, pack19::check_long_long(state, v)))
# define pack_long                  pack_long_be

#endif


  String* Array::pack19(STATE, String* directives, CallFrame* call_frame) {
    // Ragel-specific variables
    const char* p;
    const char* pe;
    ByteArray* d = pack19::prepare_directives(state, directives, &p, &pe);
    const char *eof = pe;
    int cs;

    // pack-specific variables
    Array* self = this;
    OnStack<2> sv(state, self, d);

    native_int array_size = self->size();
    native_int index = 0;
    native_int count = 0;
    native_int count_flag = -1;
    native_int stop = 0;
    bool rest = false;
    bool tainted = false;
    bool untrusted = false;
    bool ascii_encoding = false;
    bool utf8_encoding = false;
    bool string_encoding = false;

    String* string_value = 0;
    std::string str("");

    // Use information we have to reduce repeated allocation.
    str.reserve(array_size * 4);

    if(directives->byte_size() == 0) ascii_encoding = true;
    if(CBOOL(directives->tainted_p(state))) tainted = true;
    if(CBOOL(directives->untrusted_p(state))) untrusted = true;

static const char _trans_keys[] = {
	0, 0, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 
	33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 
	33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 42, 120, 64, 120, 33, 120, 
	42, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 
	33, 120, 64, 120, 33, 120, 42, 120, 64, 120, 33, 120, 64, 120, 33, 120, 
	64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 
	64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 
	64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 
	64, 120, 33, 120, 64, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 
	48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 
	48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 
	48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 
	48, 120, 48, 120, 42, 120, 64, 120, 48, 120, 42, 120, 64, 120, 48, 120, 
	33, 120, 33, 120, 64, 120, 48, 120, 33, 120, 64, 120, 64, 120, 48, 120, 
	33, 120, 64, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 
	64, 120, 48, 120, 48, 120, 42, 120, 64, 120, 48, 120, 42, 120, 64, 120, 
	48, 120, 64, 120, 48, 120, 33, 120, 64, 120, 48, 120, 33, 120, 64, 120, 
	48, 120, 48, 120, 42, 120, 64, 120, 48, 120, 42, 120, 64, 120, 48, 120, 
	33, 120, 33, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 
	64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 
	64, 120, 48, 120, 64, 120, 48, 120, 0
};

static const char _key_spans[] = {
	0, 57, 88, 57, 88, 57, 88, 57, 
	88, 57, 88, 57, 88, 57, 88, 57, 
	88, 57, 88, 57, 88, 79, 57, 88, 
	79, 57, 88, 57, 88, 57, 88, 57, 
	88, 57, 88, 79, 57, 88, 57, 88, 
	57, 88, 57, 88, 57, 88, 57, 88, 
	57, 88, 57, 88, 57, 88, 57, 88, 
	57, 88, 57, 88, 57, 88, 57, 88, 
	57, 88, 57, 57, 73, 57, 73, 57, 
	73, 57, 73, 57, 73, 57, 73, 57, 
	73, 57, 73, 57, 73, 57, 73, 57, 
	73, 57, 73, 57, 73, 57, 73, 57, 
	73, 73, 79, 57, 73, 79, 57, 73, 
	88, 88, 57, 73, 88, 57, 57, 73, 
	88, 57, 57, 73, 57, 73, 57, 73, 
	57, 73, 73, 79, 57, 73, 79, 57, 
	73, 57, 73, 88, 57, 73, 88, 57, 
	73, 73, 79, 57, 73, 79, 57, 73, 
	88, 88, 57, 73, 57, 73, 57, 73, 
	57, 73, 57, 73, 57, 73, 57, 73, 
	57, 73, 57, 73
};

static const short _index_offsets[] = {
	0, 0, 58, 147, 205, 294, 352, 441, 
	499, 588, 646, 735, 793, 882, 940, 1029, 
	1087, 1176, 1234, 1323, 1381, 1470, 1550, 1608, 
	1697, 1777, 1835, 1924, 1982, 2071, 2129, 2218, 
	2276, 2365, 2423, 2512, 2592, 2650, 2739, 2797, 
	2886, 2944, 3033, 3091, 3180, 3238, 3327, 3385, 
	3474, 3532, 3621, 3679, 3768, 3826, 3915, 3973, 
	4062, 4120, 4209, 4267, 4356, 4414, 4503, 4561, 
	4650, 4708, 4797, 4855, 4913, 4987, 5045, 5119, 
	5177, 5251, 5309, 5383, 5441, 5515, 5573, 5647, 
	5705, 5779, 5837, 5911, 5969, 6043, 6101, 6175, 
	6233, 6307, 6365, 6439, 6497, 6571, 6629, 6703, 
	6761, 6835, 6909, 6989, 7047, 7121, 7201, 7259, 
	7333, 7422, 7511, 7569, 7643, 7732, 7790, 7848, 
	7922, 8011, 8069, 8127, 8201, 8259, 8333, 8391, 
	8465, 8523, 8597, 8671, 8751, 8809, 8883, 8963, 
	9021, 9095, 9153, 9227, 9316, 9374, 9448, 9537, 
	9595, 9669, 9743, 9823, 9881, 9955, 10035, 10093, 
	10167, 10256, 10345, 10403, 10477, 10535, 10609, 10667, 
	10741, 10799, 10873, 10931, 11005, 11063, 11137, 11195, 
	11269, 11327, 11401, 11459
};

static const short _indicies[] = {
	0, 2, 3, 4, 5, 6, 7, 
	8, 9, 10, 1, 1, 11, 12, 13, 
	1, 14, 15, 1, 16, 1, 17, 18, 
	1, 19, 1, 20, 1, 1, 1, 1, 
	1, 1, 21, 22, 4, 5, 23, 7, 
	24, 25, 10, 1, 1, 11, 26, 27, 
	1, 14, 15, 1, 16, 1, 28, 29, 
	30, 31, 1, 32, 1, 1, 1, 1, 
	1, 1, 1, 1, 33, 1, 1, 1, 
	1, 1, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 1, 1, 1, 1, 
	1, 1, 35, 36, 37, 38, 39, 40, 
	41, 42, 43, 44, 1, 1, 45, 46, 
	47, 1, 48, 49, 1, 50, 1, 51, 
	52, 1, 53, 1, 54, 1, 1, 1, 
	1, 32, 1, 55, 56, 38, 39, 57, 
	41, 58, 59, 44, 1, 1, 45, 60, 
	61, 1, 48, 49, 1, 50, 1, 62, 
	63, 64, 65, 1, 35, 36, 37, 38, 
	39, 40, 41, 42, 43, 44, 1, 1, 
	45, 46, 47, 1, 48, 49, 1, 50, 
	1, 51, 52, 1, 53, 1, 54, 1, 
	1, 1, 1, 1, 1, 55, 56, 38, 
	39, 57, 41, 58, 59, 44, 1, 1, 
	45, 60, 61, 1, 48, 49, 1, 50, 
	1, 62, 63, 64, 65, 1, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	1, 1, 1, 1, 1, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 1, 
	1, 1, 1, 1, 1, 69, 70, 71, 
	72, 73, 74, 75, 76, 77, 78, 1, 
	1, 79, 80, 81, 1, 82, 83, 1, 
	84, 1, 85, 86, 1, 87, 1, 88, 
	1, 1, 1, 1, 66, 1, 89, 90, 
	72, 73, 91, 75, 92, 93, 78, 1, 
	1, 79, 94, 95, 1, 82, 83, 1, 
	84, 1, 96, 97, 98, 99, 1, 69, 
	70, 71, 72, 73, 74, 75, 76, 77, 
	78, 1, 1, 79, 80, 81, 1, 82, 
	83, 1, 84, 1, 85, 86, 1, 87, 
	1, 88, 1, 1, 1, 1, 1, 1, 
	89, 90, 72, 73, 91, 75, 92, 93, 
	78, 1, 1, 79, 94, 95, 1, 82, 
	83, 1, 84, 1, 96, 97, 98, 99, 
	1, 100, 1, 1, 1, 1, 1, 1, 
	1, 1, 101, 1, 1, 1, 1, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 1, 1, 1, 1, 1, 
	103, 104, 105, 106, 107, 108, 109, 110, 
	111, 112, 1, 1, 113, 114, 115, 1, 
	116, 117, 1, 118, 1, 119, 120, 1, 
	121, 1, 122, 1, 1, 1, 1, 100, 
	1, 123, 124, 106, 107, 125, 109, 126, 
	127, 112, 1, 1, 113, 128, 129, 1, 
	116, 117, 1, 118, 1, 130, 131, 132, 
	133, 1, 103, 104, 105, 106, 107, 108, 
	109, 110, 111, 112, 1, 1, 113, 114, 
	115, 1, 116, 117, 1, 118, 1, 119, 
	120, 1, 121, 1, 122, 1, 1, 1, 
	1, 1, 1, 123, 124, 106, 107, 125, 
	109, 126, 127, 112, 1, 1, 113, 128, 
	129, 1, 116, 117, 1, 118, 1, 130, 
	131, 132, 133, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 135, 1, 1, 
	1, 1, 1, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 1, 1, 147, 
	148, 149, 1, 150, 151, 1, 152, 1, 
	153, 154, 1, 155, 1, 156, 1, 1, 
	1, 1, 134, 1, 157, 158, 140, 141, 
	159, 143, 160, 161, 146, 1, 1, 147, 
	162, 163, 1, 150, 151, 1, 152, 1, 
	164, 165, 166, 167, 1, 137, 138, 139, 
	140, 141, 142, 143, 144, 145, 146, 1, 
	1, 147, 148, 149, 1, 150, 151, 1, 
	152, 1, 153, 154, 1, 155, 1, 156, 
	1, 1, 1, 1, 1, 1, 157, 158, 
	140, 141, 159, 143, 160, 161, 146, 1, 
	1, 147, 162, 163, 1, 150, 151, 1, 
	152, 1, 164, 165, 166, 167, 1, 168, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	169, 1, 1, 1, 1, 1, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	1, 1, 1, 1, 1, 1, 171, 172, 
	173, 174, 175, 176, 177, 178, 179, 180, 
	1, 1, 181, 182, 183, 1, 184, 185, 
	1, 186, 1, 187, 188, 1, 189, 1, 
	190, 1, 1, 1, 1, 168, 1, 191, 
	192, 174, 175, 193, 177, 194, 195, 180, 
	1, 1, 181, 196, 197, 1, 184, 185, 
	1, 186, 1, 198, 199, 200, 201, 1, 
	171, 172, 173, 174, 175, 176, 177, 178, 
	179, 180, 1, 1, 181, 182, 183, 1, 
	184, 185, 1, 186, 1, 187, 188, 1, 
	189, 1, 190, 1, 1, 1, 1, 1, 
	1, 191, 192, 174, 175, 193, 177, 194, 
	195, 180, 1, 1, 181, 196, 197, 1, 
	184, 185, 1, 186, 1, 198, 199, 200, 
	201, 1, 202, 1, 1, 1, 1, 1, 
	1, 1, 1, 203, 1, 1, 1, 1, 
	1, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 1, 1, 1, 1, 1, 
	1, 205, 206, 207, 208, 209, 210, 211, 
	212, 213, 214, 1, 1, 215, 216, 217, 
	1, 218, 219, 1, 220, 1, 221, 222, 
	1, 223, 1, 224, 1, 1, 1, 1, 
	202, 1, 225, 226, 208, 209, 227, 211, 
	228, 229, 214, 1, 1, 215, 230, 231, 
	1, 218, 219, 1, 220, 1, 232, 233, 
	234, 235, 1, 205, 206, 207, 208, 209, 
	210, 211, 212, 213, 214, 1, 1, 215, 
	216, 217, 1, 218, 219, 1, 220, 1, 
	221, 222, 1, 223, 1, 224, 1, 1, 
	1, 1, 1, 1, 225, 226, 208, 209, 
	227, 211, 228, 229, 214, 1, 1, 215, 
	230, 231, 1, 218, 219, 1, 220, 1, 
	232, 233, 234, 235, 1, 236, 1, 1, 
	1, 1, 1, 1, 1, 1, 237, 1, 
	1, 1, 1, 1, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 1, 1, 
	1, 1, 1, 1, 239, 240, 241, 242, 
	243, 244, 245, 246, 247, 248, 1, 1, 
	249, 250, 251, 1, 252, 253, 1, 254, 
	1, 255, 256, 1, 257, 1, 258, 1, 
	1, 1, 1, 236, 1, 259, 260, 242, 
	243, 261, 245, 262, 263, 248, 1, 1, 
	249, 264, 265, 1, 252, 253, 1, 254, 
	1, 266, 267, 268, 269, 1, 239, 240, 
	241, 242, 243, 244, 245, 246, 247, 248, 
	1, 1, 249, 250, 251, 1, 252, 253, 
	1, 254, 1, 255, 256, 1, 257, 1, 
	258, 1, 1, 1, 1, 1, 1, 259, 
	260, 242, 243, 261, 245, 262, 263, 248, 
	1, 1, 249, 264, 265, 1, 252, 253, 
	1, 254, 1, 266, 267, 268, 269, 1, 
	270, 1, 1, 1, 1, 1, 1, 1, 
	1, 271, 1, 1, 1, 1, 1, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 1, 1, 1, 1, 1, 1, 273, 
	274, 275, 276, 277, 278, 279, 280, 281, 
	282, 1, 1, 283, 284, 285, 1, 286, 
	287, 1, 288, 1, 289, 290, 1, 291, 
	1, 292, 1, 1, 1, 1, 270, 1, 
	293, 294, 276, 277, 295, 279, 296, 297, 
	282, 1, 1, 283, 298, 299, 1, 286, 
	287, 1, 288, 1, 300, 301, 302, 303, 
	1, 273, 274, 275, 276, 277, 278, 279, 
	280, 281, 282, 1, 1, 283, 284, 285, 
	1, 286, 287, 1, 288, 1, 289, 290, 
	1, 291, 1, 292, 1, 1, 1, 1, 
	1, 1, 293, 294, 276, 277, 295, 279, 
	296, 297, 282, 1, 1, 283, 298, 299, 
	1, 286, 287, 1, 288, 1, 300, 301, 
	302, 303, 1, 304, 1, 1, 1, 1, 
	1, 1, 1, 1, 305, 1, 1, 1, 
	1, 1, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 1, 1, 1, 1, 
	1, 1, 307, 308, 309, 310, 311, 312, 
	313, 314, 315, 316, 1, 1, 317, 318, 
	319, 1, 320, 321, 1, 322, 1, 323, 
	324, 1, 325, 1, 326, 1, 1, 1, 
	1, 304, 1, 327, 328, 310, 311, 329, 
	313, 330, 331, 316, 1, 1, 317, 332, 
	333, 1, 320, 321, 1, 322, 1, 334, 
	335, 336, 337, 1, 307, 308, 309, 310, 
	311, 312, 313, 314, 315, 316, 1, 1, 
	317, 318, 319, 1, 320, 321, 1, 322, 
	1, 323, 324, 1, 325, 1, 326, 1, 
	1, 1, 1, 1, 1, 327, 328, 310, 
	311, 329, 313, 330, 331, 316, 1, 1, 
	317, 332, 333, 1, 320, 321, 1, 322, 
	1, 334, 335, 336, 337, 1, 338, 1, 
	1, 1, 1, 1, 1, 1, 1, 339, 
	1, 1, 1, 1, 1, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 1, 
	1, 341, 1, 342, 1, 343, 344, 345, 
	346, 347, 348, 349, 350, 351, 352, 1, 
	1, 353, 354, 355, 1, 356, 357, 1, 
	358, 1, 359, 360, 1, 361, 1, 362, 
	1, 1, 1, 1, 338, 1, 363, 364, 
	346, 347, 365, 349, 366, 367, 352, 1, 
	1, 353, 368, 369, 1, 356, 357, 1, 
	358, 1, 370, 371, 372, 373, 1, 339, 
	1, 1, 1, 1, 1, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 1, 
	1, 374, 1, 375, 1, 343, 344, 345, 
	346, 347, 348, 349, 350, 351, 352, 1, 
	1, 353, 354, 355, 1, 356, 357, 1, 
	358, 1, 359, 360, 1, 361, 1, 362, 
	1, 1, 1, 1, 1, 1, 363, 364, 
	346, 347, 365, 349, 366, 367, 352, 1, 
	1, 353, 368, 369, 1, 356, 357, 1, 
	358, 1, 370, 371, 372, 373, 1, 376, 
	377, 378, 379, 380, 381, 382, 383, 384, 
	385, 1, 1, 386, 387, 388, 1, 389, 
	390, 1, 391, 1, 392, 393, 1, 394, 
	1, 395, 1, 1, 1, 1, 1, 1, 
	396, 397, 379, 380, 398, 382, 399, 400, 
	385, 1, 1, 386, 401, 402, 1, 389, 
	390, 1, 391, 1, 403, 404, 405, 406, 
	1, 407, 1, 1, 1, 1, 1, 1, 
	1, 1, 408, 1, 1, 1, 1, 1, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 1, 1, 410, 1, 411, 1, 
	412, 413, 414, 415, 416, 417, 418, 419, 
	420, 421, 1, 1, 422, 423, 424, 1, 
	425, 426, 1, 427, 1, 428, 429, 1, 
	430, 1, 431, 1, 1, 1, 1, 407, 
	1, 432, 433, 415, 416, 434, 418, 435, 
	436, 421, 1, 1, 422, 437, 438, 1, 
	425, 426, 1, 427, 1, 439, 440, 441, 
	442, 1, 443, 1, 1, 1, 1, 1, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 1, 1, 445, 1, 446, 1, 
	447, 448, 449, 450, 451, 452, 453, 454, 
	455, 456, 1, 1, 457, 458, 459, 1, 
	460, 461, 1, 462, 1, 463, 464, 1, 
	465, 1, 466, 1, 1, 1, 1, 1, 
	1, 467, 468, 450, 451, 469, 453, 470, 
	471, 456, 1, 1, 457, 472, 473, 1, 
	460, 461, 1, 462, 1, 474, 475, 476, 
	477, 1, 478, 479, 480, 481, 482, 483, 
	484, 485, 486, 487, 1, 1, 488, 489, 
	490, 1, 491, 492, 1, 493, 1, 494, 
	495, 1, 496, 1, 497, 1, 1, 1, 
	1, 1, 1, 498, 499, 481, 482, 500, 
	484, 501, 502, 487, 1, 1, 488, 503, 
	504, 1, 491, 492, 1, 493, 1, 505, 
	506, 507, 508, 1, 509, 1, 1, 1, 
	1, 1, 1, 1, 1, 510, 1, 1, 
	1, 1, 1, 511, 511, 511, 511, 511, 
	511, 511, 511, 511, 511, 1, 1, 1, 
	1, 1, 1, 512, 513, 514, 515, 516, 
	517, 518, 519, 520, 521, 1, 1, 522, 
	523, 524, 1, 525, 526, 1, 527, 1, 
	528, 529, 1, 530, 1, 531, 1, 1, 
	1, 1, 509, 1, 532, 533, 515, 516, 
	534, 518, 535, 536, 521, 1, 1, 522, 
	537, 538, 1, 525, 526, 1, 527, 1, 
	539, 540, 541, 542, 1, 512, 513, 514, 
	515, 516, 517, 518, 519, 520, 521, 1, 
	1, 522, 523, 524, 1, 525, 526, 1, 
	527, 1, 528, 529, 1, 530, 1, 531, 
	1, 1, 1, 1, 1, 1, 532, 533, 
	515, 516, 534, 518, 535, 536, 521, 1, 
	1, 522, 537, 538, 1, 525, 526, 1, 
	527, 1, 539, 540, 541, 542, 1, 543, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	544, 1, 1, 1, 1, 1, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	1, 1, 1, 1, 1, 1, 546, 547, 
	548, 549, 550, 551, 552, 553, 554, 555, 
	1, 1, 556, 557, 558, 1, 559, 560, 
	1, 561, 1, 562, 563, 1, 564, 1, 
	565, 1, 1, 1, 1, 543, 1, 566, 
	567, 549, 550, 568, 552, 569, 570, 555, 
	1, 1, 556, 571, 572, 1, 559, 560, 
	1, 561, 1, 573, 574, 575, 576, 1, 
	546, 547, 548, 549, 550, 551, 552, 553, 
	554, 555, 1, 1, 556, 557, 558, 1, 
	559, 560, 1, 561, 1, 562, 563, 1, 
	564, 1, 565, 1, 1, 1, 1, 1, 
	1, 566, 567, 549, 550, 568, 552, 569, 
	570, 555, 1, 1, 556, 571, 572, 1, 
	559, 560, 1, 561, 1, 573, 574, 575, 
	576, 1, 577, 1, 1, 1, 1, 1, 
	1, 1, 1, 578, 1, 1, 1, 1, 
	1, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 1, 1, 1, 1, 1, 
	1, 580, 581, 582, 583, 584, 585, 586, 
	587, 588, 589, 1, 1, 590, 591, 592, 
	1, 593, 594, 1, 595, 1, 596, 597, 
	1, 598, 1, 599, 1, 1, 1, 1, 
	577, 1, 600, 601, 583, 584, 602, 586, 
	603, 604, 589, 1, 1, 590, 605, 606, 
	1, 593, 594, 1, 595, 1, 607, 608, 
	609, 610, 1, 580, 581, 582, 583, 584, 
	585, 586, 587, 588, 589, 1, 1, 590, 
	591, 592, 1, 593, 594, 1, 595, 1, 
	596, 597, 1, 598, 1, 599, 1, 1, 
	1, 1, 1, 1, 600, 601, 583, 584, 
	602, 586, 603, 604, 589, 1, 1, 590, 
	605, 606, 1, 593, 594, 1, 595, 1, 
	607, 608, 609, 610, 1, 611, 1, 1, 
	1, 1, 1, 1, 1, 1, 612, 1, 
	1, 1, 1, 1, 613, 613, 613, 613, 
	613, 613, 613, 613, 613, 613, 1, 1, 
	614, 1, 615, 1, 616, 617, 618, 619, 
	620, 621, 622, 623, 624, 625, 1, 1, 
	626, 627, 628, 1, 629, 630, 1, 631, 
	1, 632, 633, 1, 634, 1, 635, 1, 
	1, 1, 1, 611, 1, 636, 637, 619, 
	620, 638, 622, 639, 640, 625, 1, 1, 
	626, 641, 642, 1, 629, 630, 1, 631, 
	1, 643, 644, 645, 646, 1, 616, 617, 
	618, 619, 620, 621, 622, 623, 624, 625, 
	1, 1, 626, 627, 628, 1, 629, 630, 
	1, 631, 1, 632, 633, 1, 634, 1, 
	635, 1, 1, 1, 1, 1, 1, 636, 
	637, 619, 620, 638, 622, 639, 640, 625, 
	1, 1, 626, 641, 642, 1, 629, 630, 
	1, 631, 1, 643, 644, 645, 646, 1, 
	647, 1, 1, 1, 1, 1, 1, 1, 
	1, 648, 1, 1, 1, 1, 1, 649, 
	649, 649, 649, 649, 649, 649, 649, 649, 
	649, 1, 1, 650, 1, 651, 1, 652, 
	653, 654, 655, 656, 657, 658, 659, 660, 
	661, 1, 1, 662, 663, 664, 1, 665, 
	666, 1, 667, 1, 668, 669, 1, 670, 
	1, 671, 1, 1, 1, 1, 647, 1, 
	672, 673, 655, 656, 674, 658, 675, 676, 
	661, 1, 1, 662, 677, 678, 1, 665, 
	666, 1, 667, 1, 679, 680, 681, 682, 
	1, 648, 1, 1, 1, 1, 1, 649, 
	649, 649, 649, 649, 649, 649, 649, 649, 
	649, 1, 1, 683, 1, 684, 1, 652, 
	653, 654, 655, 656, 657, 658, 659, 660, 
	661, 1, 1, 662, 663, 664, 1, 665, 
	666, 1, 667, 1, 668, 669, 1, 670, 
	1, 671, 1, 1, 1, 1, 1, 1, 
	672, 673, 655, 656, 674, 658, 675, 676, 
	661, 1, 1, 662, 677, 678, 1, 665, 
	666, 1, 667, 1, 679, 680, 681, 682, 
	1, 685, 686, 687, 688, 689, 690, 691, 
	692, 693, 694, 1, 1, 695, 696, 697, 
	1, 698, 699, 1, 700, 1, 701, 702, 
	1, 703, 1, 704, 1, 1, 1, 1, 
	1, 1, 705, 706, 688, 689, 707, 691, 
	708, 709, 694, 1, 1, 695, 710, 711, 
	1, 698, 699, 1, 700, 1, 712, 713, 
	714, 715, 1, 716, 1, 1, 1, 1, 
	1, 1, 1, 1, 717, 1, 1, 1, 
	1, 1, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 1, 1, 1, 1, 
	1, 1, 719, 720, 721, 722, 723, 724, 
	725, 726, 727, 728, 1, 1, 729, 730, 
	731, 1, 732, 733, 1, 734, 1, 735, 
	736, 1, 737, 1, 738, 1, 1, 1, 
	1, 716, 1, 739, 740, 722, 723, 741, 
	725, 742, 743, 728, 1, 1, 729, 744, 
	745, 1, 732, 733, 1, 734, 1, 746, 
	747, 748, 749, 1, 719, 720, 721, 722, 
	723, 724, 725, 726, 727, 728, 1, 1, 
	729, 730, 731, 1, 732, 733, 1, 734, 
	1, 735, 736, 1, 737, 1, 738, 1, 
	1, 1, 1, 1, 1, 739, 740, 722, 
	723, 741, 725, 742, 743, 728, 1, 1, 
	729, 744, 745, 1, 732, 733, 1, 734, 
	1, 746, 747, 748, 749, 1, 750, 1, 
	1, 1, 1, 1, 1, 1, 1, 751, 
	1, 1, 1, 1, 1, 752, 752, 752, 
	752, 752, 752, 752, 752, 752, 752, 1, 
	1, 1, 1, 1, 1, 753, 754, 755, 
	756, 757, 758, 759, 760, 761, 762, 1, 
	1, 763, 764, 765, 1, 766, 767, 1, 
	768, 1, 769, 770, 1, 771, 1, 772, 
	1, 1, 1, 1, 750, 1, 773, 774, 
	756, 757, 775, 759, 776, 777, 762, 1, 
	1, 763, 778, 779, 1, 766, 767, 1, 
	768, 1, 780, 781, 782, 783, 1, 753, 
	754, 755, 756, 757, 758, 759, 760, 761, 
	762, 1, 1, 763, 764, 765, 1, 766, 
	767, 1, 768, 1, 769, 770, 1, 771, 
	1, 772, 1, 1, 1, 1, 1, 1, 
	773, 774, 756, 757, 775, 759, 776, 777, 
	762, 1, 1, 763, 778, 779, 1, 766, 
	767, 1, 768, 1, 780, 781, 782, 783, 
	1, 784, 1, 1, 1, 1, 1, 1, 
	1, 1, 785, 1, 1, 1, 1, 1, 
	786, 786, 786, 786, 786, 786, 786, 786, 
	786, 786, 1, 1, 1, 1, 1, 1, 
	787, 788, 789, 790, 791, 792, 793, 794, 
	795, 796, 1, 1, 797, 798, 799, 1, 
	800, 801, 1, 802, 1, 803, 804, 1, 
	805, 1, 806, 1, 1, 1, 1, 784, 
	1, 807, 808, 790, 791, 809, 793, 810, 
	811, 796, 1, 1, 797, 812, 813, 1, 
	800, 801, 1, 802, 1, 814, 815, 816, 
	817, 1, 787, 788, 789, 790, 791, 792, 
	793, 794, 795, 796, 1, 1, 797, 798, 
	799, 1, 800, 801, 1, 802, 1, 803, 
	804, 1, 805, 1, 806, 1, 1, 1, 
	1, 1, 1, 807, 808, 790, 791, 809, 
	793, 810, 811, 796, 1, 1, 797, 812, 
	813, 1, 800, 801, 1, 802, 1, 814, 
	815, 816, 817, 1, 818, 1, 1, 1, 
	1, 1, 1, 1, 1, 819, 1, 1, 
	1, 1, 1, 820, 820, 820, 820, 820, 
	820, 820, 820, 820, 820, 1, 1, 1, 
	1, 1, 1, 821, 822, 823, 824, 825, 
	826, 827, 828, 829, 830, 1, 1, 831, 
	832, 833, 1, 834, 835, 1, 836, 1, 
	837, 838, 1, 839, 1, 840, 1, 1, 
	1, 1, 818, 1, 841, 842, 824, 825, 
	843, 827, 844, 845, 830, 1, 1, 831, 
	846, 847, 1, 834, 835, 1, 836, 1, 
	848, 849, 850, 851, 1, 821, 822, 823, 
	824, 825, 826, 827, 828, 829, 830, 1, 
	1, 831, 832, 833, 1, 834, 835, 1, 
	836, 1, 837, 838, 1, 839, 1, 840, 
	1, 1, 1, 1, 1, 1, 841, 842, 
	824, 825, 843, 827, 844, 845, 830, 1, 
	1, 831, 846, 847, 1, 834, 835, 1, 
	836, 1, 848, 849, 850, 851, 1, 852, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	853, 1, 1, 1, 1, 1, 854, 854, 
	854, 854, 854, 854, 854, 854, 854, 854, 
	1, 1, 1, 1, 1, 1, 855, 856, 
	857, 858, 859, 860, 861, 862, 863, 864, 
	1, 1, 865, 866, 867, 1, 868, 869, 
	1, 870, 1, 871, 872, 1, 873, 1, 
	874, 1, 1, 1, 1, 852, 1, 875, 
	876, 858, 859, 877, 861, 878, 879, 864, 
	1, 1, 865, 880, 881, 1, 868, 869, 
	1, 870, 1, 882, 883, 884, 885, 1, 
	855, 856, 857, 858, 859, 860, 861, 862, 
	863, 864, 1, 1, 865, 866, 867, 1, 
	868, 869, 1, 870, 1, 871, 872, 1, 
	873, 1, 874, 1, 1, 1, 1, 1, 
	1, 875, 876, 858, 859, 877, 861, 878, 
	879, 864, 1, 1, 865, 880, 881, 1, 
	868, 869, 1, 870, 1, 882, 883, 884, 
	885, 1, 886, 1, 1, 1, 1, 1, 
	1, 1, 1, 887, 1, 1, 1, 1, 
	1, 888, 888, 888, 888, 888, 888, 888, 
	888, 888, 888, 1, 1, 1, 1, 1, 
	1, 889, 890, 891, 892, 893, 894, 895, 
	896, 897, 898, 1, 1, 899, 900, 901, 
	1, 902, 903, 1, 904, 1, 905, 906, 
	1, 907, 1, 908, 1, 1, 1, 1, 
	886, 1, 909, 910, 892, 893, 911, 895, 
	912, 913, 898, 1, 1, 899, 914, 915, 
	1, 902, 903, 1, 904, 1, 916, 917, 
	918, 919, 1, 889, 890, 891, 892, 893, 
	894, 895, 896, 897, 898, 1, 1, 899, 
	900, 901, 1, 902, 903, 1, 904, 1, 
	905, 906, 1, 907, 1, 908, 1, 1, 
	1, 1, 1, 1, 909, 910, 892, 893, 
	911, 895, 912, 913, 898, 1, 1, 899, 
	914, 915, 1, 902, 903, 1, 904, 1, 
	916, 917, 918, 919, 1, 920, 1, 1, 
	1, 1, 1, 1, 1, 1, 921, 1, 
	1, 1, 1, 1, 922, 922, 922, 922, 
	922, 922, 922, 922, 922, 922, 1, 1, 
	1, 1, 1, 1, 923, 924, 925, 926, 
	927, 928, 929, 930, 931, 932, 1, 1, 
	933, 934, 935, 1, 936, 937, 1, 938, 
	1, 939, 940, 1, 941, 1, 942, 1, 
	1, 1, 1, 920, 1, 943, 944, 926, 
	927, 945, 929, 946, 947, 932, 1, 1, 
	933, 948, 949, 1, 936, 937, 1, 938, 
	1, 950, 951, 952, 953, 1, 923, 924, 
	925, 926, 927, 928, 929, 930, 931, 932, 
	1, 1, 933, 934, 935, 1, 936, 937, 
	1, 938, 1, 939, 940, 1, 941, 1, 
	942, 1, 1, 1, 1, 1, 1, 943, 
	944, 926, 927, 945, 929, 946, 947, 932, 
	1, 1, 933, 948, 949, 1, 936, 937, 
	1, 938, 1, 950, 951, 952, 953, 1, 
	954, 1, 1, 1, 1, 1, 1, 1, 
	1, 955, 1, 1, 1, 1, 1, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 1, 1, 1, 1, 1, 1, 957, 
	958, 959, 960, 961, 962, 963, 964, 965, 
	966, 1, 1, 967, 968, 969, 1, 970, 
	971, 1, 972, 1, 973, 974, 1, 975, 
	1, 976, 1, 1, 1, 1, 954, 1, 
	977, 978, 960, 961, 979, 963, 980, 981, 
	966, 1, 1, 967, 982, 983, 1, 970, 
	971, 1, 972, 1, 984, 985, 986, 987, 
	1, 957, 958, 959, 960, 961, 962, 963, 
	964, 965, 966, 1, 1, 967, 968, 969, 
	1, 970, 971, 1, 972, 1, 973, 974, 
	1, 975, 1, 976, 1, 1, 1, 1, 
	1, 1, 977, 978, 960, 961, 979, 963, 
	980, 981, 966, 1, 1, 967, 982, 983, 
	1, 970, 971, 1, 972, 1, 984, 985, 
	986, 987, 1, 988, 1, 1, 1, 1, 
	1, 1, 1, 1, 989, 1, 1, 1, 
	1, 1, 990, 990, 990, 990, 990, 990, 
	990, 990, 990, 990, 1, 1, 1, 1, 
	1, 1, 991, 992, 993, 994, 995, 996, 
	997, 998, 999, 1000, 1, 1, 1001, 1002, 
	1003, 1, 1004, 1005, 1, 1006, 1, 1007, 
	1008, 1, 1009, 1, 1010, 1, 1, 1, 
	1, 988, 1, 1011, 1012, 994, 995, 1013, 
	997, 1014, 1015, 1000, 1, 1, 1001, 1016, 
	1017, 1, 1004, 1005, 1, 1006, 1, 1018, 
	1019, 1020, 1021, 1, 991, 992, 993, 994, 
	995, 996, 997, 998, 999, 1000, 1, 1, 
	1001, 1002, 1003, 1, 1004, 1005, 1, 1006, 
	1, 1007, 1008, 1, 1009, 1, 1010, 1, 
	1, 1, 1, 1, 1, 1011, 1012, 994, 
	995, 1013, 997, 1014, 1015, 1000, 1, 1, 
	1001, 1016, 1017, 1, 1004, 1005, 1, 1006, 
	1, 1018, 1019, 1020, 1021, 1, 1022, 1, 
	1, 1, 1, 1, 1, 1, 1, 1023, 
	1, 1, 1, 1, 1, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1, 
	1, 1, 1, 1, 1, 1025, 1026, 1027, 
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1, 
	1, 1035, 1036, 1037, 1, 1038, 1039, 1, 
	1040, 1, 1041, 1042, 1, 1043, 1, 1044, 
	1, 1, 1, 1, 1022, 1, 1045, 1046, 
	1028, 1029, 1047, 1031, 1048, 1049, 1034, 1, 
	1, 1035, 1050, 1051, 1, 1038, 1039, 1, 
	1040, 1, 1052, 1053, 1054, 1055, 1, 1025, 
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 
	1034, 1, 1, 1035, 1036, 1037, 1, 1038, 
	1039, 1, 1040, 1, 1041, 1042, 1, 1043, 
	1, 1044, 1, 1, 1, 1, 1, 1, 
	1045, 1046, 1028, 1029, 1047, 1031, 1048, 1049, 
	1034, 1, 1, 1035, 1050, 1051, 1, 1038, 
	1039, 1, 1040, 1, 1052, 1053, 1054, 1055, 
	1, 1056, 1, 1, 1, 1, 1, 1, 
	1, 1, 1057, 1, 1, 1, 1, 1, 
	1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 
	1058, 1058, 1, 1, 1, 1, 1, 1, 
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 
	1067, 1068, 1, 1, 1069, 1070, 1071, 1, 
	1072, 1073, 1, 1074, 1, 1075, 1076, 1, 
	1077, 1, 1078, 1, 1, 1, 1, 1056, 
	1, 1079, 1080, 1062, 1063, 1081, 1065, 1082, 
	1083, 1068, 1, 1, 1069, 1084, 1085, 1, 
	1072, 1073, 1, 1074, 1, 1086, 1087, 1088, 
	1089, 1, 1059, 1060, 1061, 1062, 1063, 1064, 
	1065, 1066, 1067, 1068, 1, 1, 1069, 1070, 
	1071, 1, 1072, 1073, 1, 1074, 1, 1075, 
	1076, 1, 1077, 1, 1078, 1, 1, 1, 
	1, 1, 1, 1079, 1080, 1062, 1063, 1081, 
	1065, 1082, 1083, 1068, 1, 1, 1069, 1084, 
	1085, 1, 1072, 1073, 1, 1074, 1, 1086, 
	1087, 1088, 1089, 1, 1090, 1, 1, 1, 
	1, 1, 1, 1, 1, 1091, 1, 1, 
	1, 1, 1, 1092, 1092, 1092, 1092, 1092, 
	1092, 1092, 1092, 1092, 1092, 1, 1, 1, 
	1, 1, 1, 1093, 1094, 1095, 1096, 1097, 
	1098, 1099, 1100, 1101, 1102, 1, 1, 1103, 
	1104, 1105, 1, 1106, 1107, 1, 1108, 1, 
	1109, 1110, 1, 1111, 1, 1112, 1, 1, 
	1, 1, 1090, 1, 1113, 1114, 1096, 1097, 
	1115, 1099, 1116, 1117, 1102, 1, 1, 1103, 
	1118, 1119, 1, 1106, 1107, 1, 1108, 1, 
	1120, 1121, 1122, 1123, 1, 1093, 1094, 1095, 
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1, 
	1, 1103, 1104, 1105, 1, 1106, 1107, 1, 
	1108, 1, 1109, 1110, 1, 1111, 1, 1112, 
	1, 1, 1, 1, 1, 1, 1113, 1114, 
	1096, 1097, 1115, 1099, 1116, 1117, 1102, 1, 
	1, 1103, 1118, 1119, 1, 1106, 1107, 1, 
	1108, 1, 1120, 1121, 1122, 1123, 1, 1124, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1125, 1, 1, 1, 1, 1, 1126, 1126, 
	1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 
	1, 1, 1, 1, 1, 1, 1127, 1128, 
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 
	1, 1, 1137, 1138, 1139, 1, 1140, 1141, 
	1, 1142, 1, 1143, 1144, 1, 1145, 1, 
	1146, 1, 1, 1, 1, 1124, 1, 1147, 
	1148, 1130, 1131, 1149, 1133, 1150, 1151, 1136, 
	1, 1, 1137, 1152, 1153, 1, 1140, 1141, 
	1, 1142, 1, 1154, 1155, 1156, 1157, 1, 
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 
	1135, 1136, 1, 1, 1137, 1138, 1139, 1, 
	1140, 1141, 1, 1142, 1, 1143, 1144, 1, 
	1145, 1, 1146, 1, 1, 1, 1, 1, 
	1, 1147, 1148, 1130, 1131, 1149, 1133, 1150, 
	1151, 1136, 1, 1, 1137, 1152, 1153, 1, 
	1140, 1141, 1, 1142, 1, 1154, 1155, 1156, 
	1157, 1, 1158, 1, 1, 1, 1, 1, 
	1, 1, 1, 1159, 1, 1, 1, 1, 
	1, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 
	1160, 1160, 1160, 1, 1, 1, 1, 1, 
	1, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 
	1168, 1169, 1170, 1, 1, 1171, 1172, 1173, 
	1, 1174, 1175, 1, 1176, 1, 1177, 1178, 
	1, 1179, 1, 1180, 1, 1, 1, 1, 
	1158, 1, 1181, 1182, 1164, 1165, 1183, 1167, 
	1184, 1185, 1170, 1, 1, 1171, 1186, 1187, 
	1, 1174, 1175, 1, 1176, 1, 1188, 1189, 
	1190, 1191, 1, 1161, 1162, 1163, 1164, 1165, 
	1166, 1167, 1168, 1169, 1170, 1, 1, 1171, 
	1172, 1173, 1, 1174, 1175, 1, 1176, 1, 
	1177, 1178, 1, 1179, 1, 1180, 1, 1, 
	1, 1, 1, 1, 1181, 1182, 1164, 1165, 
	1183, 1167, 1184, 1185, 1170, 1, 1, 1171, 
	1186, 1187, 1, 1174, 1175, 1, 1176, 1, 
	1188, 1189, 1190, 1191, 1, 1192, 1, 1, 
	1, 1, 1, 1, 1, 1, 1193, 1, 
	1, 1, 1, 1, 1194, 1194, 1194, 1194, 
	1194, 1194, 1194, 1194, 1194, 1194, 1, 1, 
	1, 1, 1, 1, 1195, 1196, 1197, 1198, 
	1199, 1200, 1201, 1202, 1203, 1204, 1, 1, 
	1205, 1206, 1207, 1, 1208, 1209, 1, 1210, 
	1, 1211, 1212, 1, 1213, 1, 1214, 1, 
	1, 1, 1, 1192, 1, 1215, 1216, 1198, 
	1199, 1217, 1201, 1218, 1219, 1204, 1, 1, 
	1205, 1220, 1221, 1, 1208, 1209, 1, 1210, 
	1, 1222, 1223, 1224, 1225, 1, 1195, 1196, 
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 
	1, 1, 1205, 1206, 1207, 1, 1208, 1209, 
	1, 1210, 1, 1211, 1212, 1, 1213, 1, 
	1214, 1, 1, 1, 1, 1, 1, 1215, 
	1216, 1198, 1199, 1217, 1201, 1218, 1219, 1204, 
	1, 1, 1205, 1220, 1221, 1, 1208, 1209, 
	1, 1210, 1, 1222, 1223, 1224, 1225, 1, 
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 
	1234, 1235, 1, 1, 1236, 1237, 1238, 1, 
	1239, 1240, 1, 1241, 1, 1242, 1243, 1, 
	1244, 1, 1245, 1, 1, 1, 1, 1, 
	1, 1246, 1247, 1229, 1230, 1248, 1232, 1249, 
	1250, 1235, 1, 1, 1236, 1251, 1252, 1, 
	1239, 1240, 1, 1241, 1, 1253, 1254, 1255, 
	1256, 1, 1257, 1257, 1257, 1257, 1257, 1257, 
	1257, 1257, 1257, 1257, 1, 1, 1, 1, 
	1, 1, 1195, 1196, 1197, 1198, 1199, 1200, 
	1201, 1202, 1203, 1204, 1, 1, 1205, 1206, 
	1207, 1, 1208, 1209, 1, 1210, 1, 1211, 
	1212, 1, 1213, 1, 1214, 1, 1, 1, 
	1, 1, 1, 1215, 1216, 1198, 1199, 1217, 
	1201, 1218, 1219, 1204, 1, 1, 1205, 1220, 
	1221, 1, 1208, 1209, 1, 1210, 1, 1222, 
	1223, 1224, 1225, 1, 1258, 1259, 1260, 1261, 
	1262, 1263, 1264, 1265, 1266, 1267, 1, 1, 
	1268, 1269, 1270, 1, 1271, 1272, 1, 1273, 
	1, 1274, 1275, 1, 1276, 1, 1277, 1, 
	1, 1, 1, 1, 1, 1278, 1279, 1261, 
	1262, 1280, 1264, 1281, 1282, 1267, 1, 1, 
	1268, 1283, 1284, 1, 1271, 1272, 1, 1273, 
	1, 1285, 1286, 1287, 1288, 1, 1289, 1289, 
	1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 
	1, 1, 1, 1, 1, 1, 1161, 1162, 
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 
	1, 1, 1171, 1172, 1173, 1, 1174, 1175, 
	1, 1176, 1, 1177, 1178, 1, 1179, 1, 
	1180, 1, 1, 1, 1, 1, 1, 1181, 
	1182, 1164, 1165, 1183, 1167, 1184, 1185, 1170, 
	1, 1, 1171, 1186, 1187, 1, 1174, 1175, 
	1, 1176, 1, 1188, 1189, 1190, 1191, 1, 
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 
	1298, 1299, 1, 1, 1300, 1301, 1302, 1, 
	1303, 1304, 1, 1305, 1, 1306, 1307, 1, 
	1308, 1, 1309, 1, 1, 1, 1, 1, 
	1, 1310, 1311, 1293, 1294, 1312, 1296, 1313, 
	1314, 1299, 1, 1, 1300, 1315, 1316, 1, 
	1303, 1304, 1, 1305, 1, 1317, 1318, 1319, 
	1320, 1, 1321, 1321, 1321, 1321, 1321, 1321, 
	1321, 1321, 1321, 1321, 1, 1, 1, 1, 
	1, 1, 1127, 1128, 1129, 1130, 1131, 1132, 
	1133, 1134, 1135, 1136, 1, 1, 1137, 1138, 
	1139, 1, 1140, 1141, 1, 1142, 1, 1143, 
	1144, 1, 1145, 1, 1146, 1, 1, 1, 
	1, 1, 1, 1147, 1148, 1130, 1131, 1149, 
	1133, 1150, 1151, 1136, 1, 1, 1137, 1152, 
	1153, 1, 1140, 1141, 1, 1142, 1, 1154, 
	1155, 1156, 1157, 1, 1322, 1323, 1324, 1325, 
	1326, 1327, 1328, 1329, 1330, 1331, 1, 1, 
	1332, 1333, 1334, 1, 1335, 1336, 1, 1337, 
	1, 1338, 1339, 1, 1340, 1, 1341, 1, 
	1, 1, 1, 1, 1, 1342, 1343, 1325, 
	1326, 1344, 1328, 1345, 1346, 1331, 1, 1, 
	1332, 1347, 1348, 1, 1335, 1336, 1, 1337, 
	1, 1349, 1350, 1351, 1352, 1, 1353, 1353, 
	1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 
	1, 1, 1, 1, 1, 1, 1093, 1094, 
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 
	1, 1, 1103, 1104, 1105, 1, 1106, 1107, 
	1, 1108, 1, 1109, 1110, 1, 1111, 1, 
	1112, 1, 1, 1, 1, 1, 1, 1113, 
	1114, 1096, 1097, 1115, 1099, 1116, 1117, 1102, 
	1, 1, 1103, 1118, 1119, 1, 1106, 1107, 
	1, 1108, 1, 1120, 1121, 1122, 1123, 1, 
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 
	1362, 1363, 1, 1, 1364, 1365, 1366, 1, 
	1367, 1368, 1, 1369, 1, 1370, 1371, 1, 
	1372, 1, 1373, 1, 1, 1, 1, 1, 
	1, 1374, 1375, 1357, 1358, 1376, 1360, 1377, 
	1378, 1363, 1, 1, 1364, 1379, 1380, 1, 
	1367, 1368, 1, 1369, 1, 1381, 1382, 1383, 
	1384, 1, 1385, 1385, 1385, 1385, 1385, 1385, 
	1385, 1385, 1385, 1385, 1, 1, 1, 1, 
	1, 1, 1059, 1060, 1061, 1062, 1063, 1064, 
	1065, 1066, 1067, 1068, 1, 1, 1069, 1070, 
	1071, 1, 1072, 1073, 1, 1074, 1, 1075, 
	1076, 1, 1077, 1, 1078, 1, 1, 1, 
	1, 1, 1, 1079, 1080, 1062, 1063, 1081, 
	1065, 1082, 1083, 1068, 1, 1, 1069, 1084, 
	1085, 1, 1072, 1073, 1, 1074, 1, 1086, 
	1087, 1088, 1089, 1, 1386, 1387, 1388, 1389, 
	1390, 1391, 1392, 1393, 1394, 1395, 1, 1, 
	1396, 1397, 1398, 1, 1399, 1400, 1, 1401, 
	1, 1402, 1403, 1, 1404, 1, 1405, 1, 
	1, 1, 1, 1, 1, 1406, 1407, 1389, 
	1390, 1408, 1392, 1409, 1410, 1395, 1, 1, 
	1396, 1411, 1412, 1, 1399, 1400, 1, 1401, 
	1, 1413, 1414, 1415, 1416, 1, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1, 1, 1, 1, 1, 1, 1025, 1026, 
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 
	1, 1, 1035, 1036, 1037, 1, 1038, 1039, 
	1, 1040, 1, 1041, 1042, 1, 1043, 1, 
	1044, 1, 1, 1, 1, 1, 1, 1045, 
	1046, 1028, 1029, 1047, 1031, 1048, 1049, 1034, 
	1, 1, 1035, 1050, 1051, 1, 1038, 1039, 
	1, 1040, 1, 1052, 1053, 1054, 1055, 1, 
	1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 
	1426, 1427, 1, 1, 1428, 1429, 1430, 1, 
	1431, 1432, 1, 1433, 1, 1434, 1435, 1, 
	1436, 1, 1437, 1, 1, 1, 1, 1, 
	1, 1438, 1439, 1421, 1422, 1440, 1424, 1441, 
	1442, 1427, 1, 1, 1428, 1443, 1444, 1, 
	1431, 1432, 1, 1433, 1, 1445, 1446, 1447, 
	1448, 1, 1449, 1449, 1449, 1449, 1449, 1449, 
	1449, 1449, 1449, 1449, 1, 1, 1, 1, 
	1, 1, 991, 992, 993, 994, 995, 996, 
	997, 998, 999, 1000, 1, 1, 1001, 1002, 
	1003, 1, 1004, 1005, 1, 1006, 1, 1007, 
	1008, 1, 1009, 1, 1010, 1, 1, 1, 
	1, 1, 1, 1011, 1012, 994, 995, 1013, 
	997, 1014, 1015, 1000, 1, 1, 1001, 1016, 
	1017, 1, 1004, 1005, 1, 1006, 1, 1018, 
	1019, 1020, 1021, 1, 1450, 1451, 1452, 1453, 
	1454, 1455, 1456, 1457, 1458, 1459, 1, 1, 
	1460, 1461, 1462, 1, 1463, 1464, 1, 1465, 
	1, 1466, 1467, 1, 1468, 1, 1469, 1, 
	1, 1, 1, 1, 1, 1470, 1471, 1453, 
	1454, 1472, 1456, 1473, 1474, 1459, 1, 1, 
	1460, 1475, 1476, 1, 1463, 1464, 1, 1465, 
	1, 1477, 1478, 1479, 1480, 1, 1481, 1481, 
	1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 
	1, 1, 1, 1, 1, 1, 957, 958, 
	959, 960, 961, 962, 963, 964, 965, 966, 
	1, 1, 967, 968, 969, 1, 970, 971, 
	1, 972, 1, 973, 974, 1, 975, 1, 
	976, 1, 1, 1, 1, 1, 1, 977, 
	978, 960, 961, 979, 963, 980, 981, 966, 
	1, 1, 967, 982, 983, 1, 970, 971, 
	1, 972, 1, 984, 985, 986, 987, 1, 
	1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 
	1490, 1491, 1, 1, 1492, 1493, 1494, 1, 
	1495, 1496, 1, 1497, 1, 1498, 1499, 1, 
	1500, 1, 1501, 1, 1, 1, 1, 1, 
	1, 1502, 1503, 1485, 1486, 1504, 1488, 1505, 
	1506, 1491, 1, 1, 1492, 1507, 1508, 1, 
	1495, 1496, 1, 1497, 1, 1509, 1510, 1511, 
	1512, 1, 1513, 1513, 1513, 1513, 1513, 1513, 
	1513, 1513, 1513, 1513, 1, 1, 1, 1, 
	1, 1, 923, 924, 925, 926, 927, 928, 
	929, 930, 931, 932, 1, 1, 933, 934, 
	935, 1, 936, 937, 1, 938, 1, 939, 
	940, 1, 941, 1, 942, 1, 1, 1, 
	1, 1, 1, 943, 944, 926, 927, 945, 
	929, 946, 947, 932, 1, 1, 933, 948, 
	949, 1, 936, 937, 1, 938, 1, 950, 
	951, 952, 953, 1, 1514, 1515, 1516, 1517, 
	1518, 1519, 1520, 1521, 1522, 1523, 1, 1, 
	1524, 1525, 1526, 1, 1527, 1528, 1, 1529, 
	1, 1530, 1531, 1, 1532, 1, 1533, 1, 
	1, 1, 1, 1, 1, 1534, 1535, 1517, 
	1518, 1536, 1520, 1537, 1538, 1523, 1, 1, 
	1524, 1539, 1540, 1, 1527, 1528, 1, 1529, 
	1, 1541, 1542, 1543, 1544, 1, 1545, 1545, 
	1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 
	1, 1, 1, 1, 1, 1, 889, 890, 
	891, 892, 893, 894, 895, 896, 897, 898, 
	1, 1, 899, 900, 901, 1, 902, 903, 
	1, 904, 1, 905, 906, 1, 907, 1, 
	908, 1, 1, 1, 1, 1, 1, 909, 
	910, 892, 893, 911, 895, 912, 913, 898, 
	1, 1, 899, 914, 915, 1, 902, 903, 
	1, 904, 1, 916, 917, 918, 919, 1, 
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 
	1554, 1555, 1, 1, 1556, 1557, 1558, 1, 
	1559, 1560, 1, 1561, 1, 1562, 1563, 1, 
	1564, 1, 1565, 1, 1, 1, 1, 1, 
	1, 1566, 1567, 1549, 1550, 1568, 1552, 1569, 
	1570, 1555, 1, 1, 1556, 1571, 1572, 1, 
	1559, 1560, 1, 1561, 1, 1573, 1574, 1575, 
	1576, 1, 1577, 1577, 1577, 1577, 1577, 1577, 
	1577, 1577, 1577, 1577, 1, 1, 1, 1, 
	1, 1, 855, 856, 857, 858, 859, 860, 
	861, 862, 863, 864, 1, 1, 865, 866, 
	867, 1, 868, 869, 1, 870, 1, 871, 
	872, 1, 873, 1, 874, 1, 1, 1, 
	1, 1, 1, 875, 876, 858, 859, 877, 
	861, 878, 879, 864, 1, 1, 865, 880, 
	881, 1, 868, 869, 1, 870, 1, 882, 
	883, 884, 885, 1, 1578, 1579, 1580, 1581, 
	1582, 1583, 1584, 1585, 1586, 1587, 1, 1, 
	1588, 1589, 1590, 1, 1591, 1592, 1, 1593, 
	1, 1594, 1595, 1, 1596, 1, 1597, 1, 
	1, 1, 1, 1, 1, 1598, 1599, 1581, 
	1582, 1600, 1584, 1601, 1602, 1587, 1, 1, 
	1588, 1603, 1604, 1, 1591, 1592, 1, 1593, 
	1, 1605, 1606, 1607, 1608, 1, 1609, 1609, 
	1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 
	1, 1, 1, 1, 1, 1, 821, 822, 
	823, 824, 825, 826, 827, 828, 829, 830, 
	1, 1, 831, 832, 833, 1, 834, 835, 
	1, 836, 1, 837, 838, 1, 839, 1, 
	840, 1, 1, 1, 1, 1, 1, 841, 
	842, 824, 825, 843, 827, 844, 845, 830, 
	1, 1, 831, 846, 847, 1, 834, 835, 
	1, 836, 1, 848, 849, 850, 851, 1, 
	1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 
	1618, 1619, 1, 1, 1620, 1621, 1622, 1, 
	1623, 1624, 1, 1625, 1, 1626, 1627, 1, 
	1628, 1, 1629, 1, 1, 1, 1, 1, 
	1, 1630, 1631, 1613, 1614, 1632, 1616, 1633, 
	1634, 1619, 1, 1, 1620, 1635, 1636, 1, 
	1623, 1624, 1, 1625, 1, 1637, 1638, 1639, 
	1640, 1, 1641, 1641, 1641, 1641, 1641, 1641, 
	1641, 1641, 1641, 1641, 1, 1, 1, 1, 
	1, 1, 787, 788, 789, 790, 791, 792, 
	793, 794, 795, 796, 1, 1, 797, 798, 
	799, 1, 800, 801, 1, 802, 1, 803, 
	804, 1, 805, 1, 806, 1, 1, 1, 
	1, 1, 1, 807, 808, 790, 791, 809, 
	793, 810, 811, 796, 1, 1, 797, 812, 
	813, 1, 800, 801, 1, 802, 1, 814, 
	815, 816, 817, 1, 1642, 1643, 1644, 1645, 
	1646, 1647, 1648, 1649, 1650, 1651, 1, 1, 
	1652, 1653, 1654, 1, 1655, 1656, 1, 1657, 
	1, 1658, 1659, 1, 1660, 1, 1661, 1, 
	1, 1, 1, 1, 1, 1662, 1663, 1645, 
	1646, 1664, 1648, 1665, 1666, 1651, 1, 1, 
	1652, 1667, 1668, 1, 1655, 1656, 1, 1657, 
	1, 1669, 1670, 1671, 1672, 1, 1673, 1673, 
	1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 
	1, 1, 1, 1, 1, 1, 753, 754, 
	755, 756, 757, 758, 759, 760, 761, 762, 
	1, 1, 763, 764, 765, 1, 766, 767, 
	1, 768, 1, 769, 770, 1, 771, 1, 
	772, 1, 1, 1, 1, 1, 1, 773, 
	774, 756, 757, 775, 759, 776, 777, 762, 
	1, 1, 763, 778, 779, 1, 766, 767, 
	1, 768, 1, 780, 781, 782, 783, 1, 
	1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 
	1682, 1683, 1, 1, 1684, 1685, 1686, 1, 
	1687, 1688, 1, 1689, 1, 1690, 1691, 1, 
	1692, 1, 1693, 1, 1, 1, 1, 1, 
	1, 1694, 1695, 1677, 1678, 1696, 1680, 1697, 
	1698, 1683, 1, 1, 1684, 1699, 1700, 1, 
	1687, 1688, 1, 1689, 1, 1701, 1702, 1703, 
	1704, 1, 1705, 1705, 1705, 1705, 1705, 1705, 
	1705, 1705, 1705, 1705, 1, 1, 1, 1, 
	1, 1, 719, 720, 721, 722, 723, 724, 
	725, 726, 727, 728, 1, 1, 729, 730, 
	731, 1, 732, 733, 1, 734, 1, 735, 
	736, 1, 737, 1, 738, 1, 1, 1, 
	1, 1, 1, 739, 740, 722, 723, 741, 
	725, 742, 743, 728, 1, 1, 729, 744, 
	745, 1, 732, 733, 1, 734, 1, 746, 
	747, 748, 749, 1, 1706, 1706, 1706, 1706, 
	1706, 1706, 1706, 1706, 1706, 1706, 1, 1, 
	1, 1, 1, 1, 652, 653, 654, 655, 
	656, 657, 658, 659, 660, 661, 1, 1, 
	662, 663, 664, 1, 665, 666, 1, 667, 
	1, 668, 669, 1, 670, 1, 671, 1, 
	1, 1, 1, 1, 1, 672, 673, 655, 
	656, 674, 658, 675, 676, 661, 1, 1, 
	662, 677, 678, 1, 665, 666, 1, 667, 
	1, 679, 680, 681, 682, 1, 1707, 1, 
	1, 1, 1, 1, 1708, 1708, 1708, 1708, 
	1708, 1708, 1708, 1708, 1708, 1708, 1, 1, 
	1, 1, 1, 1, 1709, 1710, 1711, 1712, 
	1713, 1714, 1715, 1716, 1717, 1718, 1, 1, 
	1719, 1720, 1721, 1, 1722, 1723, 1, 1724, 
	1, 1725, 1726, 1, 1727, 1, 1728, 1, 
	1, 1, 1, 1, 1, 1729, 1730, 1712, 
	1713, 1731, 1715, 1732, 1733, 1718, 1, 1, 
	1719, 1734, 1735, 1, 1722, 1723, 1, 1724, 
	1, 1736, 1737, 1738, 1739, 1, 1740, 1741, 
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 
	1, 1, 1750, 1751, 1752, 1, 1753, 1754, 
	1, 1755, 1, 1756, 1757, 1, 1758, 1, 
	1759, 1, 1, 1, 1, 1, 1, 1760, 
	1761, 1743, 1744, 1762, 1746, 1763, 1764, 1749, 
	1, 1, 1750, 1765, 1766, 1, 1753, 1754, 
	1, 1755, 1, 1767, 1768, 1769, 1770, 1, 
	1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 
	1771, 1771, 1, 1, 1, 1, 1, 1, 
	1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 
	1717, 1718, 1, 1, 1719, 1720, 1721, 1, 
	1722, 1723, 1, 1724, 1, 1725, 1726, 1, 
	1727, 1, 1728, 1, 1, 1, 1, 1, 
	1, 1729, 1730, 1712, 1713, 1731, 1715, 1732, 
	1733, 1718, 1, 1, 1719, 1734, 1735, 1, 
	1722, 1723, 1, 1724, 1, 1736, 1737, 1738, 
	1739, 1, 1772, 1, 1, 1, 1, 1, 
	1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 
	1773, 1773, 1, 1, 1, 1, 1, 1, 
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 
	1782, 1783, 1, 1, 1784, 1785, 1786, 1, 
	1787, 1788, 1, 1789, 1, 1790, 1791, 1, 
	1792, 1, 1793, 1, 1, 1, 1, 1, 
	1, 1794, 1795, 1777, 1778, 1796, 1780, 1797, 
	1798, 1783, 1, 1, 1784, 1799, 1800, 1, 
	1787, 1788, 1, 1789, 1, 1801, 1802, 1803, 
	1804, 1, 1805, 1806, 1807, 1808, 1809, 1810, 
	1811, 1812, 1813, 1814, 1, 1, 1815, 1816, 
	1817, 1, 1818, 1819, 1, 1820, 1, 1821, 
	1822, 1, 1823, 1, 1824, 1, 1, 1, 
	1, 1, 1, 1825, 1826, 1808, 1809, 1827, 
	1811, 1828, 1829, 1814, 1, 1, 1815, 1830, 
	1831, 1, 1818, 1819, 1, 1820, 1, 1832, 
	1833, 1834, 1835, 1, 1836, 1836, 1836, 1836, 
	1836, 1836, 1836, 1836, 1836, 1836, 1, 1, 
	1, 1, 1, 1, 1774, 1775, 1776, 1777, 
	1778, 1779, 1780, 1781, 1782, 1783, 1, 1, 
	1784, 1785, 1786, 1, 1787, 1788, 1, 1789, 
	1, 1790, 1791, 1, 1792, 1, 1793, 1, 
	1, 1, 1, 1, 1, 1794, 1795, 1777, 
	1778, 1796, 1780, 1797, 1798, 1783, 1, 1, 
	1784, 1799, 1800, 1, 1787, 1788, 1, 1789, 
	1, 1801, 1802, 1803, 1804, 1, 683, 1, 
	1, 1, 1, 1, 1, 1, 1, 1707, 
	1, 1, 1, 1, 1, 1708, 1708, 1708, 
	1708, 1708, 1708, 1708, 1708, 1708, 1708, 1, 
	1, 1, 1, 1, 1, 1709, 1710, 1711, 
	1712, 1713, 1714, 1715, 1716, 1717, 1718, 1, 
	1, 1719, 1720, 1721, 1, 1722, 1723, 1, 
	1724, 1, 1725, 1726, 1, 1727, 1, 1728, 
	1, 1, 1, 1, 683, 1, 1729, 1730, 
	1712, 1713, 1731, 1715, 1732, 1733, 1718, 1, 
	1, 1719, 1734, 1735, 1, 1722, 1723, 1, 
	1724, 1, 1736, 1737, 1738, 1739, 1, 684, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1772, 1, 1, 1, 1, 1, 1773, 1773, 
	1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 
	1, 1, 1, 1, 1, 1, 1774, 1775, 
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 
	1, 1, 1784, 1785, 1786, 1, 1787, 1788, 
	1, 1789, 1, 1790, 1791, 1, 1792, 1, 
	1793, 1, 1, 1, 1, 684, 1, 1794, 
	1795, 1777, 1778, 1796, 1780, 1797, 1798, 1783, 
	1, 1, 1784, 1799, 1800, 1, 1787, 1788, 
	1, 1789, 1, 1801, 1802, 1803, 1804, 1, 
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 
	1845, 1846, 1, 1, 1847, 1848, 1849, 1, 
	1850, 1851, 1, 1852, 1, 1853, 1854, 1, 
	1855, 1, 1856, 1, 1, 1, 1, 1, 
	1, 1857, 1858, 1840, 1841, 1859, 1843, 1860, 
	1861, 1846, 1, 1, 1847, 1862, 1863, 1, 
	1850, 1851, 1, 1852, 1, 1864, 1865, 1866, 
	1867, 1, 1868, 1868, 1868, 1868, 1868, 1868, 
	1868, 1868, 1868, 1868, 1, 1, 1, 1, 
	1, 1, 616, 617, 618, 619, 620, 621, 
	622, 623, 624, 625, 1, 1, 626, 627, 
	628, 1, 629, 630, 1, 631, 1, 632, 
	633, 1, 634, 1, 635, 1, 1, 1, 
	1, 1, 1, 636, 637, 619, 620, 638, 
	622, 639, 640, 625, 1, 1, 626, 641, 
	642, 1, 629, 630, 1, 631, 1, 643, 
	644, 645, 646, 1, 1869, 1, 1, 1, 
	1, 1, 1, 1, 1, 1870, 1, 1, 
	1, 1, 1, 1871, 1871, 1871, 1871, 1871, 
	1871, 1871, 1871, 1871, 1871, 1, 1, 1, 
	1, 1, 1, 1872, 1873, 1874, 1875, 1876, 
	1877, 1878, 1879, 1880, 1881, 1, 1, 1882, 
	1883, 1884, 1, 1885, 1886, 1, 1887, 1, 
	1888, 1889, 1, 1890, 1, 1891, 1, 1, 
	1, 1, 1869, 1, 1892, 1893, 1875, 1876, 
	1894, 1878, 1895, 1896, 1881, 1, 1, 1882, 
	1897, 1898, 1, 1885, 1886, 1, 1887, 1, 
	1899, 1900, 1901, 1902, 1, 1872, 1873, 1874, 
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1, 
	1, 1882, 1883, 1884, 1, 1885, 1886, 1, 
	1887, 1, 1888, 1889, 1, 1890, 1, 1891, 
	1, 1, 1, 1, 1, 1, 1892, 1893, 
	1875, 1876, 1894, 1878, 1895, 1896, 1881, 1, 
	1, 1882, 1897, 1898, 1, 1885, 1886, 1, 
	1887, 1, 1899, 1900, 1901, 1902, 1, 1903, 
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 
	1912, 1, 1, 1913, 1914, 1915, 1, 1916, 
	1917, 1, 1918, 1, 1919, 1920, 1, 1921, 
	1, 1922, 1, 1, 1, 1, 1, 1, 
	1923, 1924, 1906, 1907, 1925, 1909, 1926, 1927, 
	1912, 1, 1, 1913, 1928, 1929, 1, 1916, 
	1917, 1, 1918, 1, 1930, 1931, 1932, 1933, 
	1, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 
	1934, 1934, 1934, 1, 1, 1, 1, 1, 
	1, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 
	1879, 1880, 1881, 1, 1, 1882, 1883, 1884, 
	1, 1885, 1886, 1, 1887, 1, 1888, 1889, 
	1, 1890, 1, 1891, 1, 1, 1, 1, 
	1, 1, 1892, 1893, 1875, 1876, 1894, 1878, 
	1895, 1896, 1881, 1, 1, 1882, 1897, 1898, 
	1, 1885, 1886, 1, 1887, 1, 1899, 1900, 
	1901, 1902, 1, 1935, 1, 1, 1, 1, 
	1, 1, 1, 1, 1936, 1, 1, 1, 
	1, 1, 1937, 1937, 1937, 1937, 1937, 1937, 
	1937, 1937, 1937, 1937, 1, 1, 1, 1, 
	1, 1, 1938, 1939, 1940, 1941, 1942, 1943, 
	1944, 1945, 1946, 1947, 1, 1, 1948, 1949, 
	1950, 1, 1951, 1952, 1, 1953, 1, 1954, 
	1955, 1, 1956, 1, 1957, 1, 1, 1, 
	1, 1935, 1, 1958, 1959, 1941, 1942, 1960, 
	1944, 1961, 1962, 1947, 1, 1, 1948, 1963, 
	1964, 1, 1951, 1952, 1, 1953, 1, 1965, 
	1966, 1967, 1968, 1, 1938, 1939, 1940, 1941, 
	1942, 1943, 1944, 1945, 1946, 1947, 1, 1, 
	1948, 1949, 1950, 1, 1951, 1952, 1, 1953, 
	1, 1954, 1955, 1, 1956, 1, 1957, 1, 
	1, 1, 1, 1, 1, 1958, 1959, 1941, 
	1942, 1960, 1944, 1961, 1962, 1947, 1, 1, 
	1948, 1963, 1964, 1, 1951, 1952, 1, 1953, 
	1, 1965, 1966, 1967, 1968, 1, 1969, 1970, 
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 
	1, 1, 1979, 1980, 1981, 1, 1982, 1983, 
	1, 1984, 1, 1985, 1986, 1, 1987, 1, 
	1988, 1, 1, 1, 1, 1, 1, 1989, 
	1990, 1972, 1973, 1991, 1975, 1992, 1993, 1978, 
	1, 1, 1979, 1994, 1995, 1, 1982, 1983, 
	1, 1984, 1, 1996, 1997, 1998, 1999, 1, 
	2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 
	2000, 2000, 1, 1, 1, 1, 1, 1, 
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 
	1946, 1947, 1, 1, 1948, 1949, 1950, 1, 
	1951, 1952, 1, 1953, 1, 1954, 1955, 1, 
	1956, 1, 1957, 1, 1, 1, 1, 1, 
	1, 1958, 1959, 1941, 1942, 1960, 1944, 1961, 
	1962, 1947, 1, 1, 1948, 1963, 1964, 1, 
	1951, 1952, 1, 1953, 1, 1965, 1966, 1967, 
	1968, 1, 2001, 2002, 2003, 2004, 2005, 2006, 
	2007, 2008, 2009, 2010, 1, 1, 2011, 2012, 
	2013, 1, 2014, 2015, 1, 2016, 1, 2017, 
	2018, 1, 2019, 1, 2020, 1, 1, 1, 
	1, 1, 1, 2021, 2022, 2004, 2005, 2023, 
	2007, 2024, 2025, 2010, 1, 1, 2011, 2026, 
	2027, 1, 2014, 2015, 1, 2016, 1, 2028, 
	2029, 2030, 2031, 1, 2032, 2032, 2032, 2032, 
	2032, 2032, 2032, 2032, 2032, 2032, 1, 1, 
	1, 1, 1, 1, 580, 581, 582, 583, 
	584, 585, 586, 587, 588, 589, 1, 1, 
	590, 591, 592, 1, 593, 594, 1, 595, 
	1, 596, 597, 1, 598, 1, 599, 1, 
	1, 1, 1, 1, 1, 600, 601, 583, 
	584, 602, 586, 603, 604, 589, 1, 1, 
	590, 605, 606, 1, 593, 594, 1, 595, 
	1, 607, 608, 609, 610, 1, 2033, 2034, 
	2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 
	1, 1, 2043, 2044, 2045, 1, 2046, 2047, 
	1, 2048, 1, 2049, 2050, 1, 2051, 1, 
	2052, 1, 1, 1, 1, 1, 1, 2053, 
	2054, 2036, 2037, 2055, 2039, 2056, 2057, 2042, 
	1, 1, 2043, 2058, 2059, 1, 2046, 2047, 
	1, 2048, 1, 2060, 2061, 2062, 2063, 1, 
	2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064, 
	2064, 2064, 1, 1, 1, 1, 1, 1, 
	546, 547, 548, 549, 550, 551, 552, 553, 
	554, 555, 1, 1, 556, 557, 558, 1, 
	559, 560, 1, 561, 1, 562, 563, 1, 
	564, 1, 565, 1, 1, 1, 1, 1, 
	1, 566, 567, 549, 550, 568, 552, 569, 
	570, 555, 1, 1, 556, 571, 572, 1, 
	559, 560, 1, 561, 1, 573, 574, 575, 
	576, 1, 2065, 2066, 2067, 2068, 2069, 2070, 
	2071, 2072, 2073, 2074, 1, 1, 2075, 2076, 
	2077, 1, 2078, 2079, 1, 2080, 1, 2081, 
	2082, 1, 2083, 1, 2084, 1, 1, 1, 
	1, 1, 1, 2085, 2086, 2068, 2069, 2087, 
	2071, 2088, 2089, 2074, 1, 1, 2075, 2090, 
	2091, 1, 2078, 2079, 1, 2080, 1, 2092, 
	2093, 2094, 2095, 1, 2096, 2096, 2096, 2096, 
	2096, 2096, 2096, 2096, 2096, 2096, 1, 1, 
	1, 1, 1, 1, 512, 513, 514, 515, 
	516, 517, 518, 519, 520, 521, 1, 1, 
	522, 523, 524, 1, 525, 526, 1, 527, 
	1, 528, 529, 1, 530, 1, 531, 1, 
	1, 1, 1, 1, 1, 532, 533, 515, 
	516, 534, 518, 535, 536, 521, 1, 1, 
	522, 537, 538, 1, 525, 526, 1, 527, 
	1, 539, 540, 541, 542, 1, 2097, 2097, 
	2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 
	1, 1, 1, 1, 1, 1, 447, 448, 
	449, 450, 451, 452, 453, 454, 455, 456, 
	1, 1, 457, 458, 459, 1, 460, 461, 
	1, 462, 1, 463, 464, 1, 465, 1, 
	466, 1, 1, 1, 1, 1, 1, 467, 
	468, 450, 451, 469, 453, 470, 471, 456, 
	1, 1, 457, 472, 473, 1, 460, 461, 
	1, 462, 1, 474, 475, 476, 477, 1, 
	2098, 1, 1, 1, 1, 1, 2099, 2099, 
	2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 
	1, 1, 1, 1, 1, 1, 2100, 2101, 
	2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 
	1, 1, 2110, 2111, 2112, 1, 2113, 2114, 
	1, 2115, 1, 2116, 2117, 1, 2118, 1, 
	2119, 1, 1, 1, 1, 1, 1, 2120, 
	2121, 2103, 2104, 2122, 2106, 2123, 2124, 2109, 
	1, 1, 2110, 2125, 2126, 1, 2113, 2114, 
	1, 2115, 1, 2127, 2128, 2129, 2130, 1, 
	2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 
	2139, 2140, 1, 1, 2141, 2142, 2143, 1, 
	2144, 2145, 1, 2146, 1, 2147, 2148, 1, 
	2149, 1, 2150, 1, 1, 1, 1, 1, 
	1, 2151, 2152, 2134, 2135, 2153, 2137, 2154, 
	2155, 2140, 1, 1, 2141, 2156, 2157, 1, 
	2144, 2145, 1, 2146, 1, 2158, 2159, 2160, 
	2161, 1, 2162, 2162, 2162, 2162, 2162, 2162, 
	2162, 2162, 2162, 2162, 1, 1, 1, 1, 
	1, 1, 2100, 2101, 2102, 2103, 2104, 2105, 
	2106, 2107, 2108, 2109, 1, 1, 2110, 2111, 
	2112, 1, 2113, 2114, 1, 2115, 1, 2116, 
	2117, 1, 2118, 1, 2119, 1, 1, 1, 
	1, 1, 1, 2120, 2121, 2103, 2104, 2122, 
	2106, 2123, 2124, 2109, 1, 1, 2110, 2125, 
	2126, 1, 2113, 2114, 1, 2115, 1, 2127, 
	2128, 2129, 2130, 1, 2163, 1, 1, 1, 
	1, 1, 2164, 2164, 2164, 2164, 2164, 2164, 
	2164, 2164, 2164, 2164, 1, 1, 1, 1, 
	1, 1, 2165, 2166, 2167, 2168, 2169, 2170, 
	2171, 2172, 2173, 2174, 1, 1, 2175, 2176, 
	2177, 1, 2178, 2179, 1, 2180, 1, 2181, 
	2182, 1, 2183, 1, 2184, 1, 1, 1, 
	1, 1, 1, 2185, 2186, 2168, 2169, 2187, 
	2171, 2188, 2189, 2174, 1, 1, 2175, 2190, 
	2191, 1, 2178, 2179, 1, 2180, 1, 2192, 
	2193, 2194, 2195, 1, 2196, 2197, 2198, 2199, 
	2200, 2201, 2202, 2203, 2204, 2205, 1, 1, 
	2206, 2207, 2208, 1, 2209, 2210, 1, 2211, 
	1, 2212, 2213, 1, 2214, 1, 2215, 1, 
	1, 1, 1, 1, 1, 2216, 2217, 2199, 
	2200, 2218, 2202, 2219, 2220, 2205, 1, 1, 
	2206, 2221, 2222, 1, 2209, 2210, 1, 2211, 
	1, 2223, 2224, 2225, 2226, 1, 2227, 2227, 
	2227, 2227, 2227, 2227, 2227, 2227, 2227, 2227, 
	1, 1, 1, 1, 1, 1, 2165, 2166, 
	2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 
	1, 1, 2175, 2176, 2177, 1, 2178, 2179, 
	1, 2180, 1, 2181, 2182, 1, 2183, 1, 
	2184, 1, 1, 1, 1, 1, 1, 2185, 
	2186, 2168, 2169, 2187, 2171, 2188, 2189, 2174, 
	1, 1, 2175, 2190, 2191, 1, 2178, 2179, 
	1, 2180, 1, 2192, 2193, 2194, 2195, 1, 
	2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 
	2236, 2237, 1, 1, 2238, 2239, 2240, 1, 
	2241, 2242, 1, 2243, 1, 2244, 2245, 1, 
	2246, 1, 2247, 1, 1, 1, 1, 1, 
	1, 2248, 2249, 2231, 2232, 2250, 2234, 2251, 
	2252, 2237, 1, 1, 2238, 2253, 2254, 1, 
	2241, 2242, 1, 2243, 1, 2255, 2256, 2257, 
	2258, 1, 2259, 2259, 2259, 2259, 2259, 2259, 
	2259, 2259, 2259, 2259, 1, 1, 1, 1, 
	1, 1, 412, 413, 414, 415, 416, 417, 
	418, 419, 420, 421, 1, 1, 422, 423, 
	424, 1, 425, 426, 1, 427, 1, 428, 
	429, 1, 430, 1, 431, 1, 1, 1, 
	1, 1, 1, 432, 433, 415, 416, 434, 
	418, 435, 436, 421, 1, 1, 422, 437, 
	438, 1, 425, 426, 1, 427, 1, 439, 
	440, 441, 442, 1, 445, 1, 1, 1, 
	1, 1, 1, 1, 1, 2260, 1, 1, 
	1, 1, 1, 2261, 2261, 2261, 2261, 2261, 
	2261, 2261, 2261, 2261, 2261, 1, 1, 1, 
	1, 1, 1, 2262, 2263, 2264, 2265, 2266, 
	2267, 2268, 2269, 2270, 2271, 1, 1, 2272, 
	2273, 2274, 1, 2275, 2276, 1, 2277, 1, 
	2278, 2279, 1, 2280, 1, 2281, 1, 1, 
	1, 1, 445, 1, 2282, 2283, 2265, 2266, 
	2284, 2268, 2285, 2286, 2271, 1, 1, 2272, 
	2287, 2288, 1, 2275, 2276, 1, 2277, 1, 
	2289, 2290, 2291, 2292, 1, 2293, 2294, 2295, 
	2296, 2297, 2298, 2299, 2300, 2301, 2302, 1, 
	1, 2303, 2304, 2305, 1, 2306, 2307, 1, 
	2308, 1, 2309, 2310, 1, 2311, 1, 2312, 
	1, 1, 1, 1, 1, 1, 2313, 2314, 
	2296, 2297, 2315, 2299, 2316, 2317, 2302, 1, 
	1, 2303, 2318, 2319, 1, 2306, 2307, 1, 
	2308, 1, 2320, 2321, 2322, 2323, 1, 2324, 
	2324, 2324, 2324, 2324, 2324, 2324, 2324, 2324, 
	2324, 1, 1, 1, 1, 1, 1, 2262, 
	2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 
	2271, 1, 1, 2272, 2273, 2274, 1, 2275, 
	2276, 1, 2277, 1, 2278, 2279, 1, 2280, 
	1, 2281, 1, 1, 1, 1, 1, 1, 
	2282, 2283, 2265, 2266, 2284, 2268, 2285, 2286, 
	2271, 1, 1, 2272, 2287, 2288, 1, 2275, 
	2276, 1, 2277, 1, 2289, 2290, 2291, 2292, 
	1, 446, 1, 1, 1, 1, 1, 1, 
	1, 1, 2325, 1, 1, 1, 1, 1, 
	2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 
	2326, 2326, 1, 1, 1, 1, 1, 1, 
	2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 
	2335, 2336, 1, 1, 2337, 2338, 2339, 1, 
	2340, 2341, 1, 2342, 1, 2343, 2344, 1, 
	2345, 1, 2346, 1, 1, 1, 1, 446, 
	1, 2347, 2348, 2330, 2331, 2349, 2333, 2350, 
	2351, 2336, 1, 1, 2337, 2352, 2353, 1, 
	2340, 2341, 1, 2342, 1, 2354, 2355, 2356, 
	2357, 1, 2358, 2359, 2360, 2361, 2362, 2363, 
	2364, 2365, 2366, 2367, 1, 1, 2368, 2369, 
	2370, 1, 2371, 2372, 1, 2373, 1, 2374, 
	2375, 1, 2376, 1, 2377, 1, 1, 1, 
	1, 1, 1, 2378, 2379, 2361, 2362, 2380, 
	2364, 2381, 2382, 2367, 1, 1, 2368, 2383, 
	2384, 1, 2371, 2372, 1, 2373, 1, 2385, 
	2386, 2387, 2388, 1, 2389, 2389, 2389, 2389, 
	2389, 2389, 2389, 2389, 2389, 2389, 1, 1, 
	1, 1, 1, 1, 2327, 2328, 2329, 2330, 
	2331, 2332, 2333, 2334, 2335, 2336, 1, 1, 
	2337, 2338, 2339, 1, 2340, 2341, 1, 2342, 
	1, 2343, 2344, 1, 2345, 1, 2346, 1, 
	1, 1, 1, 1, 1, 2347, 2348, 2330, 
	2331, 2349, 2333, 2350, 2351, 2336, 1, 1, 
	2337, 2352, 2353, 1, 2340, 2341, 1, 2342, 
	1, 2354, 2355, 2356, 2357, 1, 2390, 2390, 
	2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 
	1, 1, 1, 1, 1, 1, 343, 344, 
	345, 346, 347, 348, 349, 350, 351, 352, 
	1, 1, 353, 354, 355, 1, 356, 357, 
	1, 358, 1, 359, 360, 1, 361, 1, 
	362, 1, 1, 1, 1, 1, 1, 363, 
	364, 346, 347, 365, 349, 366, 367, 352, 
	1, 1, 353, 368, 369, 1, 356, 357, 
	1, 358, 1, 370, 371, 372, 373, 1, 
	2391, 1, 1, 1, 1, 1, 2392, 2392, 
	2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392, 
	1, 1, 1, 1, 1, 1, 2393, 2394, 
	2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 
	1, 1, 2403, 2404, 2405, 1, 2406, 2407, 
	1, 2408, 1, 2409, 2410, 1, 2411, 1, 
	2412, 1, 1, 1, 1, 1, 1, 2413, 
	2414, 2396, 2397, 2415, 2399, 2416, 2417, 2402, 
	1, 1, 2403, 2418, 2419, 1, 2406, 2407, 
	1, 2408, 1, 2420, 2421, 2422, 2423, 1, 
	2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 
	2432, 2433, 1, 1, 2434, 2435, 2436, 1, 
	2437, 2438, 1, 2439, 1, 2440, 2441, 1, 
	2442, 1, 2443, 1, 1, 1, 1, 1, 
	1, 2444, 2445, 2427, 2428, 2446, 2430, 2447, 
	2448, 2433, 1, 1, 2434, 2449, 2450, 1, 
	2437, 2438, 1, 2439, 1, 2451, 2452, 2453, 
	2454, 1, 2455, 2455, 2455, 2455, 2455, 2455, 
	2455, 2455, 2455, 2455, 1, 1, 1, 1, 
	1, 1, 2393, 2394, 2395, 2396, 2397, 2398, 
	2399, 2400, 2401, 2402, 1, 1, 2403, 2404, 
	2405, 1, 2406, 2407, 1, 2408, 1, 2409, 
	2410, 1, 2411, 1, 2412, 1, 1, 1, 
	1, 1, 1, 2413, 2414, 2396, 2397, 2415, 
	2399, 2416, 2417, 2402, 1, 1, 2403, 2418, 
	2419, 1, 2406, 2407, 1, 2408, 1, 2420, 
	2421, 2422, 2423, 1, 2456, 1, 1, 1, 
	1, 1, 2457, 2457, 2457, 2457, 2457, 2457, 
	2457, 2457, 2457, 2457, 1, 1, 1, 1, 
	1, 1, 2458, 2459, 2460, 2461, 2462, 2463, 
	2464, 2465, 2466, 2467, 1, 1, 2468, 2469, 
	2470, 1, 2471, 2472, 1, 2473, 1, 2474, 
	2475, 1, 2476, 1, 2477, 1, 1, 1, 
	1, 1, 1, 2478, 2479, 2461, 2462, 2480, 
	2464, 2481, 2482, 2467, 1, 1, 2468, 2483, 
	2484, 1, 2471, 2472, 1, 2473, 1, 2485, 
	2486, 2487, 2488, 1, 2489, 2490, 2491, 2492, 
	2493, 2494, 2495, 2496, 2497, 2498, 1, 1, 
	2499, 2500, 2501, 1, 2502, 2503, 1, 2504, 
	1, 2505, 2506, 1, 2507, 1, 2508, 1, 
	1, 1, 1, 1, 1, 2509, 2510, 2492, 
	2493, 2511, 2495, 2512, 2513, 2498, 1, 1, 
	2499, 2514, 2515, 1, 2502, 2503, 1, 2504, 
	1, 2516, 2517, 2518, 2519, 1, 2520, 2520, 
	2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 
	1, 1, 1, 1, 1, 1, 2458, 2459, 
	2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 
	1, 1, 2468, 2469, 2470, 1, 2471, 2472, 
	1, 2473, 1, 2474, 2475, 1, 2476, 1, 
	2477, 1, 1, 1, 1, 1, 1, 2478, 
	2479, 2461, 2462, 2480, 2464, 2481, 2482, 2467, 
	1, 1, 2468, 2483, 2484, 1, 2471, 2472, 
	1, 2473, 1, 2485, 2486, 2487, 2488, 1, 
	374, 1, 1, 1, 1, 1, 1, 1, 
	1, 2391, 1, 1, 1, 1, 1, 2392, 
	2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392, 
	2392, 1, 1, 1, 1, 1, 1, 2393, 
	2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 
	2402, 1, 1, 2403, 2404, 2405, 1, 2406, 
	2407, 1, 2408, 1, 2409, 2410, 1, 2411, 
	1, 2412, 1, 1, 1, 1, 374, 1, 
	2413, 2414, 2396, 2397, 2415, 2399, 2416, 2417, 
	2402, 1, 1, 2403, 2418, 2419, 1, 2406, 
	2407, 1, 2408, 1, 2420, 2421, 2422, 2423, 
	1, 375, 1, 1, 1, 1, 1, 1, 
	1, 1, 2456, 1, 1, 1, 1, 1, 
	2457, 2457, 2457, 2457, 2457, 2457, 2457, 2457, 
	2457, 2457, 1, 1, 1, 1, 1, 1, 
	2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 
	2466, 2467, 1, 1, 2468, 2469, 2470, 1, 
	2471, 2472, 1, 2473, 1, 2474, 2475, 1, 
	2476, 1, 2477, 1, 1, 1, 1, 375, 
	1, 2478, 2479, 2461, 2462, 2480, 2464, 2481, 
	2482, 2467, 1, 1, 2468, 2483, 2484, 1, 
	2471, 2472, 1, 2473, 1, 2485, 2486, 2487, 
	2488, 1, 2521, 2522, 2523, 2524, 2525, 2526, 
	2527, 2528, 2529, 2530, 1, 1, 2531, 2532, 
	2533, 1, 2534, 2535, 1, 2536, 1, 2537, 
	2538, 1, 2539, 1, 2540, 1, 1, 1, 
	1, 1, 1, 2541, 2542, 2524, 2525, 2543, 
	2527, 2544, 2545, 2530, 1, 1, 2531, 2546, 
	2547, 1, 2534, 2535, 1, 2536, 1, 2548, 
	2549, 2550, 2551, 1, 2552, 2552, 2552, 2552, 
	2552, 2552, 2552, 2552, 2552, 2552, 1, 1, 
	1, 1, 1, 1, 307, 308, 309, 310, 
	311, 312, 313, 314, 315, 316, 1, 1, 
	317, 318, 319, 1, 320, 321, 1, 322, 
	1, 323, 324, 1, 325, 1, 326, 1, 
	1, 1, 1, 1, 1, 327, 328, 310, 
	311, 329, 313, 330, 331, 316, 1, 1, 
	317, 332, 333, 1, 320, 321, 1, 322, 
	1, 334, 335, 336, 337, 1, 2553, 2554, 
	2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 
	1, 1, 2563, 2564, 2565, 1, 2566, 2567, 
	1, 2568, 1, 2569, 2570, 1, 2571, 1, 
	2572, 1, 1, 1, 1, 1, 1, 2573, 
	2574, 2556, 2557, 2575, 2559, 2576, 2577, 2562, 
	1, 1, 2563, 2578, 2579, 1, 2566, 2567, 
	1, 2568, 1, 2580, 2581, 2582, 2583, 1, 
	2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 
	2584, 2584, 1, 1, 1, 1, 1, 1, 
	273, 274, 275, 276, 277, 278, 279, 280, 
	281, 282, 1, 1, 283, 284, 285, 1, 
	286, 287, 1, 288, 1, 289, 290, 1, 
	291, 1, 292, 1, 1, 1, 1, 1, 
	1, 293, 294, 276, 277, 295, 279, 296, 
	297, 282, 1, 1, 283, 298, 299, 1, 
	286, 287, 1, 288, 1, 300, 301, 302, 
	303, 1, 2585, 2586, 2587, 2588, 2589, 2590, 
	2591, 2592, 2593, 2594, 1, 1, 2595, 2596, 
	2597, 1, 2598, 2599, 1, 2600, 1, 2601, 
	2602, 1, 2603, 1, 2604, 1, 1, 1, 
	1, 1, 1, 2605, 2606, 2588, 2589, 2607, 
	2591, 2608, 2609, 2594, 1, 1, 2595, 2610, 
	2611, 1, 2598, 2599, 1, 2600, 1, 2612, 
	2613, 2614, 2615, 1, 2616, 2616, 2616, 2616, 
	2616, 2616, 2616, 2616, 2616, 2616, 1, 1, 
	1, 1, 1, 1, 239, 240, 241, 242, 
	243, 244, 245, 246, 247, 248, 1, 1, 
	249, 250, 251, 1, 252, 253, 1, 254, 
	1, 255, 256, 1, 257, 1, 258, 1, 
	1, 1, 1, 1, 1, 259, 260, 242, 
	243, 261, 245, 262, 263, 248, 1, 1, 
	249, 264, 265, 1, 252, 253, 1, 254, 
	1, 266, 267, 268, 269, 1, 2617, 2618, 
	2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 
	1, 1, 2627, 2628, 2629, 1, 2630, 2631, 
	1, 2632, 1, 2633, 2634, 1, 2635, 1, 
	2636, 1, 1, 1, 1, 1, 1, 2637, 
	2638, 2620, 2621, 2639, 2623, 2640, 2641, 2626, 
	1, 1, 2627, 2642, 2643, 1, 2630, 2631, 
	1, 2632, 1, 2644, 2645, 2646, 2647, 1, 
	2648, 2648, 2648, 2648, 2648, 2648, 2648, 2648, 
	2648, 2648, 1, 1, 1, 1, 1, 1, 
	205, 206, 207, 208, 209, 210, 211, 212, 
	213, 214, 1, 1, 215, 216, 217, 1, 
	218, 219, 1, 220, 1, 221, 222, 1, 
	223, 1, 224, 1, 1, 1, 1, 1, 
	1, 225, 226, 208, 209, 227, 211, 228, 
	229, 214, 1, 1, 215, 230, 231, 1, 
	218, 219, 1, 220, 1, 232, 233, 234, 
	235, 1, 2649, 2650, 2651, 2652, 2653, 2654, 
	2655, 2656, 2657, 2658, 1, 1, 2659, 2660, 
	2661, 1, 2662, 2663, 1, 2664, 1, 2665, 
	2666, 1, 2667, 1, 2668, 1, 1, 1, 
	1, 1, 1, 2669, 2670, 2652, 2653, 2671, 
	2655, 2672, 2673, 2658, 1, 1, 2659, 2674, 
	2675, 1, 2662, 2663, 1, 2664, 1, 2676, 
	2677, 2678, 2679, 1, 2680, 2680, 2680, 2680, 
	2680, 2680, 2680, 2680, 2680, 2680, 1, 1, 
	1, 1, 1, 1, 171, 172, 173, 174, 
	175, 176, 177, 178, 179, 180, 1, 1, 
	181, 182, 183, 1, 184, 185, 1, 186, 
	1, 187, 188, 1, 189, 1, 190, 1, 
	1, 1, 1, 1, 1, 191, 192, 174, 
	175, 193, 177, 194, 195, 180, 1, 1, 
	181, 196, 197, 1, 184, 185, 1, 186, 
	1, 198, 199, 200, 201, 1, 2681, 2682, 
	2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 
	1, 1, 2691, 2692, 2693, 1, 2694, 2695, 
	1, 2696, 1, 2697, 2698, 1, 2699, 1, 
	2700, 1, 1, 1, 1, 1, 1, 2701, 
	2702, 2684, 2685, 2703, 2687, 2704, 2705, 2690, 
	1, 1, 2691, 2706, 2707, 1, 2694, 2695, 
	1, 2696, 1, 2708, 2709, 2710, 2711, 1, 
	2712, 2712, 2712, 2712, 2712, 2712, 2712, 2712, 
	2712, 2712, 1, 1, 1, 1, 1, 1, 
	137, 138, 139, 140, 141, 142, 143, 144, 
	145, 146, 1, 1, 147, 148, 149, 1, 
	150, 151, 1, 152, 1, 153, 154, 1, 
	155, 1, 156, 1, 1, 1, 1, 1, 
	1, 157, 158, 140, 141, 159, 143, 160, 
	161, 146, 1, 1, 147, 162, 163, 1, 
	150, 151, 1, 152, 1, 164, 165, 166, 
	167, 1, 2713, 2714, 2715, 2716, 2717, 2718, 
	2719, 2720, 2721, 2722, 1, 1, 2723, 2724, 
	2725, 1, 2726, 2727, 1, 2728, 1, 2729, 
	2730, 1, 2731, 1, 2732, 1, 1, 1, 
	1, 1, 1, 2733, 2734, 2716, 2717, 2735, 
	2719, 2736, 2737, 2722, 1, 1, 2723, 2738, 
	2739, 1, 2726, 2727, 1, 2728, 1, 2740, 
	2741, 2742, 2743, 1, 2744, 2744, 2744, 2744, 
	2744, 2744, 2744, 2744, 2744, 2744, 1, 1, 
	1, 1, 1, 1, 103, 104, 105, 106, 
	107, 108, 109, 110, 111, 112, 1, 1, 
	113, 114, 115, 1, 116, 117, 1, 118, 
	1, 119, 120, 1, 121, 1, 122, 1, 
	1, 1, 1, 1, 1, 123, 124, 106, 
	107, 125, 109, 126, 127, 112, 1, 1, 
	113, 128, 129, 1, 116, 117, 1, 118, 
	1, 130, 131, 132, 133, 1, 2745, 2746, 
	2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 
	1, 1, 2755, 2756, 2757, 1, 2758, 2759, 
	1, 2760, 1, 2761, 2762, 1, 2763, 1, 
	2764, 1, 1, 1, 1, 1, 1, 2765, 
	2766, 2748, 2749, 2767, 2751, 2768, 2769, 2754, 
	1, 1, 2755, 2770, 2771, 1, 2758, 2759, 
	1, 2760, 1, 2772, 2773, 2774, 2775, 1, 
	2776, 2776, 2776, 2776, 2776, 2776, 2776, 2776, 
	2776, 2776, 1, 1, 1, 1, 1, 1, 
	69, 70, 71, 72, 73, 74, 75, 76, 
	77, 78, 1, 1, 79, 80, 81, 1, 
	82, 83, 1, 84, 1, 85, 86, 1, 
	87, 1, 88, 1, 1, 1, 1, 1, 
	1, 89, 90, 72, 73, 91, 75, 92, 
	93, 78, 1, 1, 79, 94, 95, 1, 
	82, 83, 1, 84, 1, 96, 97, 98, 
	99, 1, 2777, 2778, 2779, 2780, 2781, 2782, 
	2783, 2784, 2785, 2786, 1, 1, 2787, 2788, 
	2789, 1, 2790, 2791, 1, 2792, 1, 2793, 
	2794, 1, 2795, 1, 2796, 1, 1, 1, 
	1, 1, 1, 2797, 2798, 2780, 2781, 2799, 
	2783, 2800, 2801, 2786, 1, 1, 2787, 2802, 
	2803, 1, 2790, 2791, 1, 2792, 1, 2804, 
	2805, 2806, 2807, 1, 2808, 2808, 2808, 2808, 
	2808, 2808, 2808, 2808, 2808, 2808, 1, 1, 
	1, 1, 1, 1, 35, 36, 37, 38, 
	39, 40, 41, 42, 43, 44, 1, 1, 
	45, 46, 47, 1, 48, 49, 1, 50, 
	1, 51, 52, 1, 53, 1, 54, 1, 
	1, 1, 1, 1, 1, 55, 56, 38, 
	39, 57, 41, 58, 59, 44, 1, 1, 
	45, 60, 61, 1, 48, 49, 1, 50, 
	1, 62, 63, 64, 65, 1, 0
};

static const unsigned char _trans_targs[] = {
	2, 0, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	3, 162, 163, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 59, 61, 
	63, 65, 5, 160, 161, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	59, 61, 63, 65, 7, 158, 159, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 59, 61, 63, 65, 9, 156, 
	157, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	11, 154, 155, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 59, 61, 
	63, 65, 13, 152, 153, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	59, 61, 63, 65, 15, 150, 151, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 59, 61, 63, 65, 17, 148, 
	149, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	19, 146, 147, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 59, 61, 
	63, 65, 21, 22, 137, 144, 145, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 59, 61, 63, 65, 138, 141, 
	2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 23, 26, 28, 30, 32, 34, 
	37, 39, 41, 43, 45, 47, 49, 51, 
	53, 55, 57, 59, 61, 63, 65, 24, 
	129, 130, 131, 134, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 59, 
	61, 63, 65, 25, 122, 123, 126, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 59, 61, 63, 65, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 
	23, 26, 28, 30, 32, 34, 37, 39, 
	41, 43, 45, 47, 49, 51, 53, 55, 
	57, 59, 61, 63, 65, 27, 120, 121, 
	2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 23, 26, 28, 30, 32, 34, 
	37, 39, 41, 43, 45, 47, 49, 51, 
	53, 55, 57, 59, 61, 63, 65, 29, 
	118, 119, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 31, 116, 117, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 59, 
	61, 63, 65, 33, 106, 107, 108, 112, 
	2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 23, 26, 28, 30, 32, 34, 
	37, 39, 41, 43, 45, 47, 49, 51, 
	53, 55, 57, 59, 61, 63, 65, 35, 
	36, 97, 104, 105, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 59, 
	61, 63, 65, 98, 101, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	59, 61, 63, 65, 38, 95, 96, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 59, 61, 63, 65, 40, 93, 
	94, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	42, 91, 92, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 59, 61, 
	63, 65, 44, 89, 90, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	59, 61, 63, 65, 46, 87, 88, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 59, 61, 63, 65, 48, 85, 
	86, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	50, 83, 84, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 59, 61, 
	63, 65, 52, 81, 82, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	59, 61, 63, 65, 54, 79, 80, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 59, 61, 63, 65, 56, 77, 
	78, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	58, 75, 76, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 59, 61, 
	63, 65, 60, 73, 74, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	59, 61, 63, 65, 62, 71, 72, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 59, 61, 63, 65, 64, 69, 
	70, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	66, 67, 68, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 59, 61, 
	63, 65, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 68, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 70, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 72, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 74, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 76, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 78, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 80, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 82, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 84, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 86, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 88, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 90, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 92, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 94, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 96, 97, 99, 100, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	59, 61, 63, 65, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 59, 
	61, 63, 65, 100, 102, 103, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 
	23, 26, 28, 30, 32, 34, 37, 39, 
	41, 43, 45, 47, 49, 51, 53, 55, 
	57, 59, 61, 63, 65, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	59, 61, 63, 65, 103, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	59, 61, 63, 65, 107, 109, 110, 111, 
	2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 23, 26, 28, 30, 32, 34, 
	37, 39, 41, 43, 45, 47, 49, 51, 
	53, 55, 57, 59, 61, 63, 65, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 59, 61, 63, 65, 111, 113, 
	114, 115, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	115, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	117, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	119, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	121, 122, 124, 125, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 59, 
	61, 63, 65, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 59, 61, 
	63, 65, 125, 127, 128, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	59, 61, 63, 65, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 59, 
	61, 63, 65, 128, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 59, 
	61, 63, 65, 130, 132, 133, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 
	23, 26, 28, 30, 32, 34, 37, 39, 
	41, 43, 45, 47, 49, 51, 53, 55, 
	57, 59, 61, 63, 65, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	59, 61, 63, 65, 133, 135, 136, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 59, 61, 63, 65, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 
	23, 26, 28, 30, 32, 34, 37, 39, 
	41, 43, 45, 47, 49, 51, 53, 55, 
	57, 59, 61, 63, 65, 136, 137, 139, 
	140, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 23, 26, 28, 30, 32, 34, 
	37, 39, 41, 43, 45, 47, 49, 51, 
	53, 55, 57, 59, 61, 63, 65, 140, 
	142, 143, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 59, 61, 63, 
	65, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	143, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	147, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	149, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	151, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	153, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	155, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	157, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	159, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	161, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	163
};

static const unsigned char _trans_actions[] = {
	2, 0, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 0, 5, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 4, 0, 5, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 4, 0, 5, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 4, 0, 
	5, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	4, 0, 5, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 4, 0, 5, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 4, 0, 5, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 4, 0, 
	5, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	4, 0, 5, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 0, 0, 5, 0, 0, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 0, 0, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 0, 
	0, 5, 0, 0, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 0, 5, 0, 0, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 4, 0, 5, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 4, 
	0, 5, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 4, 0, 5, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 4, 0, 5, 0, 0, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 0, 
	0, 5, 0, 0, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 0, 0, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 4, 0, 5, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 4, 0, 
	5, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	4, 0, 5, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 4, 0, 5, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 4, 0, 5, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 4, 0, 
	5, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	4, 0, 5, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 4, 0, 5, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 4, 0, 5, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 4, 0, 
	5, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	4, 0, 5, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 4, 0, 5, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 4, 0, 5, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 4, 0, 
	5, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	4, 0, 5, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 77, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 77, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 77, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 77, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 77, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 77, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 77, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 77, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 77, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 77, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 77, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 77, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 77, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 77, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 77, 77, 0, 5, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 77, 0, 5, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 77, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 77, 4, 0, 5, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 77, 4, 
	0, 5, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	77, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	77, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	77, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	77, 77, 0, 5, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 77, 0, 5, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 77, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 77, 0, 5, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 77, 0, 5, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 77, 77, 0, 
	5, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 77, 
	0, 5, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	77, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	77, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	77, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	77, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	77, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	77, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	77, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	77, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	77, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	77
};

static const unsigned char _eof_actions[] = {
	0, 1, 3, 3, 7, 7, 9, 9, 
	11, 11, 13, 13, 15, 15, 17, 17, 
	19, 19, 21, 21, 23, 23, 25, 27, 
	29, 31, 33, 33, 35, 35, 37, 37, 
	39, 39, 41, 41, 43, 45, 45, 47, 
	47, 49, 49, 51, 51, 53, 53, 55, 
	55, 57, 57, 59, 59, 61, 61, 63, 
	63, 65, 65, 67, 67, 69, 69, 71, 
	71, 73, 73, 75, 73, 78, 71, 80, 
	69, 82, 67, 84, 65, 86, 63, 88, 
	61, 90, 59, 92, 57, 94, 55, 96, 
	53, 98, 51, 100, 49, 102, 47, 104, 
	45, 41, 106, 108, 106, 110, 112, 110, 
	106, 110, 114, 39, 116, 116, 118, 116, 
	120, 120, 122, 120, 124, 37, 126, 35, 
	128, 33, 29, 130, 132, 130, 134, 136, 
	134, 138, 27, 140, 142, 140, 144, 146, 
	144, 23, 148, 150, 148, 152, 154, 152, 
	148, 152, 156, 21, 158, 19, 160, 17, 
	162, 15, 164, 13, 166, 11, 168, 9, 
	170, 7, 172, 3
};

static const int start = 1;

static const int en_main = 1;


	{
	cs = start;
	}

	{
	int _slen;
	int _trans;
	const char *_keys;
	const short *_inds;
	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _trans_keys + (cs<<1);
	_inds = _indicies + _index_offsets[cs];

	_slen = _key_spans[cs];
	_trans = _inds[ _slen > 0 && _keys[0] <=(*p) &&
		(*p) <= _keys[1] ?
		(*p) - _keys[0] : _slen ];

	cs = _trans_targs[_trans];

	if ( _trans_actions[_trans] == 0 )
		goto _again;

	switch ( _trans_actions[_trans] ) {
	case 2:
	{
    count = 1;
    rest = false;
  }
	break;
	case 5:
	{
    count = (*p) - '0';
  }
	break;
	case 77:
	{
    count = count * 10 + ((*p) - '0');
  }
	break;
	case 4:
	{
    pack19::non_native_error(state, *p);
  }
	break;
	case 50:
	{
    if(rest) count = 0;

    if(count > (native_int)str.size()) {
      pack19::exceeds_length_of_string(state, count);
    }

    str.resize(str.size() - count);
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 74:
	{
    if(rest) count = 0;

    str.append(count, '\0');
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 6:
	{
    if(rest) count = 1;

    if(count > (native_int)str.size()) {
      str.append(count - str.size(), '\0');
    } else {
      str.resize(count);
    }
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 101:
	{
    rest = true;
  }
	{
    if(rest) count = 0;

    if(count > (native_int)str.size()) {
      pack19::exceeds_length_of_string(state, count);
    }

    str.resize(str.size() - count);
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 76:
	{
    rest = true;
  }
	{
    if(rest) count = 0;

    str.append(count, '\0');
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 173:
	{
    rest = true;
  }
	{
    if(rest) count = 1;

    if(count > (native_int)str.size()) {
      str.append(count - str.size(), '\0');
    } else {
      str.resize(count);
    }
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 12:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_byte;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 42:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 107:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 111:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 24:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 149:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 153:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 28:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 30:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    pack_int;
#else
    pack_long;
#endif
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 141:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 145:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 131:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    pack_int_le;
#else
    pack_long_le;
#endif
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 135:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    pack_int_be;
#else
    pack_long_be;
#endif
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 66:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 36:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 70:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 48:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 40:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_long;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 117:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_long_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 121:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_long_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 38:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    str.append("\0\0\0\0", 4);
#else
    str.append("\0\0\0\0\0\0\0\0", 8);
#endif
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 46:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    utf8_encoding = true;
    pack_utf8
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 72:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_ber
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 14:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_double;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 16:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_double_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 58:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_float_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 18:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_float;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 20:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_double_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 60:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_float_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 167:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_byte;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 44:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 109:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 113:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 26:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 151:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 155:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 139:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 32:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    pack_int;
#else
    pack_long;
#endif
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 143:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 147:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 133:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    pack_int_le;
#else
    pack_long_le;
#endif
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 137:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    pack_int_be;
#else
    pack_long_be;
#endif
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 85:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 127:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 81:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 103:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 115:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_long;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 119:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_long_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 123:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_long_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 125:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    str.append("\0\0\0\0", 4);
#else
    str.append("\0\0\0\0\0\0\0\0", 8);
#endif
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 105:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    utf8_encoding = true;
    pack_utf8
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 79:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_ber
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 165:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_double;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 163:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_double_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 93:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_float_le;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 161:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_float;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 159:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_double_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 91:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_float_be;
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 10:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::bit_extra(string_value, rest, count);

    pack19::bit_high(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 56:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::bit_extra(string_value, rest, count);

    pack19::bit_low(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 22:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::hex_extra(string_value, rest, count);

    pack19::hex_high(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 62:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::hex_extra(string_value, rest, count);

    pack19::hex_low(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 34:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_s");
    if(!string_value) return 0;
  }
	{
    ascii_encoding = true;
    if(rest || count < 2) count = 72;
    pack19::quotable_printable(string_value, str, count);
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 169:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::bit_extra(string_value, rest, count);

    pack19::bit_high(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 95:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::bit_extra(string_value, rest, count);

    pack19::bit_low(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 157:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::hex_extra(string_value, rest, count);

    pack19::hex_high(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 89:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::hex_extra(string_value, rest, count);

    pack19::hex_low(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 129:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_s");
    if(!string_value) return 0;
  }
	{
    ascii_encoding = true;
    if(rest || count < 2) count = 72;
    pack19::quotable_printable(string_value, str, count);
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 8:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    if(CBOOL(string_value->tainted_p(state))) tainted = true;
    if(CBOOL(string_value->untrusted_p(state))) untrusted = true;
    native_int size = string_value->byte_size();
    if(rest) count = size;
    if(count <= size) {
      str.append((const char*)string_value->byte_address(), count);
      count = 0;
    } else {
      str.append((const char*)string_value->byte_address(), size);
      count = count - size;
    }
  }
	{
    string_encoding = true;
    if(count > 0) str.append(count, ' ');
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 54:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    if(CBOOL(string_value->tainted_p(state))) tainted = true;
    if(CBOOL(string_value->untrusted_p(state))) untrusted = true;
    native_int size = string_value->byte_size();
    if(rest) count = size;
    if(count <= size) {
      str.append((const char*)string_value->byte_address(), count);
      count = 0;
    } else {
      str.append((const char*)string_value->byte_address(), size);
      count = count - size;
    }
  }
	{
    string_encoding = true;
    if(count > 0) str.append(count, '\0');
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 52:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    if(CBOOL(string_value->tainted_p(state))) tainted = true;
    if(CBOOL(string_value->untrusted_p(state))) untrusted = true;
    native_int size = string_value->byte_size();
    if(rest) count = size;
    if(count <= size) {
      str.append((const char*)string_value->byte_address(), count);
      count = 0;
    } else {
      str.append((const char*)string_value->byte_address(), size);
      count = count - size;
    }
  }
	{
    string_encoding = true;
    if(rest) {
      if(count == 0) str.append(1, '\0');
    } else {
      if(count > 0) str.append(count, '\0');
    }
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 64:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    count_flag = count;
    if(rest || count < 3) {
      count = 45;
    } else {
      count = count / 3 * 3;
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str");
    if(!string_value) return 0;
  }
	{
    ascii_encoding = true;
    pack19::b64_uu_encode(string_value, str, count, count_flag, pack19::b64_table, '=', false);
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 68:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    count_flag = count;
    if(rest || count < 3) {
      count = 45;
    } else {
      count = count / 3 * 3;
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str");
    if(!string_value) return 0;
  }
	{
    ascii_encoding = true;
    pack19::b64_uu_encode(string_value, str, count, count_flag, pack19::uu_table, '`', true);
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 171:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    if(CBOOL(string_value->tainted_p(state))) tainted = true;
    if(CBOOL(string_value->untrusted_p(state))) untrusted = true;
    native_int size = string_value->byte_size();
    if(rest) count = size;
    if(count <= size) {
      str.append((const char*)string_value->byte_address(), count);
      count = 0;
    } else {
      str.append((const char*)string_value->byte_address(), size);
      count = count - size;
    }
  }
	{
    string_encoding = true;
    if(count > 0) str.append(count, ' ');
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 97:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    if(CBOOL(string_value->tainted_p(state))) tainted = true;
    if(CBOOL(string_value->untrusted_p(state))) untrusted = true;
    native_int size = string_value->byte_size();
    if(rest) count = size;
    if(count <= size) {
      str.append((const char*)string_value->byte_address(), count);
      count = 0;
    } else {
      str.append((const char*)string_value->byte_address(), size);
      count = count - size;
    }
  }
	{
    string_encoding = true;
    if(count > 0) str.append(count, '\0');
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 99:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    if(CBOOL(string_value->tainted_p(state))) tainted = true;
    if(CBOOL(string_value->untrusted_p(state))) untrusted = true;
    native_int size = string_value->byte_size();
    if(rest) count = size;
    if(count <= size) {
      str.append((const char*)string_value->byte_address(), count);
      count = 0;
    } else {
      str.append((const char*)string_value->byte_address(), size);
      count = count - size;
    }
  }
	{
    string_encoding = true;
    if(rest) {
      if(count == 0) str.append(1, '\0');
    } else {
      if(count > 0) str.append(count, '\0');
    }
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 87:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    count_flag = count;
    if(rest || count < 3) {
      count = 45;
    } else {
      count = count / 3 * 3;
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str");
    if(!string_value) return 0;
  }
	{
    ascii_encoding = true;
    pack19::b64_uu_encode(string_value, str, count, count_flag, pack19::b64_table, '=', false);
  }
	{
    count = 1;
    rest = false;
  }
	break;
	case 83:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    count_flag = count;
    if(rest || count < 3) {
      count = 45;
    } else {
      count = count / 3 * 3;
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str");
    if(!string_value) return 0;
  }
	{
    ascii_encoding = true;
    pack19::b64_uu_encode(string_value, str, count, count_flag, pack19::uu_table, '`', true);
  }
	{
    count = 1;
    rest = false;
  }
	break;
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	switch ( _eof_actions[cs] ) {
	case 1:
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 49:
	{
    if(rest) count = 0;

    if(count > (native_int)str.size()) {
      pack19::exceeds_length_of_string(state, count);
    }

    str.resize(str.size() - count);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 73:
	{
    if(rest) count = 0;

    str.append(count, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 3:
	{
    if(rest) count = 1;

    if(count > (native_int)str.size()) {
      str.append(count - str.size(), '\0');
    } else {
      str.resize(count);
    }
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 100:
	{
    rest = true;
  }
	{
    if(rest) count = 0;

    if(count > (native_int)str.size()) {
      pack19::exceeds_length_of_string(state, count);
    }

    str.resize(str.size() - count);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 75:
	{
    rest = true;
  }
	{
    if(rest) count = 0;

    str.append(count, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 172:
	{
    rest = true;
  }
	{
    if(rest) count = 1;

    if(count > (native_int)str.size()) {
      str.append(count - str.size(), '\0');
    } else {
      str.resize(count);
    }
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 11:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_byte;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 41:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 106:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 110:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 23:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 148:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 152:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 27:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 29:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    pack_int;
#else
    pack_long;
#endif
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 140:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 144:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 130:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    pack_int_le;
#else
    pack_long_le;
#endif
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 134:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    pack_int_be;
#else
    pack_long_be;
#endif
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 65:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 35:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 69:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 47:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 39:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_long;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 116:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_long_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 120:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_long_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 37:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    str.append("\0\0\0\0", 4);
#else
    str.append("\0\0\0\0\0\0\0\0", 8);
#endif
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 45:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    utf8_encoding = true;
    pack_utf8
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 71:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_ber
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 13:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_double;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 15:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_double_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 57:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_float_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 17:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_float;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 19:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_double_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 59:
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_float_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 166:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_byte;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 43:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 108:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 112:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 25:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 150:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 154:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 138:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 31:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    pack_int;
#else
    pack_long;
#endif
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 142:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 146:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 132:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    pack_int_le;
#else
    pack_long_le;
#endif
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 136:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    pack_int_be;
#else
    pack_long_be;
#endif
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 84:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 126:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 80:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_short_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 102:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_int_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 114:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_long;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 118:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_long_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 122:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_long_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 124:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
#if RBX_SIZEOF_LONG == 4
    str.append("\0\0\0\0", 4);
#else
    str.append("\0\0\0\0\0\0\0\0", 8);
#endif
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 104:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    utf8_encoding = true;
    pack_utf8
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 78:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_ber
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 164:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_double;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 162:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_double_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 92:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_float_le;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 160:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_float;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 158:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_double_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 90:
	{
    rest = true;
  }
	{
    stop = rest ? array_size : index + count;
    if(stop > array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    pack_float_be;
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 9:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::bit_extra(string_value, rest, count);

    pack19::bit_high(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 55:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::bit_extra(string_value, rest, count);

    pack19::bit_low(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 21:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::hex_extra(string_value, rest, count);

    pack19::hex_high(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 61:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::hex_extra(string_value, rest, count);

    pack19::hex_low(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 33:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_s");
    if(!string_value) return 0;
  }
	{
    ascii_encoding = true;
    if(rest || count < 2) count = 72;
    pack19::quotable_printable(string_value, str, count);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 168:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::bit_extra(string_value, rest, count);

    pack19::bit_high(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 94:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::bit_extra(string_value, rest, count);

    pack19::bit_low(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 156:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::hex_extra(string_value, rest, count);

    pack19::hex_high(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 88:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    native_int extra = pack19::hex_extra(string_value, rest, count);

    pack19::hex_low(string_value, str, count);
    if(extra > 0) str.append(extra, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 128:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_s");
    if(!string_value) return 0;
  }
	{
    ascii_encoding = true;
    if(rest || count < 2) count = 72;
    pack19::quotable_printable(string_value, str, count);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 7:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    if(CBOOL(string_value->tainted_p(state))) tainted = true;
    if(CBOOL(string_value->untrusted_p(state))) untrusted = true;
    native_int size = string_value->byte_size();
    if(rest) count = size;
    if(count <= size) {
      str.append((const char*)string_value->byte_address(), count);
      count = 0;
    } else {
      str.append((const char*)string_value->byte_address(), size);
      count = count - size;
    }
  }
	{
    string_encoding = true;
    if(count > 0) str.append(count, ' ');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 53:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    if(CBOOL(string_value->tainted_p(state))) tainted = true;
    if(CBOOL(string_value->untrusted_p(state))) untrusted = true;
    native_int size = string_value->byte_size();
    if(rest) count = size;
    if(count <= size) {
      str.append((const char*)string_value->byte_address(), count);
      count = 0;
    } else {
      str.append((const char*)string_value->byte_address(), size);
      count = count - size;
    }
  }
	{
    string_encoding = true;
    if(count > 0) str.append(count, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 51:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    if(CBOOL(string_value->tainted_p(state))) tainted = true;
    if(CBOOL(string_value->untrusted_p(state))) untrusted = true;
    native_int size = string_value->byte_size();
    if(rest) count = size;
    if(count <= size) {
      str.append((const char*)string_value->byte_address(), count);
      count = 0;
    } else {
      str.append((const char*)string_value->byte_address(), size);
      count = count - size;
    }
  }
	{
    string_encoding = true;
    if(rest) {
      if(count == 0) str.append(1, '\0');
    } else {
      if(count > 0) str.append(count, '\0');
    }
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 63:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    count_flag = count;
    if(rest || count < 3) {
      count = 45;
    } else {
      count = count / 3 * 3;
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str");
    if(!string_value) return 0;
  }
	{
    ascii_encoding = true;
    pack19::b64_uu_encode(string_value, str, count, count_flag, pack19::b64_table, '=', false);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 67:
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    count_flag = count;
    if(rest || count < 3) {
      count = 45;
    } else {
      count = count / 3 * 3;
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str");
    if(!string_value) return 0;
  }
	{
    ascii_encoding = true;
    pack19::b64_uu_encode(string_value, str, count, count_flag, pack19::uu_table, '`', true);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 170:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    if(CBOOL(string_value->tainted_p(state))) tainted = true;
    if(CBOOL(string_value->untrusted_p(state))) untrusted = true;
    native_int size = string_value->byte_size();
    if(rest) count = size;
    if(count <= size) {
      str.append((const char*)string_value->byte_address(), count);
      count = 0;
    } else {
      str.append((const char*)string_value->byte_address(), size);
      count = count - size;
    }
  }
	{
    string_encoding = true;
    if(count > 0) str.append(count, ' ');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 96:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    if(CBOOL(string_value->tainted_p(state))) tainted = true;
    if(CBOOL(string_value->untrusted_p(state))) untrusted = true;
    native_int size = string_value->byte_size();
    if(rest) count = size;
    if(count <= size) {
      str.append((const char*)string_value->byte_address(), count);
      count = 0;
    } else {
      str.append((const char*)string_value->byte_address(), size);
      count = count - size;
    }
  }
	{
    string_encoding = true;
    if(count > 0) str.append(count, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 98:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str_or_nil");
    if(!string_value) return 0;
  }
	{
    if(CBOOL(string_value->tainted_p(state))) tainted = true;
    if(CBOOL(string_value->untrusted_p(state))) untrusted = true;
    native_int size = string_value->byte_size();
    if(rest) count = size;
    if(count <= size) {
      str.append((const char*)string_value->byte_address(), count);
      count = 0;
    } else {
      str.append((const char*)string_value->byte_address(), size);
      count = count - size;
    }
  }
	{
    string_encoding = true;
    if(rest) {
      if(count == 0) str.append(1, '\0');
    } else {
      if(count > 0) str.append(count, '\0');
    }
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 86:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    count_flag = count;
    if(rest || count < 3) {
      count = 45;
    } else {
      count = count / 3 * 3;
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str");
    if(!string_value) return 0;
  }
	{
    ascii_encoding = true;
    pack19::b64_uu_encode(string_value, str, count, count_flag, pack19::b64_table, '=', false);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	case 82:
	{
    rest = true;
  }
	{
    if(index >= array_size) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    count_flag = count;
    if(rest || count < 3) {
      count = 45;
    } else {
      count = count / 3 * 3;
    }
  }
	{
    string_value = pack19::encoding_string(state, call_frame,
        self->get(state, index++), "to_str");
    if(!string_value) return 0;
  }
	{
    ascii_encoding = true;
    pack19::b64_uu_encode(string_value, str, count, count_flag, pack19::uu_table, '`', true);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());

    if(utf8_encoding) {
      result->encoding(state, Encoding::utf8_encoding(state));
    } else if(string_encoding) {
      // TODO
    } else if(ascii_encoding) {
      result->encoding(state, Encoding::usascii_encoding(state));
    } else {
      result->encoding(state, Encoding::ascii8bit_encoding(state));
    }

    if(tainted) {
      result->taint(state);
      tainted = false;
    }

    if(untrusted) {
      result->untrust(state);
      untrusted = false;
    }

    return result;
  }
	break;
	}
	}

	_out: {}
	}



    if(en_main) {
      // do nothing
    }

    return force_as<String>(Primitives::failure());
  }
}
