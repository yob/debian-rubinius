
/* This file was generated by Ragel. Your edits will be lost.
 *
 * This is a state machine implementation of String#unpack.
 * See http://github.com/rubinius/rapa.
 *
 * vim: filetype=cpp
 */

#include <sstream>

#include "vm/config.h"

#include "vm.hpp"
#include "object_utils.hpp"
#include "on_stack.hpp"
#include "objectmemory.hpp"

#include "builtin/array.hpp"
#include "builtin/bytearray.hpp"
#include "builtin/exception.hpp"
#include "builtin/fixnum.hpp"
#include "builtin/float.hpp"
#include "builtin/string.hpp"

namespace rubinius {

  namespace unpack18 {
    void inline increment(native_int& index, native_int n, native_int limit) {
      if(index + n < limit) {
        index += n;
      } else {
        index = limit;
      }
    }

    uint16_t swap_2bytes(uint16_t x) {
      return ((((x)&0xff)<<8) | (((x)>>8)&0xff));
    }

    uint32_t swap_4bytes(uint32_t x) {
      return ((((x)&0xff)<<24)
             |(((x)>>24)&0xff)
             |(((x)&0x0000ff00)<<8)
             |(((x)&0x00ff0000)>>8));
    }

    uint64_t swap_8bytes(uint64_t x) {
      return ((((x)&0x00000000000000ffLL)<<56)
             |(((x)&0xff00000000000000LL)>>56)
             |(((x)&0x000000000000ff00LL)<<40)
             |(((x)&0x00ff000000000000LL)>>40)
             |(((x)&0x0000000000ff0000LL)<<24)
             |(((x)&0x0000ff0000000000LL)>>24)
             |(((x)&0x00000000ff000000LL)<<8)
             |(((x)&0x000000ff00000000LL)>>8));
    }

    float swap_float(const uint8_t* str) {
      uint32_t x;
      float y;

      memcpy(&x, str, sizeof(uint32_t));
      x = swap_4bytes(x);
      memcpy(&y, &x, sizeof(float));

      return y;
    }

    double swap_double(const uint8_t* str) {
      uint64_t x;
      double y;

      memcpy(&x, str, sizeof(uint64_t));
      x = swap_8bytes(x);
      memcpy(&y, &x, sizeof(double));

      return y;
    }

    inline int hex2num(char c) {
      switch (c) {
      case '0': case '1': case '2': case '3': case '4':
      case '5': case '6': case '7': case '8': case '9':
        return c - '0';
      case 'a': case 'b': case 'c':
      case 'd': case 'e': case 'f':
        return c - 'a' + 10;
      case 'A': case 'B': case 'C':
      case 'D': case 'E': case 'F':
        return c - 'A' + 10;
      default:
        return -1;
      }
    }

    String* quotable_printable(STATE, const char*& bytes,
                               const char* bytes_end, native_int remainder)
    {
      if(remainder == 0) {
        return String::create(state, 0, 0);
      }

      String* str = String::create(state, 0, remainder);
      uint8_t *buf = str->byte_address();

      while(bytes < bytes_end) {
        if(*bytes == '=') {
          if(++bytes == bytes_end)
            break;

          if(bytes+1 < bytes_end && bytes[0] == '\r' && bytes[1] == '\n')
            bytes++;

          if(*bytes != '\n') {
            int c1, c2;

            if((c1 = hex2num(*bytes)) == -1)
              break;
            if(++bytes == bytes_end)
              break;
            if((c2 = hex2num(*bytes)) == -1)
              break;
            *buf++ = c1 << 4 | c2;
          }
        } else {
          *buf++ = *bytes;
        }
        bytes++;
      }

      *buf = 0;
      str->num_bytes(state, Fixnum::from(buf - str->byte_address()));

      return str;
    }

    String* base64_decode(STATE, const char*& bytes,
                          const char* bytes_end, native_int remainder)
    {
      if(remainder == 0) {
        return String::create(state, 0, 0);
      }

      static bool initialized = false;
      static signed char b64_xtable[256];

      if(!initialized) {
        initialized = true;

        for(int i = 0; i < 256; i++) {
          b64_xtable[i] = -1;
        }

        for(int i = 0; i < 64; i++) {
          static const char table[] =
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
          b64_xtable[(int)(table[i])] = i;
        }
      }

      native_int num_bytes = (bytes_end - bytes) * 3 / 4;
      String* str = String::create(state, 0, num_bytes);
      uint8_t *buf = str->byte_address();

      int a = -1, b = -1, c = 0, d = 0;
      while(bytes < bytes_end) {
        a = b = c = d = -1;

        while((a = b64_xtable[(int)(*bytes)]) == -1 && bytes < bytes_end)
          bytes++;
        if(bytes >= bytes_end)
          break;
        bytes++;

        while((b = (int)b64_xtable[(int)(*bytes)]) == -1 && bytes < bytes_end)
          bytes++;
        if(bytes >= bytes_end)
          break;
        bytes++;

        while((c = (int)b64_xtable[(int)(*bytes)]) == -1 && bytes < bytes_end) {
          if(*bytes == '=')
            break;
          bytes++;
        }
        if(*bytes == '=' || bytes >= bytes_end)
          break;
        bytes++;

        while((d = (int)b64_xtable[(int)(*bytes)]) == -1 && bytes < bytes_end) {
          if(*bytes == '=')
            break;
          bytes++;
        }
        if(*bytes == '=' || bytes >= bytes_end)
          break;
        bytes++;

        *buf++ = a << 2 | b >> 4;
        *buf++ = b << 4 | c >> 2;
        *buf++ = c << 6 | d;
      }

      if(a != -1 && b != -1) {
        if(c == -1 && *bytes == '=') {
          *buf++ = a << 2 | b >> 4;
        } else if(c != -1 && *bytes == '=') {
          *buf++ = a << 2 | b >> 4;
          *buf++ = b << 4 | c >> 2;
        }
      }

      *buf = 0;
      str->num_bytes(state, Fixnum::from(buf - str->byte_address()));
      return str;
    }

    String* uu_decode(STATE, const char*& bytes,
                      const char* bytes_end, native_int remainder)
    {
      if(remainder == 0) {
        return String::create(state, 0, 0);
      }

      native_int length = 0, num_bytes = (bytes_end - bytes) * 3 / 4;
      String* str = String::create(state, 0, num_bytes);
      uint8_t *buf = str->byte_address();

      while(bytes < bytes_end && *bytes > ' ' && *bytes < 'a') {
        native_int line = (*bytes++ - ' ') & 0x3f;
        length += line;
        if(length > num_bytes) {
          line -= length - num_bytes;
          length = num_bytes;
        }

        while(line > 0) {
          char values[4];
          int l = line > 3 ? 3 : line;

          for(int i = 0; i < 4; i++) {
            if(bytes < bytes_end && *bytes >= ' ') {
              values[i] = (*bytes++ - ' ') & 0x3f;
            } else {
              values[i] = 0;
            }
          }

          switch(l) {
          case 3:
            buf[2] = values[2] << 6 | values[3];
          case 2:
            buf[1] = values[1] << 4 | values[2] >> 2;
          case 1:
            buf[0] = values[0] << 2 | values[1] >> 4;
          }

          buf += l;
          line -= l;
        }

        if(*bytes == '\r') bytes++;
        if(*bytes == '\n') {
          bytes++;
        } else if(bytes < bytes_end && (bytes+1 == bytes_end || bytes[1] == '\n')) {
          // possible checksum byte
          bytes += 2;
        }
      }

      buf[length] = 0;
      str->num_bytes(state, Fixnum::from(length));
      return str;
    }

    static const uint32_t utf8_limits[] = {
      0x0,        /* 1 */
      0x80,       /* 2 */
      0x800,      /* 3 */
      0x10000,    /* 4 */
      0x200000,   /* 5 */
      0x4000000,  /* 6 */
      0x80000000, /* 7 */
    };

#define MALFORMED_UTF8_ERROR_SIZE 60

    void utf8_decode(STATE, Array* array,
                     const char* bytes, const char* bytes_end,
                     native_int count, native_int& index)
    {
      int length;

      for(; count > 0 && bytes < bytes_end; count--) {
        native_int remainder = bytes_end - bytes;
        uint32_t c = *bytes++ & 0xff, value = c;
        int n = 0;
        length = 1;

        if(value & 0x80) {
          if(!(value & 0x40)) {
            Exception::argument_error(state, "malformed UTF-8 character");
          }

          if(!(value & 0x20)) {
            n = 2;
            value &= 0x1f;
          } else if(!(value & 0x10)) {
            n = 3;
            value &= 0x0f;
          } else if(!(value & 0x08)) {
            n = 4;
            value &= 0x07;
          } else if(!(value & 0x04)) {
            n = 5;
            value &= 0x03;
          } else if(!(value & 0x02)) {
            n = 6;
            value &= 0x01;
          } else {
            Exception::argument_error(state, "malformed UTF-8 character");
          }

          if(n > remainder) {
            char error_msg[MALFORMED_UTF8_ERROR_SIZE];
            snprintf(error_msg, MALFORMED_UTF8_ERROR_SIZE,
                    "malformed UTF-8 character (expected %d bytes, given %d bytes)",
                    n, (int)remainder);
            Exception::argument_error(state, error_msg);
          }

          length = n--;
          if(n != 0) {
            while(n--) {
              c = *bytes++ & 0xff;
              if((c & 0xc0) != 0x80) {
                Exception::argument_error(state, "malformed UTF-8 character");
              } else {
                c &= 0x3f;
                value = value << 6 | c;
              }
            }
          }

          if(value < utf8_limits[length-1]) {
            Exception::argument_error(state, "redundant UTF-8 sequence");
          }
        }

        array->append(state, Integer::from(state, value));
        index += length;
      }
    }

    void ber_decode(STATE, Array* array,
                     const char*& bytes, const char* bytes_end,
                     native_int count, native_int& index)
    {
      static unsigned long mask = 0xfeUL << ((sizeof(unsigned long) - 1) * 8);
      static Fixnum* base = Fixnum::from(128);
      unsigned long value = 0;

      while(count > 0 && bytes < bytes_end) {
        value <<= 7;
        value |= (*bytes & 0x7f);
        if(!(*bytes++ & 0x80)) {
          array->append(state, Integer::from(state, value));
          count--;
          value = 0;
        } else if(value & mask) {
          Integer* result = Integer::from(state, value);

          while(bytes < bytes_end) {
            if(result->fixnum_p()) {
              result = as<Fixnum>(result)->mul(state, base);
            } else {
              result = as<Bignum>(result)->mul(state, base);
            }

            Fixnum* b = Fixnum::from(*bytes & 0x7f);
            if(result->fixnum_p()) {
              result = as<Fixnum>(result)->add(state, b);
            } else {
              result = as<Bignum>(result)->add(state, b);
            }

            if(!(*bytes++ & 0x80)) {
              if(result->fixnum_p()) {
                array->append(state, result);
              } else {
                array->append(state, Bignum::normalize(state, as<Bignum>(result)));
              }
              count--;
              value = 0;
              break;
            }
          }
        }
      }
    }

    String* bit_high(STATE, const char*& bytes, native_int count) {
      String* str = String::create(state, 0, count);
      uint8_t *buf = str->byte_address();
      int bits = 0;

      for(native_int i = 0; i < count; i++) {
        if(i & 7) {
          bits <<= 1;
        } else {
          bits = *bytes++;
        }

        buf[i] = (bits & 128) ? '1' : '0';
      }

      return str;
    }

    String* bit_low(STATE, const char*& bytes, native_int count) {
      String* str = String::create(state, 0, count);
      uint8_t *buf = str->byte_address();
      int bits = 0;

      for(native_int i = 0; i < count; i++) {
        if(i & 7) {
          bits >>= 1;
        } else {
          bits = *bytes++;
        }

        buf[i] = (bits & 1) ? '1' : '0';
      }

      return str;
    }

    static const char hexdigits[] = "0123456789abcdef0123456789ABCDEFx";

    String* hex_high(STATE, const char*& bytes, native_int count) {
      String* str = String::create(state, 0, count);
      uint8_t *buf = str->byte_address();
      int bits = 0;

      for(native_int i = 0; i < count; i++) {
        if(i & 1) {
          bits <<= 4;
        } else {
          bits = *bytes++;
        }

        buf[i] = unpack18::hexdigits[(bits >> 4) & 15];
      }

      return str;
    }

    String* hex_low(STATE, const char*& bytes, native_int count) {
      String* str = String::create(state, 0, count);
      uint8_t *buf = str->byte_address();
      int bits = 0;

      for(native_int i = 0; i < count; i++) {
        if(i & 1) {
          bits >>= 4;
        } else {
          bits = *bytes++;
        }

        buf[i] = unpack18::hexdigits[bits & 15];
      }

      return str;
    }

    ByteArray* prepare_directives(STATE, String* directives,
                                  const char** p, const char** pe)
    {
      native_int size = directives->byte_size();
      ByteArray* ba = ByteArray::create_pinned(state, size);
      char* b = reinterpret_cast<char*>(ba->raw_bytes());
      char* d = reinterpret_cast<char*>(directives->byte_address());
      int i = 0, j = 0;

      while(i < size) {
        switch(d[i]) {
        case 0:
        case ' ':
        case '\t':
        case '\n':
        case '\v':
        case '\f':
        case '\r':
          i++;
          break;
        case '#':
          while(++i < size && d[i] != '\n')
            ; // ignore
          if(d[i] == '\n') i++;
          break;
        default:
          b[j++] = d[i++];
          break;
        }
      }

      *p = const_cast<const char*>(b);
      *pe = *p + j;

      return ba;
    }

    void outside_of_string(STATE, const char c) {
      std::ostringstream msg;
      msg << c << " outside of string";
      Exception::argument_error(state, msg.str().c_str());
    }

    void non_native_error(STATE, const char c) {
      std::ostringstream msg;
      msg << "'" << c << "' allowed only after types sSiIlL";
      Exception::argument_error(state, msg.str().c_str());
    }
  }

#define unpack_elements(create, bits)                     \
  for(; index < stop; index += width) {                   \
    const uint8_t* bytes = self->byte_address() + index;  \
    array->append(state, create(bits(bytes)));            \
    if(count > 0) count--;                                \
  }

#define UNPACK_ELEMENTS unpack_elements
#define unpack_integer(b)         unpack_elements(new_integer, b)
#define unpack_float_elements(b)  unpack_elements(new_float, b)

#define FIXNUM(b)         (Fixnum::from(b))
#define INTEGER(b)        (Integer::from(state, b))

#define new_integer(b)    (Integer::from(state, b))
#define new_float(b)      (Float::create(state, b))

#define sbyte(p)          (*(int8_t*)(p))
#define ubyte(p)          (*(uint8_t*)(p))

#define s2bytes(p)        (*(int16_t*)(p))
#define u2bytes(p)        (*(uint16_t*)(p))

#define s4bytes(p)        (*(int32_t*)(p))
#define u4bytes(p)        (*(uint32_t*)(p))

#define s8bytes(p)        (*(int64_t*)(p))
#define u8bytes(p)        (*(uint64_t*)(p))

#define float_bits(p)     (*(float*)(p))
#define double_bits(p)    (*(double*)(p))

#ifdef RBX_LITTLE_ENDIAN

# define s2bytes_le(p)            (s2bytes(p))
# define u2bytes_le(p)            (u2bytes(p))
# define s4bytes_le(p)            (s4bytes(p))
# define u4bytes_le(p)            (u4bytes(p))
# define s8bytes_le(p)            (s8bytes(p))
# define u8bytes_le(p)            (u8bytes(p))

# define s2bytes_be(p)            ((int16_t)(unpack18::swap_2bytes(u2bytes(p))))
# define u2bytes_be(p)            ((uint16_t)(unpack18::swap_2bytes(u2bytes(p))))
# define s4bytes_be(p)            ((int32_t)(unpack18::swap_4bytes(u4bytes(p))))
# define u4bytes_be(p)            ((uint32_t)(unpack18::swap_4bytes(u4bytes(p))))
# define s8bytes_be(p)            ((int64_t)(unpack18::swap_8bytes(u8bytes(p))))
# define u8bytes_be(p)            ((uint64_t)(unpack18::swap_8bytes(u8bytes(p))))

# define unpack_double            unpack_double_le
# define unpack_float             unpack_float_le

# define unpack_double_le         unpack_float_elements(double_bits)
# define unpack_float_le          unpack_float_elements(float_bits)

# define unpack_double_be         unpack_float_elements(unpack18::swap_double)
# define unpack_float_be          unpack_float_elements(unpack18::swap_float)

#else // Big endian

# define s2bytes_le(p)            ((int16_t)(unpack18::swap_2bytes(u2bytes(p))))
# define u2bytes_le(p)            ((uint16_t)(unpack18::swap_2bytes(u2bytes(p))))
# define s4bytes_le(p)            ((int32_t)(unpack18::swap_4bytes(u4bytes(p))))
# define u4bytes_le(p)            ((uint32_t)(unpack18::swap_4bytes(u4bytes(p))))
# define s8bytes_le(p)            ((int64_t)(unpack18::swap_8bytes(u8bytes(p))))
# define u8bytes_le(p)            ((uint64_t)(unpack18::swap_8bytes(u8bytes(p))))

# define s2bytes_be(p)            (s2bytes(p))
# define u2bytes_be(p)            (u2bytes(p))
# define s4bytes_be(p)            (s4bytes(p))
# define u4bytes_be(p)            (u4bytes(p))
# define s8bytes_be(p)            (s8bytes(p))
# define u8bytes_be(p)            (u8bytes(p))

# define unpack_double            unpack_double_be
# define unpack_float             unpack_float_be

# define unpack_double_le         unpack_float_elements(unpack18::swap_double)
# define unpack_float_le          unpack_float_elements(unpack18::swap_float)

# define unpack_double_be         unpack_float_elements(double_bits)
# define unpack_float_be          unpack_float_elements(float_bits)

#endif

  Array* String::unpack18(STATE, String* directives) {
    // Ragel-specific variables
    const char* p;
    const char* pe;
    ByteArray* d = unpack18::prepare_directives(state, directives, &p, &pe);
    const char *eof = pe;
    int cs;

    // pack-specific variables
    String* self = this;
    Array* array = Array::create(state, 0);
    OnStack<3> sv(state, self, array, d);
    const char* bytes = 0;
    const char* bytes_end = 0;

    native_int bytes_size = self->byte_size();
    native_int index = 0;
    native_int stop = 0;
    native_int width = 0;
    native_int count = 0;
    native_int remainder = 0;
    bool rest = false;
    bool platform = false;


static const char _trans_keys[] = {
	0, 0, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 
	33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 
	33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 42, 120, 64, 120, 33, 120, 
	42, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 
	33, 120, 64, 120, 33, 120, 42, 120, 64, 120, 33, 120, 64, 120, 33, 120, 
	64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 
	64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 
	64, 120, 33, 120, 42, 120, 64, 120, 33, 120, 42, 120, 64, 120, 33, 120, 
	64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 42, 120, 64, 120, 
	33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 33, 120, 64, 120, 
	64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 
	48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 48, 120, 
	48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 
	48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 
	48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 48, 120, 64, 120, 48, 120, 
	64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 48, 120, 48, 120, 
	64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 
	64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 64, 120, 48, 120, 
	64, 120, 48, 120, 0
};

static const char _key_spans[] = {
	0, 57, 88, 57, 88, 57, 88, 57, 
	88, 57, 88, 57, 88, 57, 88, 57, 
	88, 57, 88, 57, 88, 79, 57, 88, 
	79, 57, 88, 57, 88, 57, 88, 57, 
	88, 57, 88, 79, 57, 88, 57, 88, 
	57, 88, 57, 88, 57, 88, 57, 88, 
	57, 88, 57, 88, 57, 88, 57, 88, 
	57, 88, 79, 57, 88, 79, 57, 88, 
	57, 88, 57, 88, 57, 88, 79, 57, 
	88, 57, 88, 57, 88, 57, 88, 57, 
	57, 73, 57, 73, 57, 73, 57, 73, 
	73, 57, 73, 57, 73, 57, 73, 73, 
	73, 57, 73, 57, 73, 57, 73, 57, 
	73, 57, 73, 57, 73, 57, 73, 57, 
	73, 57, 73, 57, 73, 73, 57, 73, 
	57, 73, 57, 73, 57, 73, 73, 73, 
	57, 73, 57, 73, 57, 73, 57, 73, 
	57, 73, 57, 73, 57, 73, 57, 73, 
	57, 73
};

static const short _index_offsets[] = {
	0, 0, 58, 147, 205, 294, 352, 441, 
	499, 588, 646, 735, 793, 882, 940, 1029, 
	1087, 1176, 1234, 1323, 1381, 1470, 1550, 1608, 
	1697, 1777, 1835, 1924, 1982, 2071, 2129, 2218, 
	2276, 2365, 2423, 2512, 2592, 2650, 2739, 2797, 
	2886, 2944, 3033, 3091, 3180, 3238, 3327, 3385, 
	3474, 3532, 3621, 3679, 3768, 3826, 3915, 3973, 
	4062, 4120, 4209, 4289, 4347, 4436, 4516, 4574, 
	4663, 4721, 4810, 4868, 4957, 5015, 5104, 5184, 
	5242, 5331, 5389, 5478, 5536, 5625, 5683, 5772, 
	5830, 5888, 5962, 6020, 6094, 6152, 6226, 6284, 
	6358, 6432, 6490, 6564, 6622, 6696, 6754, 6828, 
	6902, 6976, 7034, 7108, 7166, 7240, 7298, 7372, 
	7430, 7504, 7562, 7636, 7694, 7768, 7826, 7900, 
	7958, 8032, 8090, 8164, 8222, 8296, 8370, 8428, 
	8502, 8560, 8634, 8692, 8766, 8824, 8898, 8972, 
	9046, 9104, 9178, 9236, 9310, 9368, 9442, 9500, 
	9574, 9632, 9706, 9764, 9838, 9896, 9970, 10028, 
	10102, 10160
};

static const short _indicies[] = {
	0, 2, 3, 4, 5, 6, 7, 
	8, 9, 10, 1, 1, 11, 12, 13, 
	1, 14, 15, 1, 16, 1, 17, 18, 
	1, 19, 1, 20, 1, 1, 1, 1, 
	1, 1, 21, 22, 23, 5, 24, 7, 
	25, 26, 27, 1, 1, 28, 29, 30, 
	1, 14, 31, 1, 32, 1, 33, 34, 
	35, 36, 1, 37, 1, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 1, 1, 
	1, 1, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 1, 1, 1, 1, 
	1, 1, 40, 41, 42, 43, 44, 45, 
	46, 47, 48, 49, 1, 1, 50, 51, 
	52, 1, 53, 54, 1, 55, 1, 56, 
	57, 1, 58, 1, 59, 1, 1, 1, 
	1, 37, 1, 60, 61, 62, 44, 63, 
	46, 64, 65, 66, 1, 1, 67, 68, 
	69, 1, 53, 70, 1, 71, 1, 72, 
	73, 74, 75, 1, 40, 41, 42, 43, 
	44, 45, 46, 47, 48, 49, 1, 1, 
	50, 51, 52, 1, 53, 54, 1, 55, 
	1, 56, 57, 1, 58, 1, 59, 1, 
	1, 1, 1, 1, 1, 60, 61, 62, 
	44, 63, 46, 64, 65, 66, 1, 1, 
	67, 68, 69, 1, 53, 70, 1, 71, 
	1, 72, 73, 74, 75, 1, 76, 1, 
	1, 1, 1, 1, 1, 1, 1, 77, 
	1, 1, 1, 1, 1, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 1, 
	1, 1, 1, 1, 1, 79, 80, 81, 
	82, 83, 84, 85, 86, 87, 88, 1, 
	1, 89, 90, 91, 1, 92, 93, 1, 
	94, 1, 95, 96, 1, 97, 1, 98, 
	1, 1, 1, 1, 76, 1, 99, 100, 
	101, 83, 102, 85, 103, 104, 105, 1, 
	1, 106, 107, 108, 1, 92, 109, 1, 
	110, 1, 111, 112, 113, 114, 1, 79, 
	80, 81, 82, 83, 84, 85, 86, 87, 
	88, 1, 1, 89, 90, 91, 1, 92, 
	93, 1, 94, 1, 95, 96, 1, 97, 
	1, 98, 1, 1, 1, 1, 1, 1, 
	99, 100, 101, 83, 102, 85, 103, 104, 
	105, 1, 1, 106, 107, 108, 1, 92, 
	109, 1, 110, 1, 111, 112, 113, 114, 
	1, 115, 1, 1, 1, 1, 1, 1, 
	1, 1, 116, 1, 1, 1, 1, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 1, 1, 1, 1, 1, 
	118, 119, 120, 121, 122, 123, 124, 125, 
	126, 127, 1, 1, 128, 129, 130, 1, 
	131, 132, 1, 133, 1, 134, 135, 1, 
	136, 1, 137, 1, 1, 1, 1, 115, 
	1, 138, 139, 140, 122, 141, 124, 142, 
	143, 144, 1, 1, 145, 146, 147, 1, 
	131, 148, 1, 149, 1, 150, 151, 152, 
	153, 1, 118, 119, 120, 121, 122, 123, 
	124, 125, 126, 127, 1, 1, 128, 129, 
	130, 1, 131, 132, 1, 133, 1, 134, 
	135, 1, 136, 1, 137, 1, 1, 1, 
	1, 1, 1, 138, 139, 140, 122, 141, 
	124, 142, 143, 144, 1, 1, 145, 146, 
	147, 1, 131, 148, 1, 149, 1, 150, 
	151, 152, 153, 1, 154, 1, 1, 1, 
	1, 1, 1, 1, 1, 155, 1, 1, 
	1, 1, 1, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 1, 1, 1, 
	1, 1, 1, 157, 158, 159, 160, 161, 
	162, 163, 164, 165, 166, 1, 1, 167, 
	168, 169, 1, 170, 171, 1, 172, 1, 
	173, 174, 1, 175, 1, 176, 1, 1, 
	1, 1, 154, 1, 177, 178, 179, 161, 
	180, 163, 181, 182, 183, 1, 1, 184, 
	185, 186, 1, 170, 187, 1, 188, 1, 
	189, 190, 191, 192, 1, 157, 158, 159, 
	160, 161, 162, 163, 164, 165, 166, 1, 
	1, 167, 168, 169, 1, 170, 171, 1, 
	172, 1, 173, 174, 1, 175, 1, 176, 
	1, 1, 1, 1, 1, 1, 177, 178, 
	179, 161, 180, 163, 181, 182, 183, 1, 
	1, 184, 185, 186, 1, 170, 187, 1, 
	188, 1, 189, 190, 191, 192, 1, 193, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	194, 1, 1, 1, 1, 1, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	1, 1, 1, 1, 1, 1, 196, 197, 
	198, 199, 200, 201, 202, 203, 204, 205, 
	1, 1, 206, 207, 208, 1, 209, 210, 
	1, 211, 1, 212, 213, 1, 214, 1, 
	215, 1, 1, 1, 1, 193, 1, 216, 
	217, 218, 200, 219, 202, 220, 221, 222, 
	1, 1, 223, 224, 225, 1, 209, 226, 
	1, 227, 1, 228, 229, 230, 231, 1, 
	196, 197, 198, 199, 200, 201, 202, 203, 
	204, 205, 1, 1, 206, 207, 208, 1, 
	209, 210, 1, 211, 1, 212, 213, 1, 
	214, 1, 215, 1, 1, 1, 1, 1, 
	1, 216, 217, 218, 200, 219, 202, 220, 
	221, 222, 1, 1, 223, 224, 225, 1, 
	209, 226, 1, 227, 1, 228, 229, 230, 
	231, 1, 232, 1, 1, 1, 1, 1, 
	1, 1, 1, 233, 1, 1, 1, 1, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 1, 1, 
	1, 235, 236, 237, 238, 239, 240, 241, 
	242, 243, 244, 1, 1, 245, 246, 247, 
	1, 248, 249, 1, 250, 1, 251, 252, 
	1, 253, 1, 254, 1, 1, 1, 1, 
	232, 1, 255, 256, 257, 239, 258, 241, 
	259, 260, 261, 1, 1, 262, 263, 264, 
	1, 248, 265, 1, 266, 1, 267, 268, 
	269, 270, 1, 235, 236, 237, 238, 239, 
	240, 241, 242, 243, 244, 1, 1, 245, 
	246, 247, 1, 248, 249, 1, 250, 1, 
	251, 252, 1, 253, 1, 254, 1, 1, 
	1, 1, 1, 1, 255, 256, 257, 239, 
	258, 241, 259, 260, 261, 1, 1, 262, 
	263, 264, 1, 248, 265, 1, 266, 1, 
	267, 268, 269, 270, 1, 271, 1, 1, 
	1, 1, 1, 1, 1, 1, 272, 1, 
	1, 1, 1, 1, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 1, 1, 
	1, 1, 1, 1, 274, 275, 276, 277, 
	278, 279, 280, 281, 282, 283, 1, 1, 
	284, 285, 286, 1, 287, 288, 1, 289, 
	1, 290, 291, 1, 292, 1, 293, 1, 
	1, 1, 1, 271, 1, 294, 295, 296, 
	278, 297, 280, 298, 299, 300, 1, 1, 
	301, 302, 303, 1, 287, 304, 1, 305, 
	1, 306, 307, 308, 309, 1, 274, 275, 
	276, 277, 278, 279, 280, 281, 282, 283, 
	1, 1, 284, 285, 286, 1, 287, 288, 
	1, 289, 1, 290, 291, 1, 292, 1, 
	293, 1, 1, 1, 1, 1, 1, 294, 
	295, 296, 278, 297, 280, 298, 299, 300, 
	1, 1, 301, 302, 303, 1, 287, 304, 
	1, 305, 1, 306, 307, 308, 309, 1, 
	310, 1, 1, 1, 1, 1, 1, 1, 
	1, 311, 1, 1, 1, 1, 1, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 1, 1, 1, 1, 1, 1, 313, 
	314, 315, 316, 317, 318, 319, 320, 321, 
	322, 1, 1, 323, 324, 325, 1, 326, 
	327, 1, 328, 1, 329, 330, 1, 331, 
	1, 332, 1, 1, 1, 1, 310, 1, 
	333, 334, 335, 317, 336, 319, 337, 338, 
	339, 1, 1, 340, 341, 342, 1, 326, 
	343, 1, 344, 1, 345, 346, 347, 348, 
	1, 313, 314, 315, 316, 317, 318, 319, 
	320, 321, 322, 1, 1, 323, 324, 325, 
	1, 326, 327, 1, 328, 1, 329, 330, 
	1, 331, 1, 332, 1, 1, 1, 1, 
	1, 1, 333, 334, 335, 317, 336, 319, 
	337, 338, 339, 1, 1, 340, 341, 342, 
	1, 326, 343, 1, 344, 1, 345, 346, 
	347, 348, 1, 349, 1, 1, 1, 1, 
	1, 1, 1, 1, 350, 1, 1, 1, 
	1, 1, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 1, 1, 1, 1, 
	1, 1, 352, 353, 354, 355, 356, 357, 
	358, 359, 360, 361, 1, 1, 362, 363, 
	364, 1, 365, 366, 1, 367, 1, 368, 
	369, 1, 370, 1, 371, 1, 1, 1, 
	1, 349, 1, 372, 373, 374, 356, 375, 
	358, 376, 377, 378, 1, 1, 379, 380, 
	381, 1, 365, 382, 1, 383, 1, 384, 
	385, 386, 387, 1, 352, 353, 354, 355, 
	356, 357, 358, 359, 360, 361, 1, 1, 
	362, 363, 364, 1, 365, 366, 1, 367, 
	1, 368, 369, 1, 370, 1, 371, 1, 
	1, 1, 1, 1, 1, 372, 373, 374, 
	356, 375, 358, 376, 377, 378, 1, 1, 
	379, 380, 381, 1, 365, 382, 1, 383, 
	1, 384, 385, 386, 387, 1, 388, 1, 
	1, 1, 1, 1, 1, 1, 1, 389, 
	1, 1, 1, 1, 1, 390, 390, 390, 
	390, 390, 390, 390, 390, 390, 390, 1, 
	1, 1, 1, 1, 1, 391, 392, 393, 
	394, 395, 396, 397, 398, 399, 400, 1, 
	1, 401, 402, 403, 1, 404, 405, 1, 
	406, 1, 407, 408, 1, 409, 1, 410, 
	1, 1, 1, 1, 388, 1, 411, 412, 
	413, 395, 414, 397, 415, 416, 417, 1, 
	1, 418, 419, 420, 1, 404, 421, 1, 
	422, 1, 423, 424, 425, 426, 1, 427, 
	1, 1, 1, 1, 1, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 1, 
	1, 1, 1, 1, 1, 429, 430, 431, 
	432, 433, 434, 435, 436, 437, 438, 1, 
	1, 439, 440, 441, 1, 442, 443, 1, 
	444, 1, 445, 446, 1, 447, 1, 448, 
	1, 1, 1, 1, 1, 1, 449, 450, 
	451, 433, 452, 435, 453, 454, 455, 1, 
	1, 456, 457, 458, 1, 442, 459, 1, 
	460, 1, 461, 462, 463, 464, 1, 465, 
	466, 467, 468, 469, 470, 471, 472, 473, 
	474, 1, 1, 475, 476, 477, 1, 478, 
	479, 1, 480, 1, 481, 482, 1, 483, 
	1, 484, 1, 1, 1, 1, 1, 1, 
	485, 486, 487, 469, 488, 471, 489, 490, 
	491, 1, 1, 492, 493, 494, 1, 478, 
	495, 1, 496, 1, 497, 498, 499, 500, 
	1, 501, 1, 1, 1, 1, 1, 1, 
	1, 1, 502, 1, 1, 1, 1, 1, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 1, 1, 1, 1, 1, 1, 
	504, 505, 506, 507, 508, 509, 510, 511, 
	512, 513, 1, 1, 514, 515, 516, 1, 
	517, 518, 1, 519, 1, 520, 521, 1, 
	522, 1, 523, 1, 1, 1, 1, 501, 
	1, 524, 525, 526, 508, 527, 510, 528, 
	529, 530, 1, 1, 531, 532, 533, 1, 
	517, 534, 1, 535, 1, 536, 537, 538, 
	539, 1, 540, 1, 1, 1, 1, 1, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 1, 1, 1, 1, 1, 1, 
	542, 543, 544, 545, 546, 547, 548, 549, 
	550, 551, 1, 1, 552, 553, 554, 1, 
	555, 556, 1, 557, 1, 558, 559, 1, 
	560, 1, 561, 1, 1, 1, 1, 1, 
	1, 562, 563, 564, 546, 565, 548, 566, 
	567, 568, 1, 1, 569, 570, 571, 1, 
	555, 572, 1, 573, 1, 574, 575, 576, 
	577, 1, 578, 579, 580, 581, 582, 583, 
	584, 585, 586, 587, 1, 1, 588, 589, 
	590, 1, 591, 592, 1, 593, 1, 594, 
	595, 1, 596, 1, 597, 1, 1, 1, 
	1, 1, 1, 598, 599, 600, 582, 601, 
	584, 602, 603, 604, 1, 1, 605, 606, 
	607, 1, 591, 608, 1, 609, 1, 610, 
	611, 612, 613, 1, 614, 1, 1, 1, 
	1, 1, 1, 1, 1, 615, 1, 1, 
	1, 1, 1, 616, 616, 616, 616, 616, 
	616, 616, 616, 616, 616, 1, 1, 1, 
	1, 1, 1, 617, 618, 619, 620, 621, 
	622, 623, 624, 625, 626, 1, 1, 627, 
	628, 629, 1, 630, 631, 1, 632, 1, 
	633, 634, 1, 635, 1, 636, 1, 1, 
	1, 1, 614, 1, 637, 638, 639, 621, 
	640, 623, 641, 642, 643, 1, 1, 644, 
	645, 646, 1, 630, 647, 1, 648, 1, 
	649, 650, 651, 652, 1, 617, 618, 619, 
	620, 621, 622, 623, 624, 625, 626, 1, 
	1, 627, 628, 629, 1, 630, 631, 1, 
	632, 1, 633, 634, 1, 635, 1, 636, 
	1, 1, 1, 1, 1, 1, 637, 638, 
	639, 621, 640, 623, 641, 642, 643, 1, 
	1, 644, 645, 646, 1, 630, 647, 1, 
	648, 1, 649, 650, 651, 652, 1, 653, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	654, 1, 1, 1, 1, 1, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	1, 1, 1, 1, 1, 1, 656, 657, 
	658, 659, 660, 661, 662, 663, 664, 665, 
	1, 1, 666, 667, 668, 1, 669, 670, 
	1, 671, 1, 672, 673, 1, 674, 1, 
	675, 1, 1, 1, 1, 653, 1, 676, 
	677, 678, 660, 679, 662, 680, 681, 682, 
	1, 1, 683, 684, 685, 1, 669, 686, 
	1, 687, 1, 688, 689, 690, 691, 1, 
	656, 657, 658, 659, 660, 661, 662, 663, 
	664, 665, 1, 1, 666, 667, 668, 1, 
	669, 670, 1, 671, 1, 672, 673, 1, 
	674, 1, 675, 1, 1, 1, 1, 1, 
	1, 676, 677, 678, 660, 679, 662, 680, 
	681, 682, 1, 1, 683, 684, 685, 1, 
	669, 686, 1, 687, 1, 688, 689, 690, 
	691, 1, 692, 1, 1, 1, 1, 1, 
	1, 1, 1, 693, 1, 1, 1, 1, 
	1, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 1, 1, 1, 1, 1, 
	1, 695, 696, 697, 698, 699, 700, 701, 
	702, 703, 704, 1, 1, 705, 706, 707, 
	1, 708, 709, 1, 710, 1, 711, 712, 
	1, 713, 1, 714, 1, 1, 1, 1, 
	692, 1, 715, 716, 717, 699, 718, 701, 
	719, 720, 721, 1, 1, 722, 723, 724, 
	1, 708, 725, 1, 726, 1, 727, 728, 
	729, 730, 1, 695, 696, 697, 698, 699, 
	700, 701, 702, 703, 704, 1, 1, 705, 
	706, 707, 1, 708, 709, 1, 710, 1, 
	711, 712, 1, 713, 1, 714, 1, 1, 
	1, 1, 1, 1, 715, 716, 717, 699, 
	718, 701, 719, 720, 721, 1, 1, 722, 
	723, 724, 1, 708, 725, 1, 726, 1, 
	727, 728, 729, 730, 1, 731, 1, 1, 
	1, 1, 1, 1, 1, 1, 732, 1, 
	1, 1, 1, 1, 733, 733, 733, 733, 
	733, 733, 733, 733, 733, 733, 1, 1, 
	1, 1, 1, 1, 734, 735, 736, 737, 
	738, 739, 740, 741, 742, 743, 1, 1, 
	744, 745, 746, 1, 747, 748, 1, 749, 
	1, 750, 751, 1, 752, 1, 753, 1, 
	1, 1, 1, 731, 1, 754, 755, 756, 
	738, 757, 740, 758, 759, 760, 1, 1, 
	761, 762, 763, 1, 747, 764, 1, 765, 
	1, 766, 767, 768, 769, 1, 734, 735, 
	736, 737, 738, 739, 740, 741, 742, 743, 
	1, 1, 744, 745, 746, 1, 747, 748, 
	1, 749, 1, 750, 751, 1, 752, 1, 
	753, 1, 1, 1, 1, 1, 1, 754, 
	755, 756, 738, 757, 740, 758, 759, 760, 
	1, 1, 761, 762, 763, 1, 747, 764, 
	1, 765, 1, 766, 767, 768, 769, 1, 
	770, 1, 1, 1, 1, 1, 1, 1, 
	1, 771, 1, 1, 1, 1, 1, 772, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	772, 1, 1, 1, 1, 1, 1, 773, 
	774, 775, 776, 777, 778, 779, 780, 781, 
	782, 1, 1, 783, 784, 785, 1, 786, 
	787, 1, 788, 1, 789, 790, 1, 791, 
	1, 792, 1, 1, 1, 1, 770, 1, 
	793, 794, 795, 777, 796, 779, 797, 798, 
	799, 1, 1, 800, 801, 802, 1, 786, 
	803, 1, 804, 1, 805, 806, 807, 808, 
	1, 809, 1, 1, 1, 1, 1, 810, 
	810, 810, 810, 810, 810, 810, 810, 810, 
	810, 1, 1, 1, 1, 1, 1, 811, 
	812, 813, 814, 815, 816, 817, 818, 819, 
	820, 1, 1, 821, 822, 823, 1, 824, 
	825, 1, 826, 1, 827, 828, 1, 829, 
	1, 830, 1, 1, 1, 1, 1, 1, 
	831, 832, 833, 815, 834, 817, 835, 836, 
	837, 1, 1, 838, 839, 840, 1, 824, 
	841, 1, 842, 1, 843, 844, 845, 846, 
	1, 847, 848, 849, 850, 851, 852, 853, 
	854, 855, 856, 1, 1, 857, 858, 859, 
	1, 860, 861, 1, 862, 1, 863, 864, 
	1, 865, 1, 866, 1, 1, 1, 1, 
	1, 1, 867, 868, 869, 851, 870, 853, 
	871, 872, 873, 1, 1, 874, 875, 876, 
	1, 860, 877, 1, 878, 1, 879, 880, 
	881, 882, 1, 883, 1, 1, 1, 1, 
	1, 1, 1, 1, 884, 1, 1, 1, 
	1, 1, 885, 885, 885, 885, 885, 885, 
	885, 885, 885, 885, 1, 1, 1, 1, 
	1, 1, 886, 887, 888, 889, 890, 891, 
	892, 893, 894, 895, 1, 1, 896, 897, 
	898, 1, 899, 900, 1, 901, 1, 902, 
	903, 1, 904, 1, 905, 1, 1, 1, 
	1, 883, 1, 906, 907, 908, 890, 909, 
	892, 910, 911, 912, 1, 1, 913, 914, 
	915, 1, 899, 916, 1, 917, 1, 918, 
	919, 920, 921, 1, 886, 887, 888, 889, 
	890, 891, 892, 893, 894, 895, 1, 1, 
	896, 897, 898, 1, 899, 900, 1, 901, 
	1, 902, 903, 1, 904, 1, 905, 1, 
	1, 1, 1, 1, 1, 906, 907, 908, 
	890, 909, 892, 910, 911, 912, 1, 1, 
	913, 914, 915, 1, 899, 916, 1, 917, 
	1, 918, 919, 920, 921, 1, 922, 1, 
	1, 1, 1, 1, 1, 1, 1, 923, 
	1, 1, 1, 1, 1, 924, 924, 924, 
	924, 924, 924, 924, 924, 924, 924, 1, 
	1, 1, 1, 1, 1, 925, 926, 927, 
	928, 929, 930, 931, 932, 933, 934, 1, 
	1, 935, 936, 937, 1, 938, 939, 1, 
	940, 1, 941, 942, 1, 943, 1, 944, 
	1, 1, 1, 1, 922, 1, 945, 946, 
	947, 929, 948, 931, 949, 950, 951, 1, 
	1, 952, 953, 954, 1, 938, 955, 1, 
	956, 1, 957, 958, 959, 960, 1, 925, 
	926, 927, 928, 929, 930, 931, 932, 933, 
	934, 1, 1, 935, 936, 937, 1, 938, 
	939, 1, 940, 1, 941, 942, 1, 943, 
	1, 944, 1, 1, 1, 1, 1, 1, 
	945, 946, 947, 929, 948, 931, 949, 950, 
	951, 1, 1, 952, 953, 954, 1, 938, 
	955, 1, 956, 1, 957, 958, 959, 960, 
	1, 961, 1, 1, 1, 1, 1, 1, 
	1, 1, 962, 1, 1, 1, 1, 1, 
	963, 963, 963, 963, 963, 963, 963, 963, 
	963, 963, 1, 1, 1, 1, 1, 1, 
	964, 965, 966, 967, 968, 969, 970, 971, 
	972, 973, 1, 1, 974, 975, 976, 1, 
	977, 978, 1, 979, 1, 980, 981, 1, 
	982, 1, 983, 1, 1, 1, 1, 961, 
	1, 984, 985, 986, 968, 987, 970, 988, 
	989, 990, 1, 1, 991, 992, 993, 1, 
	977, 994, 1, 995, 1, 996, 997, 998, 
	999, 1, 964, 965, 966, 967, 968, 969, 
	970, 971, 972, 973, 1, 1, 974, 975, 
	976, 1, 977, 978, 1, 979, 1, 980, 
	981, 1, 982, 1, 983, 1, 1, 1, 
	1, 1, 1, 984, 985, 986, 968, 987, 
	970, 988, 989, 990, 1, 1, 991, 992, 
	993, 1, 977, 994, 1, 995, 1, 996, 
	997, 998, 999, 1, 1000, 1, 1, 1, 
	1, 1, 1, 1, 1, 1001, 1, 1, 
	1, 1, 1, 1002, 1002, 1002, 1002, 1002, 
	1002, 1002, 1002, 1002, 1002, 1, 1, 1, 
	1, 1, 1, 1003, 1004, 1005, 1006, 1007, 
	1008, 1009, 1010, 1011, 1012, 1, 1, 1013, 
	1014, 1015, 1, 1016, 1017, 1, 1018, 1, 
	1019, 1020, 1, 1021, 1, 1022, 1, 1, 
	1, 1, 1000, 1, 1023, 1024, 1025, 1007, 
	1026, 1009, 1027, 1028, 1029, 1, 1, 1030, 
	1031, 1032, 1, 1016, 1033, 1, 1034, 1, 
	1035, 1036, 1037, 1038, 1, 1003, 1004, 1005, 
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1, 
	1, 1013, 1014, 1015, 1, 1016, 1017, 1, 
	1018, 1, 1019, 1020, 1, 1021, 1, 1022, 
	1, 1, 1, 1, 1, 1, 1023, 1024, 
	1025, 1007, 1026, 1009, 1027, 1028, 1029, 1, 
	1, 1030, 1031, 1032, 1, 1016, 1033, 1, 
	1034, 1, 1035, 1036, 1037, 1038, 1, 1039, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1040, 1, 1, 1, 1, 1, 1041, 1041, 
	1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 
	1, 1, 1, 1, 1, 1, 1042, 1043, 
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 
	1, 1, 1052, 1053, 1054, 1, 1055, 1056, 
	1, 1057, 1, 1058, 1059, 1, 1060, 1, 
	1061, 1, 1, 1, 1, 1039, 1, 1062, 
	1063, 1064, 1046, 1065, 1048, 1066, 1067, 1068, 
	1, 1, 1069, 1070, 1071, 1, 1055, 1072, 
	1, 1073, 1, 1074, 1075, 1076, 1077, 1, 
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 
	1050, 1051, 1, 1, 1052, 1053, 1054, 1, 
	1055, 1056, 1, 1057, 1, 1058, 1059, 1, 
	1060, 1, 1061, 1, 1, 1, 1, 1, 
	1, 1062, 1063, 1064, 1046, 1065, 1048, 1066, 
	1067, 1068, 1, 1, 1069, 1070, 1071, 1, 
	1055, 1072, 1, 1073, 1, 1074, 1075, 1076, 
	1077, 1, 1078, 1, 1, 1, 1, 1, 
	1, 1, 1, 1079, 1, 1, 1, 1, 
	1, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 
	1080, 1080, 1080, 1, 1, 1, 1, 1, 
	1, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 
	1088, 1089, 1090, 1, 1, 1091, 1092, 1093, 
	1, 1094, 1095, 1, 1096, 1, 1097, 1098, 
	1, 1099, 1, 1100, 1, 1, 1, 1, 
	1078, 1, 1101, 1102, 1103, 1085, 1104, 1087, 
	1105, 1106, 1107, 1, 1, 1108, 1109, 1110, 
	1, 1094, 1111, 1, 1112, 1, 1113, 1114, 
	1115, 1116, 1, 1081, 1082, 1083, 1084, 1085, 
	1086, 1087, 1088, 1089, 1090, 1, 1, 1091, 
	1092, 1093, 1, 1094, 1095, 1, 1096, 1, 
	1097, 1098, 1, 1099, 1, 1100, 1, 1, 
	1, 1, 1, 1, 1101, 1102, 1103, 1085, 
	1104, 1087, 1105, 1106, 1107, 1, 1, 1108, 
	1109, 1110, 1, 1094, 1111, 1, 1112, 1, 
	1113, 1114, 1115, 1116, 1, 1117, 1, 1, 
	1, 1, 1, 1, 1, 1, 1118, 1, 
	1, 1, 1, 1, 1119, 1119, 1119, 1119, 
	1119, 1119, 1119, 1119, 1119, 1119, 1, 1, 
	1, 1, 1, 1, 1120, 1121, 1122, 1123, 
	1124, 1125, 1126, 1127, 1128, 1129, 1, 1, 
	1130, 1131, 1132, 1, 1133, 1134, 1, 1135, 
	1, 1136, 1137, 1, 1138, 1, 1139, 1, 
	1, 1, 1, 1117, 1, 1140, 1141, 1142, 
	1124, 1143, 1126, 1144, 1145, 1146, 1, 1, 
	1147, 1148, 1149, 1, 1133, 1150, 1, 1151, 
	1, 1152, 1153, 1154, 1155, 1, 1120, 1121, 
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 
	1, 1, 1130, 1131, 1132, 1, 1133, 1134, 
	1, 1135, 1, 1136, 1137, 1, 1138, 1, 
	1139, 1, 1, 1, 1, 1, 1, 1140, 
	1141, 1142, 1124, 1143, 1126, 1144, 1145, 1146, 
	1, 1, 1147, 1148, 1149, 1, 1133, 1150, 
	1, 1151, 1, 1152, 1153, 1154, 1155, 1, 
	1156, 1, 1, 1, 1, 1, 1, 1, 
	1, 1157, 1, 1, 1, 1, 1, 1158, 
	1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 
	1158, 1, 1, 1, 1, 1, 1, 1159, 
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 
	1168, 1, 1, 1169, 1170, 1171, 1, 1172, 
	1173, 1, 1174, 1, 1175, 1176, 1, 1177, 
	1, 1178, 1, 1, 1, 1, 1156, 1, 
	1179, 1180, 1181, 1163, 1182, 1165, 1183, 1184, 
	1185, 1, 1, 1186, 1187, 1188, 1, 1172, 
	1189, 1, 1190, 1, 1191, 1192, 1193, 1194, 
	1, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 
	1166, 1167, 1168, 1, 1, 1169, 1170, 1171, 
	1, 1172, 1173, 1, 1174, 1, 1175, 1176, 
	1, 1177, 1, 1178, 1, 1, 1, 1, 
	1, 1, 1179, 1180, 1181, 1163, 1182, 1165, 
	1183, 1184, 1185, 1, 1, 1186, 1187, 1188, 
	1, 1172, 1189, 1, 1190, 1, 1191, 1192, 
	1193, 1194, 1, 1195, 1, 1, 1, 1, 
	1, 1, 1, 1, 1196, 1, 1, 1, 
	1, 1, 1197, 1197, 1197, 1197, 1197, 1197, 
	1197, 1197, 1197, 1197, 1, 1, 1, 1, 
	1, 1, 1198, 1199, 1200, 1201, 1202, 1203, 
	1204, 1205, 1206, 1207, 1, 1, 1208, 1209, 
	1210, 1, 1211, 1212, 1, 1213, 1, 1214, 
	1215, 1, 1216, 1, 1217, 1, 1, 1, 
	1, 1195, 1, 1218, 1219, 1220, 1202, 1221, 
	1204, 1222, 1223, 1224, 1, 1, 1225, 1226, 
	1227, 1, 1211, 1228, 1, 1229, 1, 1230, 
	1231, 1232, 1233, 1, 1198, 1199, 1200, 1201, 
	1202, 1203, 1204, 1205, 1206, 1207, 1, 1, 
	1208, 1209, 1210, 1, 1211, 1212, 1, 1213, 
	1, 1214, 1215, 1, 1216, 1, 1217, 1, 
	1, 1, 1, 1, 1, 1218, 1219, 1220, 
	1202, 1221, 1204, 1222, 1223, 1224, 1, 1, 
	1225, 1226, 1227, 1, 1211, 1228, 1, 1229, 
	1, 1230, 1231, 1232, 1233, 1, 1234, 1, 
	1, 1, 1, 1, 1, 1, 1, 1235, 
	1, 1, 1, 1, 1, 1236, 1236, 1236, 
	1236, 1236, 1236, 1236, 1236, 1236, 1236, 1, 
	1, 1, 1, 1, 1, 1237, 1238, 1239, 
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1, 
	1, 1247, 1248, 1249, 1, 1250, 1251, 1, 
	1252, 1, 1253, 1254, 1, 1255, 1, 1256, 
	1, 1, 1, 1, 1234, 1, 1257, 1258, 
	1259, 1241, 1260, 1243, 1261, 1262, 1263, 1, 
	1, 1264, 1265, 1266, 1, 1250, 1267, 1, 
	1268, 1, 1269, 1270, 1271, 1272, 1, 1237, 
	1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 
	1246, 1, 1, 1247, 1248, 1249, 1, 1250, 
	1251, 1, 1252, 1, 1253, 1254, 1, 1255, 
	1, 1256, 1, 1, 1, 1, 1, 1, 
	1257, 1258, 1259, 1241, 1260, 1243, 1261, 1262, 
	1263, 1, 1, 1264, 1265, 1266, 1, 1250, 
	1267, 1, 1268, 1, 1269, 1270, 1271, 1272, 
	1, 1273, 1, 1, 1, 1, 1, 1, 
	1, 1, 1274, 1, 1, 1, 1, 1, 
	1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 
	1275, 1275, 1, 1, 1, 1, 1, 1, 
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 
	1284, 1285, 1, 1, 1286, 1287, 1288, 1, 
	1289, 1290, 1, 1291, 1, 1292, 1293, 1, 
	1294, 1, 1295, 1, 1, 1, 1, 1273, 
	1, 1296, 1297, 1298, 1280, 1299, 1282, 1300, 
	1301, 1302, 1, 1, 1303, 1304, 1305, 1, 
	1289, 1306, 1, 1307, 1, 1308, 1309, 1310, 
	1311, 1, 1312, 1, 1, 1, 1, 1, 
	1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 
	1313, 1313, 1, 1, 1, 1, 1, 1, 
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 
	1322, 1323, 1, 1, 1324, 1325, 1326, 1, 
	1327, 1328, 1, 1329, 1, 1330, 1331, 1, 
	1332, 1, 1333, 1, 1, 1, 1, 1, 
	1, 1334, 1335, 1336, 1318, 1337, 1320, 1338, 
	1339, 1340, 1, 1, 1341, 1342, 1343, 1, 
	1327, 1344, 1, 1345, 1, 1346, 1347, 1348, 
	1349, 1, 1350, 1351, 1352, 1353, 1354, 1355, 
	1356, 1357, 1358, 1359, 1, 1, 1360, 1361, 
	1362, 1, 1363, 1364, 1, 1365, 1, 1366, 
	1367, 1, 1368, 1, 1369, 1, 1, 1, 
	1, 1, 1, 1370, 1371, 1372, 1354, 1373, 
	1356, 1374, 1375, 1376, 1, 1, 1377, 1378, 
	1379, 1, 1363, 1380, 1, 1381, 1, 1382, 
	1383, 1384, 1385, 1, 1386, 1, 1, 1, 
	1, 1, 1, 1, 1, 1387, 1, 1, 
	1, 1, 1, 1388, 1388, 1388, 1388, 1388, 
	1388, 1388, 1388, 1388, 1388, 1, 1, 1, 
	1, 1, 1, 1389, 1390, 1391, 1392, 1393, 
	1394, 1395, 1396, 1397, 1398, 1, 1, 1399, 
	1400, 1401, 1, 1402, 1403, 1, 1404, 1, 
	1405, 1406, 1, 1407, 1, 1408, 1, 1, 
	1, 1, 1386, 1, 1409, 1410, 1411, 1393, 
	1412, 1395, 1413, 1414, 1415, 1, 1, 1416, 
	1417, 1418, 1, 1402, 1419, 1, 1420, 1, 
	1421, 1422, 1423, 1424, 1, 1425, 1, 1, 
	1, 1, 1, 1426, 1426, 1426, 1426, 1426, 
	1426, 1426, 1426, 1426, 1426, 1, 1, 1, 
	1, 1, 1, 1427, 1428, 1429, 1430, 1431, 
	1432, 1433, 1434, 1435, 1436, 1, 1, 1437, 
	1438, 1439, 1, 1440, 1441, 1, 1442, 1, 
	1443, 1444, 1, 1445, 1, 1446, 1, 1, 
	1, 1, 1, 1, 1447, 1448, 1449, 1431, 
	1450, 1433, 1451, 1452, 1453, 1, 1, 1454, 
	1455, 1456, 1, 1440, 1457, 1, 1458, 1, 
	1459, 1460, 1461, 1462, 1, 1463, 1464, 1465, 
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1, 
	1, 1473, 1474, 1475, 1, 1476, 1477, 1, 
	1478, 1, 1479, 1480, 1, 1481, 1, 1482, 
	1, 1, 1, 1, 1, 1, 1483, 1484, 
	1485, 1467, 1486, 1469, 1487, 1488, 1489, 1, 
	1, 1490, 1491, 1492, 1, 1476, 1493, 1, 
	1494, 1, 1495, 1496, 1497, 1498, 1, 1499, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1500, 1, 1, 1, 1, 1, 1501, 1501, 
	1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 
	1, 1, 1, 1, 1, 1, 1502, 1503, 
	1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 
	1, 1, 1512, 1513, 1514, 1, 1515, 1516, 
	1, 1517, 1, 1518, 1519, 1, 1520, 1, 
	1521, 1, 1, 1, 1, 1499, 1, 1522, 
	1523, 1524, 1506, 1525, 1508, 1526, 1527, 1528, 
	1, 1, 1529, 1530, 1531, 1, 1515, 1532, 
	1, 1533, 1, 1534, 1535, 1536, 1537, 1, 
	1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 
	1510, 1511, 1, 1, 1512, 1513, 1514, 1, 
	1515, 1516, 1, 1517, 1, 1518, 1519, 1, 
	1520, 1, 1521, 1, 1, 1, 1, 1, 
	1, 1522, 1523, 1524, 1506, 1525, 1508, 1526, 
	1527, 1528, 1, 1, 1529, 1530, 1531, 1, 
	1515, 1532, 1, 1533, 1, 1534, 1535, 1536, 
	1537, 1, 1538, 1, 1, 1, 1, 1, 
	1, 1, 1, 1539, 1, 1, 1, 1, 
	1, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 
	1540, 1540, 1540, 1, 1, 1, 1, 1, 
	1, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 
	1548, 1549, 1550, 1, 1, 1551, 1552, 1553, 
	1, 1554, 1555, 1, 1556, 1, 1557, 1558, 
	1, 1559, 1, 1560, 1, 1, 1, 1, 
	1538, 1, 1561, 1562, 1563, 1545, 1564, 1547, 
	1565, 1566, 1567, 1, 1, 1568, 1569, 1570, 
	1, 1554, 1571, 1, 1572, 1, 1573, 1574, 
	1575, 1576, 1, 1541, 1542, 1543, 1544, 1545, 
	1546, 1547, 1548, 1549, 1550, 1, 1, 1551, 
	1552, 1553, 1, 1554, 1555, 1, 1556, 1, 
	1557, 1558, 1, 1559, 1, 1560, 1, 1, 
	1, 1, 1, 1, 1561, 1562, 1563, 1545, 
	1564, 1547, 1565, 1566, 1567, 1, 1, 1568, 
	1569, 1570, 1, 1554, 1571, 1, 1572, 1, 
	1573, 1574, 1575, 1576, 1, 1577, 1, 1, 
	1, 1, 1, 1, 1, 1, 1578, 1, 
	1, 1, 1, 1, 1579, 1579, 1579, 1579, 
	1579, 1579, 1579, 1579, 1579, 1579, 1, 1, 
	1, 1, 1, 1, 1580, 1581, 1582, 1583, 
	1584, 1585, 1586, 1587, 1588, 1589, 1, 1, 
	1590, 1591, 1592, 1, 1593, 1594, 1, 1595, 
	1, 1596, 1597, 1, 1598, 1, 1599, 1, 
	1, 1, 1, 1577, 1, 1600, 1601, 1602, 
	1584, 1603, 1586, 1604, 1605, 1606, 1, 1, 
	1607, 1608, 1609, 1, 1593, 1610, 1, 1611, 
	1, 1612, 1613, 1614, 1615, 1, 1580, 1581, 
	1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 
	1, 1, 1590, 1591, 1592, 1, 1593, 1594, 
	1, 1595, 1, 1596, 1597, 1, 1598, 1, 
	1599, 1, 1, 1, 1, 1, 1, 1600, 
	1601, 1602, 1584, 1603, 1586, 1604, 1605, 1606, 
	1, 1, 1607, 1608, 1609, 1, 1593, 1610, 
	1, 1611, 1, 1612, 1613, 1614, 1615, 1, 
	1616, 1, 1, 1, 1, 1, 1, 1, 
	1, 1617, 1, 1, 1, 1, 1, 1618, 
	1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 
	1618, 1, 1, 1, 1, 1, 1, 1619, 
	1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 
	1628, 1, 1, 1629, 1630, 1631, 1, 1632, 
	1633, 1, 1634, 1, 1635, 1636, 1, 1637, 
	1, 1638, 1, 1, 1, 1, 1616, 1, 
	1639, 1640, 1641, 1623, 1642, 1625, 1643, 1644, 
	1645, 1, 1, 1646, 1647, 1648, 1, 1632, 
	1649, 1, 1650, 1, 1651, 1652, 1653, 1654, 
	1, 1655, 1, 1, 1, 1, 1, 1656, 
	1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 
	1656, 1, 1, 1, 1, 1, 1, 1657, 
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 
	1666, 1, 1, 1667, 1668, 1669, 1, 1670, 
	1671, 1, 1672, 1, 1673, 1674, 1, 1675, 
	1, 1676, 1, 1, 1, 1, 1, 1, 
	1677, 1678, 1679, 1661, 1680, 1663, 1681, 1682, 
	1683, 1, 1, 1684, 1685, 1686, 1, 1670, 
	1687, 1, 1688, 1, 1689, 1690, 1691, 1692, 
	1, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 
	1700, 1701, 1702, 1, 1, 1703, 1704, 1705, 
	1, 1706, 1707, 1, 1708, 1, 1709, 1710, 
	1, 1711, 1, 1712, 1, 1, 1, 1, 
	1, 1, 1713, 1714, 1715, 1697, 1716, 1699, 
	1717, 1718, 1719, 1, 1, 1720, 1721, 1722, 
	1, 1706, 1723, 1, 1724, 1, 1725, 1726, 
	1727, 1728, 1, 1729, 1, 1, 1, 1, 
	1, 1, 1, 1, 1730, 1, 1, 1, 
	1, 1, 1731, 1731, 1731, 1731, 1731, 1731, 
	1731, 1731, 1731, 1731, 1, 1, 1, 1, 
	1, 1, 1732, 1733, 1734, 1735, 1736, 1737, 
	1738, 1739, 1740, 1741, 1, 1, 1742, 1743, 
	1744, 1, 1745, 1746, 1, 1747, 1, 1748, 
	1749, 1, 1750, 1, 1751, 1, 1, 1, 
	1, 1729, 1, 1752, 1753, 1754, 1736, 1755, 
	1738, 1756, 1757, 1758, 1, 1, 1759, 1760, 
	1761, 1, 1745, 1762, 1, 1763, 1, 1764, 
	1765, 1766, 1767, 1, 1732, 1733, 1734, 1735, 
	1736, 1737, 1738, 1739, 1740, 1741, 1, 1, 
	1742, 1743, 1744, 1, 1745, 1746, 1, 1747, 
	1, 1748, 1749, 1, 1750, 1, 1751, 1, 
	1, 1, 1, 1, 1, 1752, 1753, 1754, 
	1736, 1755, 1738, 1756, 1757, 1758, 1, 1, 
	1759, 1760, 1761, 1, 1745, 1762, 1, 1763, 
	1, 1764, 1765, 1766, 1767, 1, 1768, 1, 
	1, 1, 1, 1, 1, 1, 1, 1769, 
	1, 1, 1, 1, 1, 1770, 1770, 1770, 
	1770, 1770, 1770, 1770, 1770, 1770, 1770, 1, 
	1, 1, 1, 1, 1, 1771, 1772, 1773, 
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1, 
	1, 1781, 1782, 1783, 1, 1784, 1785, 1, 
	1786, 1, 1787, 1788, 1, 1789, 1, 1790, 
	1, 1, 1, 1, 1768, 1, 1791, 1792, 
	1793, 1775, 1794, 1777, 1795, 1796, 1797, 1, 
	1, 1798, 1799, 1800, 1, 1784, 1801, 1, 
	1802, 1, 1803, 1804, 1805, 1806, 1, 1771, 
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 
	1780, 1, 1, 1781, 1782, 1783, 1, 1784, 
	1785, 1, 1786, 1, 1787, 1788, 1, 1789, 
	1, 1790, 1, 1, 1, 1, 1, 1, 
	1791, 1792, 1793, 1775, 1794, 1777, 1795, 1796, 
	1797, 1, 1, 1798, 1799, 1800, 1, 1784, 
	1801, 1, 1802, 1, 1803, 1804, 1805, 1806, 
	1, 1807, 1, 1, 1, 1, 1, 1, 
	1, 1, 1808, 1, 1, 1, 1, 1, 
	1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809, 
	1809, 1809, 1, 1, 1, 1, 1, 1, 
	1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 
	1818, 1819, 1, 1, 1820, 1821, 1822, 1, 
	1823, 1824, 1, 1825, 1, 1826, 1827, 1, 
	1828, 1, 1829, 1, 1, 1, 1, 1807, 
	1, 1830, 1831, 1832, 1814, 1833, 1816, 1834, 
	1835, 1836, 1, 1, 1837, 1838, 1839, 1, 
	1823, 1840, 1, 1841, 1, 1842, 1843, 1844, 
	1845, 1, 1810, 1811, 1812, 1813, 1814, 1815, 
	1816, 1817, 1818, 1819, 1, 1, 1820, 1821, 
	1822, 1, 1823, 1824, 1, 1825, 1, 1826, 
	1827, 1, 1828, 1, 1829, 1, 1, 1, 
	1, 1, 1, 1830, 1831, 1832, 1814, 1833, 
	1816, 1834, 1835, 1836, 1, 1, 1837, 1838, 
	1839, 1, 1823, 1840, 1, 1841, 1, 1842, 
	1843, 1844, 1845, 1, 1846, 1, 1, 1, 
	1, 1, 1, 1, 1, 1847, 1, 1, 
	1, 1, 1, 1848, 1848, 1848, 1848, 1848, 
	1848, 1848, 1848, 1848, 1848, 1, 1, 1, 
	1, 1, 1, 1849, 1850, 1851, 1852, 1853, 
	1854, 1855, 1856, 1857, 1858, 1, 1, 1859, 
	1860, 1861, 1, 1862, 1863, 1, 1864, 1, 
	1865, 1866, 1, 1867, 1, 1868, 1, 1, 
	1, 1, 1846, 1, 1869, 1870, 1871, 1853, 
	1872, 1855, 1873, 1874, 1875, 1, 1, 1876, 
	1877, 1878, 1, 1862, 1879, 1, 1880, 1, 
	1881, 1882, 1883, 1884, 1, 1849, 1850, 1851, 
	1852, 1853, 1854, 1855, 1856, 1857, 1858, 1, 
	1, 1859, 1860, 1861, 1, 1862, 1863, 1, 
	1864, 1, 1865, 1866, 1, 1867, 1, 1868, 
	1, 1, 1, 1, 1, 1, 1869, 1870, 
	1871, 1853, 1872, 1855, 1873, 1874, 1875, 1, 
	1, 1876, 1877, 1878, 1, 1862, 1879, 1, 
	1880, 1, 1881, 1882, 1883, 1884, 1, 1885, 
	1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 
	1894, 1, 1, 1895, 1896, 1897, 1, 1898, 
	1899, 1, 1900, 1, 1901, 1902, 1, 1903, 
	1, 1904, 1, 1, 1, 1, 1, 1, 
	1905, 1906, 1907, 1889, 1908, 1891, 1909, 1910, 
	1911, 1, 1, 1912, 1913, 1914, 1, 1898, 
	1915, 1, 1916, 1, 1917, 1918, 1919, 1920, 
	1, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 
	1921, 1921, 1921, 1, 1, 1, 1, 1, 
	1, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 
	1856, 1857, 1858, 1, 1, 1859, 1860, 1861, 
	1, 1862, 1863, 1, 1864, 1, 1865, 1866, 
	1, 1867, 1, 1868, 1, 1, 1, 1, 
	1, 1, 1869, 1870, 1871, 1853, 1872, 1855, 
	1873, 1874, 1875, 1, 1, 1876, 1877, 1878, 
	1, 1862, 1879, 1, 1880, 1, 1881, 1882, 
	1883, 1884, 1, 1922, 1923, 1924, 1925, 1926, 
	1927, 1928, 1929, 1930, 1931, 1, 1, 1932, 
	1933, 1934, 1, 1935, 1936, 1, 1937, 1, 
	1938, 1939, 1, 1940, 1, 1941, 1, 1, 
	1, 1, 1, 1, 1942, 1943, 1944, 1926, 
	1945, 1928, 1946, 1947, 1948, 1, 1, 1949, 
	1950, 1951, 1, 1935, 1952, 1, 1953, 1, 
	1954, 1955, 1956, 1957, 1, 1958, 1958, 1958, 
	1958, 1958, 1958, 1958, 1958, 1958, 1958, 1, 
	1, 1, 1, 1, 1, 1810, 1811, 1812, 
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1, 
	1, 1820, 1821, 1822, 1, 1823, 1824, 1, 
	1825, 1, 1826, 1827, 1, 1828, 1, 1829, 
	1, 1, 1, 1, 1, 1, 1830, 1831, 
	1832, 1814, 1833, 1816, 1834, 1835, 1836, 1, 
	1, 1837, 1838, 1839, 1, 1823, 1840, 1, 
	1841, 1, 1842, 1843, 1844, 1845, 1, 1959, 
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 
	1968, 1, 1, 1969, 1970, 1971, 1, 1972, 
	1973, 1, 1974, 1, 1975, 1976, 1, 1977, 
	1, 1978, 1, 1, 1, 1, 1, 1, 
	1979, 1980, 1981, 1963, 1982, 1965, 1983, 1984, 
	1985, 1, 1, 1986, 1987, 1988, 1, 1972, 
	1989, 1, 1990, 1, 1991, 1992, 1993, 1994, 
	1, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 
	1995, 1995, 1995, 1, 1, 1, 1, 1, 
	1, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 
	1778, 1779, 1780, 1, 1, 1781, 1782, 1783, 
	1, 1784, 1785, 1, 1786, 1, 1787, 1788, 
	1, 1789, 1, 1790, 1, 1, 1, 1, 
	1, 1, 1791, 1792, 1793, 1775, 1794, 1777, 
	1795, 1796, 1797, 1, 1, 1798, 1799, 1800, 
	1, 1784, 1801, 1, 1802, 1, 1803, 1804, 
	1805, 1806, 1, 1996, 1997, 1998, 1999, 2000, 
	2001, 2002, 2003, 2004, 2005, 1, 1, 2006, 
	2007, 2008, 1, 2009, 2010, 1, 2011, 1, 
	2012, 2013, 1, 2014, 1, 2015, 1, 1, 
	1, 1, 1, 1, 2016, 2017, 2018, 2000, 
	2019, 2002, 2020, 2021, 2022, 1, 1, 2023, 
	2024, 2025, 1, 2009, 2026, 1, 2027, 1, 
	2028, 2029, 2030, 2031, 1, 2032, 2032, 2032, 
	2032, 2032, 2032, 2032, 2032, 2032, 2032, 1, 
	1, 1, 1, 1, 1, 1732, 1733, 1734, 
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1, 
	1, 1742, 1743, 1744, 1, 1745, 1746, 1, 
	1747, 1, 1748, 1749, 1, 1750, 1, 1751, 
	1, 1, 1, 1, 1, 1, 1752, 1753, 
	1754, 1736, 1755, 1738, 1756, 1757, 1758, 1, 
	1, 1759, 1760, 1761, 1, 1745, 1762, 1, 
	1763, 1, 1764, 1765, 1766, 1767, 1, 2033, 
	2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033, 
	2033, 1, 1, 1, 1, 1, 1, 1619, 
	1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 
	1628, 1, 1, 1629, 1630, 1631, 1, 1632, 
	1633, 1, 1634, 1, 1635, 1636, 1, 1637, 
	1, 1638, 1, 1, 1, 1, 1, 1, 
	1639, 1640, 1641, 1623, 1642, 1625, 1643, 1644, 
	1645, 1, 1, 1646, 1647, 1648, 1, 1632, 
	1649, 1, 1650, 1, 1651, 1652, 1653, 1654, 
	1, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 
	2041, 2042, 2043, 1, 1, 2044, 2045, 2046, 
	1, 2047, 2048, 1, 2049, 1, 2050, 2051, 
	1, 2052, 1, 2053, 1, 1, 1, 1, 
	1, 1, 2054, 2055, 2056, 2038, 2057, 2040, 
	2058, 2059, 2060, 1, 1, 2061, 2062, 2063, 
	1, 2047, 2064, 1, 2065, 1, 2066, 2067, 
	2068, 2069, 1, 2070, 2070, 2070, 2070, 2070, 
	2070, 2070, 2070, 2070, 2070, 1, 1, 1, 
	1, 1, 1, 1580, 1581, 1582, 1583, 1584, 
	1585, 1586, 1587, 1588, 1589, 1, 1, 1590, 
	1591, 1592, 1, 1593, 1594, 1, 1595, 1, 
	1596, 1597, 1, 1598, 1, 1599, 1, 1, 
	1, 1, 1, 1, 1600, 1601, 1602, 1584, 
	1603, 1586, 1604, 1605, 1606, 1, 1, 1607, 
	1608, 1609, 1, 1593, 1610, 1, 1611, 1, 
	1612, 1613, 1614, 1615, 1, 2071, 2072, 2073, 
	2074, 2075, 2076, 2077, 2078, 2079, 2080, 1, 
	1, 2081, 2082, 2083, 1, 2084, 2085, 1, 
	2086, 1, 2087, 2088, 1, 2089, 1, 2090, 
	1, 1, 1, 1, 1, 1, 2091, 2092, 
	2093, 2075, 2094, 2077, 2095, 2096, 2097, 1, 
	1, 2098, 2099, 2100, 1, 2084, 2101, 1, 
	2102, 1, 2103, 2104, 2105, 2106, 1, 2107, 
	2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 
	2107, 1, 1, 1, 1, 1, 1, 1541, 
	1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 
	1550, 1, 1, 1551, 1552, 1553, 1, 1554, 
	1555, 1, 1556, 1, 1557, 1558, 1, 1559, 
	1, 1560, 1, 1, 1, 1, 1, 1, 
	1561, 1562, 1563, 1545, 1564, 1547, 1565, 1566, 
	1567, 1, 1, 1568, 1569, 1570, 1, 1554, 
	1571, 1, 1572, 1, 1573, 1574, 1575, 1576, 
	1, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 
	2115, 2116, 2117, 1, 1, 2118, 2119, 2120, 
	1, 2121, 2122, 1, 2123, 1, 2124, 2125, 
	1, 2126, 1, 2127, 1, 1, 1, 1, 
	1, 1, 2128, 2129, 2130, 2112, 2131, 2114, 
	2132, 2133, 2134, 1, 1, 2135, 2136, 2137, 
	1, 2121, 2138, 1, 2139, 1, 2140, 2141, 
	2142, 2143, 1, 2144, 2144, 2144, 2144, 2144, 
	2144, 2144, 2144, 2144, 2144, 1, 1, 1, 
	1, 1, 1, 1502, 1503, 1504, 1505, 1506, 
	1507, 1508, 1509, 1510, 1511, 1, 1, 1512, 
	1513, 1514, 1, 1515, 1516, 1, 1517, 1, 
	1518, 1519, 1, 1520, 1, 1521, 1, 1, 
	1, 1, 1, 1, 1522, 1523, 1524, 1506, 
	1525, 1508, 1526, 1527, 1528, 1, 1, 1529, 
	1530, 1531, 1, 1515, 1532, 1, 1533, 1, 
	1534, 1535, 1536, 1537, 1, 2145, 2145, 2145, 
	2145, 2145, 2145, 2145, 2145, 2145, 2145, 1, 
	1, 1, 1, 1, 1, 1389, 1390, 1391, 
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1, 
	1, 1399, 1400, 1401, 1, 1402, 1403, 1, 
	1404, 1, 1405, 1406, 1, 1407, 1, 1408, 
	1, 1, 1, 1, 1, 1, 1409, 1410, 
	1411, 1393, 1412, 1395, 1413, 1414, 1415, 1, 
	1, 1416, 1417, 1418, 1, 1402, 1419, 1, 
	1420, 1, 1421, 1422, 1423, 1424, 1, 2146, 
	2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 
	2146, 1, 1, 1, 1, 1, 1, 1276, 
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 
	1285, 1, 1, 1286, 1287, 1288, 1, 1289, 
	1290, 1, 1291, 1, 1292, 1293, 1, 1294, 
	1, 1295, 1, 1, 1, 1, 1, 1, 
	1296, 1297, 1298, 1280, 1299, 1282, 1300, 1301, 
	1302, 1, 1, 1303, 1304, 1305, 1, 1289, 
	1306, 1, 1307, 1, 1308, 1309, 1310, 1311, 
	1, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 
	2154, 2155, 2156, 1, 1, 2157, 2158, 2159, 
	1, 2160, 2161, 1, 2162, 1, 2163, 2164, 
	1, 2165, 1, 2166, 1, 1, 1, 1, 
	1, 1, 2167, 2168, 2169, 2151, 2170, 2153, 
	2171, 2172, 2173, 1, 1, 2174, 2175, 2176, 
	1, 2160, 2177, 1, 2178, 1, 2179, 2180, 
	2181, 2182, 1, 2183, 2183, 2183, 2183, 2183, 
	2183, 2183, 2183, 2183, 2183, 1, 1, 1, 
	1, 1, 1, 1237, 1238, 1239, 1240, 1241, 
	1242, 1243, 1244, 1245, 1246, 1, 1, 1247, 
	1248, 1249, 1, 1250, 1251, 1, 1252, 1, 
	1253, 1254, 1, 1255, 1, 1256, 1, 1, 
	1, 1, 1, 1, 1257, 1258, 1259, 1241, 
	1260, 1243, 1261, 1262, 1263, 1, 1, 1264, 
	1265, 1266, 1, 1250, 1267, 1, 1268, 1, 
	1269, 1270, 1271, 1272, 1, 2184, 2185, 2186, 
	2187, 2188, 2189, 2190, 2191, 2192, 2193, 1, 
	1, 2194, 2195, 2196, 1, 2197, 2198, 1, 
	2199, 1, 2200, 2201, 1, 2202, 1, 2203, 
	1, 1, 1, 1, 1, 1, 2204, 2205, 
	2206, 2188, 2207, 2190, 2208, 2209, 2210, 1, 
	1, 2211, 2212, 2213, 1, 2197, 2214, 1, 
	2215, 1, 2216, 2217, 2218, 2219, 1, 2220, 
	2220, 2220, 2220, 2220, 2220, 2220, 2220, 2220, 
	2220, 1, 1, 1, 1, 1, 1, 1198, 
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 
	1207, 1, 1, 1208, 1209, 1210, 1, 1211, 
	1212, 1, 1213, 1, 1214, 1215, 1, 1216, 
	1, 1217, 1, 1, 1, 1, 1, 1, 
	1218, 1219, 1220, 1202, 1221, 1204, 1222, 1223, 
	1224, 1, 1, 1225, 1226, 1227, 1, 1211, 
	1228, 1, 1229, 1, 1230, 1231, 1232, 1233, 
	1, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 
	2228, 2229, 2230, 1, 1, 2231, 2232, 2233, 
	1, 2234, 2235, 1, 2236, 1, 2237, 2238, 
	1, 2239, 1, 2240, 1, 1, 1, 1, 
	1, 1, 2241, 2242, 2243, 2225, 2244, 2227, 
	2245, 2246, 2247, 1, 1, 2248, 2249, 2250, 
	1, 2234, 2251, 1, 2252, 1, 2253, 2254, 
	2255, 2256, 1, 2257, 2257, 2257, 2257, 2257, 
	2257, 2257, 2257, 2257, 2257, 1, 1, 1, 
	1, 1, 1, 1159, 1160, 1161, 1162, 1163, 
	1164, 1165, 1166, 1167, 1168, 1, 1, 1169, 
	1170, 1171, 1, 1172, 1173, 1, 1174, 1, 
	1175, 1176, 1, 1177, 1, 1178, 1, 1, 
	1, 1, 1, 1, 1179, 1180, 1181, 1163, 
	1182, 1165, 1183, 1184, 1185, 1, 1, 1186, 
	1187, 1188, 1, 1172, 1189, 1, 1190, 1, 
	1191, 1192, 1193, 1194, 1, 2258, 2259, 2260, 
	2261, 2262, 2263, 2264, 2265, 2266, 2267, 1, 
	1, 2268, 2269, 2270, 1, 2271, 2272, 1, 
	2273, 1, 2274, 2275, 1, 2276, 1, 2277, 
	1, 1, 1, 1, 1, 1, 2278, 2279, 
	2280, 2262, 2281, 2264, 2282, 2283, 2284, 1, 
	1, 2285, 2286, 2287, 1, 2271, 2288, 1, 
	2289, 1, 2290, 2291, 2292, 2293, 1, 2294, 
	2294, 2294, 2294, 2294, 2294, 2294, 2294, 2294, 
	2294, 1, 1, 1, 1, 1, 1, 1120, 
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 
	1129, 1, 1, 1130, 1131, 1132, 1, 1133, 
	1134, 1, 1135, 1, 1136, 1137, 1, 1138, 
	1, 1139, 1, 1, 1, 1, 1, 1, 
	1140, 1141, 1142, 1124, 1143, 1126, 1144, 1145, 
	1146, 1, 1, 1147, 1148, 1149, 1, 1133, 
	1150, 1, 1151, 1, 1152, 1153, 1154, 1155, 
	1, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 
	2302, 2303, 2304, 1, 1, 2305, 2306, 2307, 
	1, 2308, 2309, 1, 2310, 1, 2311, 2312, 
	1, 2313, 1, 2314, 1, 1, 1, 1, 
	1, 1, 2315, 2316, 2317, 2299, 2318, 2301, 
	2319, 2320, 2321, 1, 1, 2322, 2323, 2324, 
	1, 2308, 2325, 1, 2326, 1, 2327, 2328, 
	2329, 2330, 1, 2331, 2331, 2331, 2331, 2331, 
	2331, 2331, 2331, 2331, 2331, 1, 1, 1, 
	1, 1, 1, 1081, 1082, 1083, 1084, 1085, 
	1086, 1087, 1088, 1089, 1090, 1, 1, 1091, 
	1092, 1093, 1, 1094, 1095, 1, 1096, 1, 
	1097, 1098, 1, 1099, 1, 1100, 1, 1, 
	1, 1, 1, 1, 1101, 1102, 1103, 1085, 
	1104, 1087, 1105, 1106, 1107, 1, 1, 1108, 
	1109, 1110, 1, 1094, 1111, 1, 1112, 1, 
	1113, 1114, 1115, 1116, 1, 2332, 2333, 2334, 
	2335, 2336, 2337, 2338, 2339, 2340, 2341, 1, 
	1, 2342, 2343, 2344, 1, 2345, 2346, 1, 
	2347, 1, 2348, 2349, 1, 2350, 1, 2351, 
	1, 1, 1, 1, 1, 1, 2352, 2353, 
	2354, 2336, 2355, 2338, 2356, 2357, 2358, 1, 
	1, 2359, 2360, 2361, 1, 2345, 2362, 1, 
	2363, 1, 2364, 2365, 2366, 2367, 1, 2368, 
	2368, 2368, 2368, 2368, 2368, 2368, 2368, 2368, 
	2368, 1, 1, 1, 1, 1, 1, 1042, 
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 
	1051, 1, 1, 1052, 1053, 1054, 1, 1055, 
	1056, 1, 1057, 1, 1058, 1059, 1, 1060, 
	1, 1061, 1, 1, 1, 1, 1, 1, 
	1062, 1063, 1064, 1046, 1065, 1048, 1066, 1067, 
	1068, 1, 1, 1069, 1070, 1071, 1, 1055, 
	1072, 1, 1073, 1, 1074, 1075, 1076, 1077, 
	1, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 
	2376, 2377, 2378, 1, 1, 2379, 2380, 2381, 
	1, 2382, 2383, 1, 2384, 1, 2385, 2386, 
	1, 2387, 1, 2388, 1, 1, 1, 1, 
	1, 1, 2389, 2390, 2391, 2373, 2392, 2375, 
	2393, 2394, 2395, 1, 1, 2396, 2397, 2398, 
	1, 2382, 2399, 1, 2400, 1, 2401, 2402, 
	2403, 2404, 1, 2405, 2405, 2405, 2405, 2405, 
	2405, 2405, 2405, 2405, 2405, 1, 1, 1, 
	1, 1, 1, 1003, 1004, 1005, 1006, 1007, 
	1008, 1009, 1010, 1011, 1012, 1, 1, 1013, 
	1014, 1015, 1, 1016, 1017, 1, 1018, 1, 
	1019, 1020, 1, 1021, 1, 1022, 1, 1, 
	1, 1, 1, 1, 1023, 1024, 1025, 1007, 
	1026, 1009, 1027, 1028, 1029, 1, 1, 1030, 
	1031, 1032, 1, 1016, 1033, 1, 1034, 1, 
	1035, 1036, 1037, 1038, 1, 2406, 2407, 2408, 
	2409, 2410, 2411, 2412, 2413, 2414, 2415, 1, 
	1, 2416, 2417, 2418, 1, 2419, 2420, 1, 
	2421, 1, 2422, 2423, 1, 2424, 1, 2425, 
	1, 1, 1, 1, 1, 1, 2426, 2427, 
	2428, 2410, 2429, 2412, 2430, 2431, 2432, 1, 
	1, 2433, 2434, 2435, 1, 2419, 2436, 1, 
	2437, 1, 2438, 2439, 2440, 2441, 1, 2442, 
	2442, 2442, 2442, 2442, 2442, 2442, 2442, 2442, 
	2442, 1, 1, 1, 1, 1, 1, 964, 
	965, 966, 967, 968, 969, 970, 971, 972, 
	973, 1, 1, 974, 975, 976, 1, 977, 
	978, 1, 979, 1, 980, 981, 1, 982, 
	1, 983, 1, 1, 1, 1, 1, 1, 
	984, 985, 986, 968, 987, 970, 988, 989, 
	990, 1, 1, 991, 992, 993, 1, 977, 
	994, 1, 995, 1, 996, 997, 998, 999, 
	1, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 
	2450, 2451, 2452, 1, 1, 2453, 2454, 2455, 
	1, 2456, 2457, 1, 2458, 1, 2459, 2460, 
	1, 2461, 1, 2462, 1, 1, 1, 1, 
	1, 1, 2463, 2464, 2465, 2447, 2466, 2449, 
	2467, 2468, 2469, 1, 1, 2470, 2471, 2472, 
	1, 2456, 2473, 1, 2474, 1, 2475, 2476, 
	2477, 2478, 1, 2479, 2479, 2479, 2479, 2479, 
	2479, 2479, 2479, 2479, 2479, 1, 1, 1, 
	1, 1, 1, 925, 926, 927, 928, 929, 
	930, 931, 932, 933, 934, 1, 1, 935, 
	936, 937, 1, 938, 939, 1, 940, 1, 
	941, 942, 1, 943, 1, 944, 1, 1, 
	1, 1, 1, 1, 945, 946, 947, 929, 
	948, 931, 949, 950, 951, 1, 1, 952, 
	953, 954, 1, 938, 955, 1, 956, 1, 
	957, 958, 959, 960, 1, 2480, 2481, 2482, 
	2483, 2484, 2485, 2486, 2487, 2488, 2489, 1, 
	1, 2490, 2491, 2492, 1, 2493, 2494, 1, 
	2495, 1, 2496, 2497, 1, 2498, 1, 2499, 
	1, 1, 1, 1, 1, 1, 2500, 2501, 
	2502, 2484, 2503, 2486, 2504, 2505, 2506, 1, 
	1, 2507, 2508, 2509, 1, 2493, 2510, 1, 
	2511, 1, 2512, 2513, 2514, 2515, 1, 2516, 
	2516, 2516, 2516, 2516, 2516, 2516, 2516, 2516, 
	2516, 1, 1, 1, 1, 1, 1, 886, 
	887, 888, 889, 890, 891, 892, 893, 894, 
	895, 1, 1, 896, 897, 898, 1, 899, 
	900, 1, 901, 1, 902, 903, 1, 904, 
	1, 905, 1, 1, 1, 1, 1, 1, 
	906, 907, 908, 890, 909, 892, 910, 911, 
	912, 1, 1, 913, 914, 915, 1, 899, 
	916, 1, 917, 1, 918, 919, 920, 921, 
	1, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 
	2517, 2517, 2517, 1, 1, 1, 1, 1, 
	1, 773, 774, 775, 776, 777, 778, 779, 
	780, 781, 782, 1, 1, 783, 784, 785, 
	1, 786, 787, 1, 788, 1, 789, 790, 
	1, 791, 1, 792, 1, 1, 1, 1, 
	1, 1, 793, 794, 795, 777, 796, 779, 
	797, 798, 799, 1, 1, 800, 801, 802, 
	1, 786, 803, 1, 804, 1, 805, 806, 
	807, 808, 1, 2518, 2519, 2520, 2521, 2522, 
	2523, 2524, 2525, 2526, 2527, 1, 1, 2528, 
	2529, 2530, 1, 2531, 2532, 1, 2533, 1, 
	2534, 2535, 1, 2536, 1, 2537, 1, 1, 
	1, 1, 1, 1, 2538, 2539, 2540, 2522, 
	2541, 2524, 2542, 2543, 2544, 1, 1, 2545, 
	2546, 2547, 1, 2531, 2548, 1, 2549, 1, 
	2550, 2551, 2552, 2553, 1, 2554, 2554, 2554, 
	2554, 2554, 2554, 2554, 2554, 2554, 2554, 1, 
	1, 1, 1, 1, 1, 734, 735, 736, 
	737, 738, 739, 740, 741, 742, 743, 1, 
	1, 744, 745, 746, 1, 747, 748, 1, 
	749, 1, 750, 751, 1, 752, 1, 753, 
	1, 1, 1, 1, 1, 1, 754, 755, 
	756, 738, 757, 740, 758, 759, 760, 1, 
	1, 761, 762, 763, 1, 747, 764, 1, 
	765, 1, 766, 767, 768, 769, 1, 2555, 
	2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563, 
	2564, 1, 1, 2565, 2566, 2567, 1, 2568, 
	2569, 1, 2570, 1, 2571, 2572, 1, 2573, 
	1, 2574, 1, 1, 1, 1, 1, 1, 
	2575, 2576, 2577, 2559, 2578, 2561, 2579, 2580, 
	2581, 1, 1, 2582, 2583, 2584, 1, 2568, 
	2585, 1, 2586, 1, 2587, 2588, 2589, 2590, 
	1, 2591, 2591, 2591, 2591, 2591, 2591, 2591, 
	2591, 2591, 2591, 1, 1, 1, 1, 1, 
	1, 695, 696, 697, 698, 699, 700, 701, 
	702, 703, 704, 1, 1, 705, 706, 707, 
	1, 708, 709, 1, 710, 1, 711, 712, 
	1, 713, 1, 714, 1, 1, 1, 1, 
	1, 1, 715, 716, 717, 699, 718, 701, 
	719, 720, 721, 1, 1, 722, 723, 724, 
	1, 708, 725, 1, 726, 1, 727, 728, 
	729, 730, 1, 2592, 2593, 2594, 2595, 2596, 
	2597, 2598, 2599, 2600, 2601, 1, 1, 2602, 
	2603, 2604, 1, 2605, 2606, 1, 2607, 1, 
	2608, 2609, 1, 2610, 1, 2611, 1, 1, 
	1, 1, 1, 1, 2612, 2613, 2614, 2596, 
	2615, 2598, 2616, 2617, 2618, 1, 1, 2619, 
	2620, 2621, 1, 2605, 2622, 1, 2623, 1, 
	2624, 2625, 2626, 2627, 1, 2628, 2628, 2628, 
	2628, 2628, 2628, 2628, 2628, 2628, 2628, 1, 
	1, 1, 1, 1, 1, 656, 657, 658, 
	659, 660, 661, 662, 663, 664, 665, 1, 
	1, 666, 667, 668, 1, 669, 670, 1, 
	671, 1, 672, 673, 1, 674, 1, 675, 
	1, 1, 1, 1, 1, 1, 676, 677, 
	678, 660, 679, 662, 680, 681, 682, 1, 
	1, 683, 684, 685, 1, 669, 686, 1, 
	687, 1, 688, 689, 690, 691, 1, 2629, 
	2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 
	2638, 1, 1, 2639, 2640, 2641, 1, 2642, 
	2643, 1, 2644, 1, 2645, 2646, 1, 2647, 
	1, 2648, 1, 1, 1, 1, 1, 1, 
	2649, 2650, 2651, 2633, 2652, 2635, 2653, 2654, 
	2655, 1, 1, 2656, 2657, 2658, 1, 2642, 
	2659, 1, 2660, 1, 2661, 2662, 2663, 2664, 
	1, 2665, 2665, 2665, 2665, 2665, 2665, 2665, 
	2665, 2665, 2665, 1, 1, 1, 1, 1, 
	1, 617, 618, 619, 620, 621, 622, 623, 
	624, 625, 626, 1, 1, 627, 628, 629, 
	1, 630, 631, 1, 632, 1, 633, 634, 
	1, 635, 1, 636, 1, 1, 1, 1, 
	1, 1, 637, 638, 639, 621, 640, 623, 
	641, 642, 643, 1, 1, 644, 645, 646, 
	1, 630, 647, 1, 648, 1, 649, 650, 
	651, 652, 1, 2666, 2666, 2666, 2666, 2666, 
	2666, 2666, 2666, 2666, 2666, 1, 1, 1, 
	1, 1, 1, 504, 505, 506, 507, 508, 
	509, 510, 511, 512, 513, 1, 1, 514, 
	515, 516, 1, 517, 518, 1, 519, 1, 
	520, 521, 1, 522, 1, 523, 1, 1, 
	1, 1, 1, 1, 524, 525, 526, 508, 
	527, 510, 528, 529, 530, 1, 1, 531, 
	532, 533, 1, 517, 534, 1, 535, 1, 
	536, 537, 538, 539, 1, 2667, 2667, 2667, 
	2667, 2667, 2667, 2667, 2667, 2667, 2667, 1, 
	1, 1, 1, 1, 1, 391, 392, 393, 
	394, 395, 396, 397, 398, 399, 400, 1, 
	1, 401, 402, 403, 1, 404, 405, 1, 
	406, 1, 407, 408, 1, 409, 1, 410, 
	1, 1, 1, 1, 1, 1, 411, 412, 
	413, 395, 414, 397, 415, 416, 417, 1, 
	1, 418, 419, 420, 1, 404, 421, 1, 
	422, 1, 423, 424, 425, 426, 1, 2668, 
	2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 
	2677, 1, 1, 2678, 2679, 2680, 1, 2681, 
	2682, 1, 2683, 1, 2684, 2685, 1, 2686, 
	1, 2687, 1, 1, 1, 1, 1, 1, 
	2688, 2689, 2690, 2672, 2691, 2674, 2692, 2693, 
	2694, 1, 1, 2695, 2696, 2697, 1, 2681, 
	2698, 1, 2699, 1, 2700, 2701, 2702, 2703, 
	1, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 
	2704, 2704, 2704, 1, 1, 1, 1, 1, 
	1, 352, 353, 354, 355, 356, 357, 358, 
	359, 360, 361, 1, 1, 362, 363, 364, 
	1, 365, 366, 1, 367, 1, 368, 369, 
	1, 370, 1, 371, 1, 1, 1, 1, 
	1, 1, 372, 373, 374, 356, 375, 358, 
	376, 377, 378, 1, 1, 379, 380, 381, 
	1, 365, 382, 1, 383, 1, 384, 385, 
	386, 387, 1, 2705, 2706, 2707, 2708, 2709, 
	2710, 2711, 2712, 2713, 2714, 1, 1, 2715, 
	2716, 2717, 1, 2718, 2719, 1, 2720, 1, 
	2721, 2722, 1, 2723, 1, 2724, 1, 1, 
	1, 1, 1, 1, 2725, 2726, 2727, 2709, 
	2728, 2711, 2729, 2730, 2731, 1, 1, 2732, 
	2733, 2734, 1, 2718, 2735, 1, 2736, 1, 
	2737, 2738, 2739, 2740, 1, 2741, 2741, 2741, 
	2741, 2741, 2741, 2741, 2741, 2741, 2741, 1, 
	1, 1, 1, 1, 1, 313, 314, 315, 
	316, 317, 318, 319, 320, 321, 322, 1, 
	1, 323, 324, 325, 1, 326, 327, 1, 
	328, 1, 329, 330, 1, 331, 1, 332, 
	1, 1, 1, 1, 1, 1, 333, 334, 
	335, 317, 336, 319, 337, 338, 339, 1, 
	1, 340, 341, 342, 1, 326, 343, 1, 
	344, 1, 345, 346, 347, 348, 1, 2742, 
	2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 
	2751, 1, 1, 2752, 2753, 2754, 1, 2755, 
	2756, 1, 2757, 1, 2758, 2759, 1, 2760, 
	1, 2761, 1, 1, 1, 1, 1, 1, 
	2762, 2763, 2764, 2746, 2765, 2748, 2766, 2767, 
	2768, 1, 1, 2769, 2770, 2771, 1, 2755, 
	2772, 1, 2773, 1, 2774, 2775, 2776, 2777, 
	1, 2778, 2778, 2778, 2778, 2778, 2778, 2778, 
	2778, 2778, 2778, 1, 1, 1, 1, 1, 
	1, 274, 275, 276, 277, 278, 279, 280, 
	281, 282, 283, 1, 1, 284, 285, 286, 
	1, 287, 288, 1, 289, 1, 290, 291, 
	1, 292, 1, 293, 1, 1, 1, 1, 
	1, 1, 294, 295, 296, 278, 297, 280, 
	298, 299, 300, 1, 1, 301, 302, 303, 
	1, 287, 304, 1, 305, 1, 306, 307, 
	308, 309, 1, 2779, 2780, 2781, 2782, 2783, 
	2784, 2785, 2786, 2787, 2788, 1, 1, 2789, 
	2790, 2791, 1, 2792, 2793, 1, 2794, 1, 
	2795, 2796, 1, 2797, 1, 2798, 1, 1, 
	1, 1, 1, 1, 2799, 2800, 2801, 2783, 
	2802, 2785, 2803, 2804, 2805, 1, 1, 2806, 
	2807, 2808, 1, 2792, 2809, 1, 2810, 1, 
	2811, 2812, 2813, 2814, 1, 2815, 2815, 2815, 
	2815, 2815, 2815, 2815, 2815, 2815, 2815, 1, 
	1, 1, 1, 1, 1, 235, 236, 237, 
	238, 239, 240, 241, 242, 243, 244, 1, 
	1, 245, 246, 247, 1, 248, 249, 1, 
	250, 1, 251, 252, 1, 253, 1, 254, 
	1, 1, 1, 1, 1, 1, 255, 256, 
	257, 239, 258, 241, 259, 260, 261, 1, 
	1, 262, 263, 264, 1, 248, 265, 1, 
	266, 1, 267, 268, 269, 270, 1, 2816, 
	2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 
	2825, 1, 1, 2826, 2827, 2828, 1, 2829, 
	2830, 1, 2831, 1, 2832, 2833, 1, 2834, 
	1, 2835, 1, 1, 1, 1, 1, 1, 
	2836, 2837, 2838, 2820, 2839, 2822, 2840, 2841, 
	2842, 1, 1, 2843, 2844, 2845, 1, 2829, 
	2846, 1, 2847, 1, 2848, 2849, 2850, 2851, 
	1, 2852, 2852, 2852, 2852, 2852, 2852, 2852, 
	2852, 2852, 2852, 1, 1, 1, 1, 1, 
	1, 196, 197, 198, 199, 200, 201, 202, 
	203, 204, 205, 1, 1, 206, 207, 208, 
	1, 209, 210, 1, 211, 1, 212, 213, 
	1, 214, 1, 215, 1, 1, 1, 1, 
	1, 1, 216, 217, 218, 200, 219, 202, 
	220, 221, 222, 1, 1, 223, 224, 225, 
	1, 209, 226, 1, 227, 1, 228, 229, 
	230, 231, 1, 2853, 2854, 2855, 2856, 2857, 
	2858, 2859, 2860, 2861, 2862, 1, 1, 2863, 
	2864, 2865, 1, 2866, 2867, 1, 2868, 1, 
	2869, 2870, 1, 2871, 1, 2872, 1, 1, 
	1, 1, 1, 1, 2873, 2874, 2875, 2857, 
	2876, 2859, 2877, 2878, 2879, 1, 1, 2880, 
	2881, 2882, 1, 2866, 2883, 1, 2884, 1, 
	2885, 2886, 2887, 2888, 1, 2889, 2889, 2889, 
	2889, 2889, 2889, 2889, 2889, 2889, 2889, 1, 
	1, 1, 1, 1, 1, 157, 158, 159, 
	160, 161, 162, 163, 164, 165, 166, 1, 
	1, 167, 168, 169, 1, 170, 171, 1, 
	172, 1, 173, 174, 1, 175, 1, 176, 
	1, 1, 1, 1, 1, 1, 177, 178, 
	179, 161, 180, 163, 181, 182, 183, 1, 
	1, 184, 185, 186, 1, 170, 187, 1, 
	188, 1, 189, 190, 191, 192, 1, 2890, 
	2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 
	2899, 1, 1, 2900, 2901, 2902, 1, 2903, 
	2904, 1, 2905, 1, 2906, 2907, 1, 2908, 
	1, 2909, 1, 1, 1, 1, 1, 1, 
	2910, 2911, 2912, 2894, 2913, 2896, 2914, 2915, 
	2916, 1, 1, 2917, 2918, 2919, 1, 2903, 
	2920, 1, 2921, 1, 2922, 2923, 2924, 2925, 
	1, 2926, 2926, 2926, 2926, 2926, 2926, 2926, 
	2926, 2926, 2926, 1, 1, 1, 1, 1, 
	1, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 1, 1, 128, 129, 130, 
	1, 131, 132, 1, 133, 1, 134, 135, 
	1, 136, 1, 137, 1, 1, 1, 1, 
	1, 1, 138, 139, 140, 122, 141, 124, 
	142, 143, 144, 1, 1, 145, 146, 147, 
	1, 131, 148, 1, 149, 1, 150, 151, 
	152, 153, 1, 2927, 2928, 2929, 2930, 2931, 
	2932, 2933, 2934, 2935, 2936, 1, 1, 2937, 
	2938, 2939, 1, 2940, 2941, 1, 2942, 1, 
	2943, 2944, 1, 2945, 1, 2946, 1, 1, 
	1, 1, 1, 1, 2947, 2948, 2949, 2931, 
	2950, 2933, 2951, 2952, 2953, 1, 1, 2954, 
	2955, 2956, 1, 2940, 2957, 1, 2958, 1, 
	2959, 2960, 2961, 2962, 1, 2963, 2963, 2963, 
	2963, 2963, 2963, 2963, 2963, 2963, 2963, 1, 
	1, 1, 1, 1, 1, 79, 80, 81, 
	82, 83, 84, 85, 86, 87, 88, 1, 
	1, 89, 90, 91, 1, 92, 93, 1, 
	94, 1, 95, 96, 1, 97, 1, 98, 
	1, 1, 1, 1, 1, 1, 99, 100, 
	101, 83, 102, 85, 103, 104, 105, 1, 
	1, 106, 107, 108, 1, 92, 109, 1, 
	110, 1, 111, 112, 113, 114, 1, 2964, 
	2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 
	2973, 1, 1, 2974, 2975, 2976, 1, 2977, 
	2978, 1, 2979, 1, 2980, 2981, 1, 2982, 
	1, 2983, 1, 1, 1, 1, 1, 1, 
	2984, 2985, 2986, 2968, 2987, 2970, 2988, 2989, 
	2990, 1, 1, 2991, 2992, 2993, 1, 2977, 
	2994, 1, 2995, 1, 2996, 2997, 2998, 2999, 
	1, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 
	3000, 3000, 3000, 1, 1, 1, 1, 1, 
	1, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 1, 1, 50, 51, 52, 
	1, 53, 54, 1, 55, 1, 56, 57, 
	1, 58, 1, 59, 1, 1, 1, 1, 
	1, 1, 60, 61, 62, 44, 63, 46, 
	64, 65, 66, 1, 1, 67, 68, 69, 
	1, 53, 70, 1, 71, 1, 72, 73, 
	74, 75, 1, 0
};

static const unsigned char _trans_targs[] = {
	2, 0, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 60, 63, 65, 67, 
	69, 72, 74, 76, 78, 3, 144, 145, 
	2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 23, 26, 28, 30, 32, 34, 
	37, 39, 41, 43, 45, 47, 49, 51, 
	53, 55, 57, 60, 63, 65, 67, 69, 
	72, 74, 76, 78, 5, 142, 143, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 60, 63, 65, 67, 69, 72, 
	74, 76, 78, 7, 140, 141, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 
	23, 26, 28, 30, 32, 34, 37, 39, 
	41, 43, 45, 47, 49, 51, 53, 55, 
	57, 60, 63, 65, 67, 69, 72, 74, 
	76, 78, 9, 138, 139, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	60, 63, 65, 67, 69, 72, 74, 76, 
	78, 11, 136, 137, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 60, 
	63, 65, 67, 69, 72, 74, 76, 78, 
	13, 134, 135, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 60, 63, 
	65, 67, 69, 72, 74, 76, 78, 15, 
	132, 133, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 60, 63, 65, 
	67, 69, 72, 74, 76, 78, 17, 130, 
	131, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 60, 63, 65, 67, 
	69, 72, 74, 76, 78, 19, 128, 129, 
	2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 23, 26, 28, 30, 32, 34, 
	37, 39, 41, 43, 45, 47, 49, 51, 
	53, 55, 57, 60, 63, 65, 67, 69, 
	72, 74, 76, 78, 21, 22, 127, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 60, 63, 65, 67, 69, 72, 
	74, 76, 78, 22, 127, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	60, 63, 65, 67, 69, 72, 74, 76, 
	78, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 60, 63, 65, 67, 
	69, 72, 74, 76, 78, 24, 25, 126, 
	2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 23, 26, 28, 30, 32, 34, 
	37, 39, 41, 43, 45, 47, 49, 51, 
	53, 55, 57, 60, 63, 65, 67, 69, 
	72, 74, 76, 78, 25, 126, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 
	23, 26, 28, 30, 32, 34, 37, 39, 
	41, 43, 45, 47, 49, 51, 53, 55, 
	57, 60, 63, 65, 67, 69, 72, 74, 
	76, 78, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 60, 63, 65, 
	67, 69, 72, 74, 76, 78, 27, 124, 
	125, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 60, 63, 65, 67, 
	69, 72, 74, 76, 78, 29, 122, 123, 
	2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 23, 26, 28, 30, 32, 34, 
	37, 39, 41, 43, 45, 47, 49, 51, 
	53, 55, 57, 60, 63, 65, 67, 69, 
	72, 74, 76, 78, 31, 120, 121, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 60, 63, 65, 67, 69, 72, 
	74, 76, 78, 33, 118, 119, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 
	23, 26, 28, 30, 32, 34, 37, 39, 
	41, 43, 45, 47, 49, 51, 53, 55, 
	57, 60, 63, 65, 67, 69, 72, 74, 
	76, 78, 35, 36, 117, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	60, 63, 65, 67, 69, 72, 74, 76, 
	78, 36, 117, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 60, 63, 
	65, 67, 69, 72, 74, 76, 78, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 60, 63, 65, 67, 69, 72, 
	74, 76, 78, 38, 115, 116, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 
	23, 26, 28, 30, 32, 34, 37, 39, 
	41, 43, 45, 47, 49, 51, 53, 55, 
	57, 60, 63, 65, 67, 69, 72, 74, 
	76, 78, 40, 113, 114, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	60, 63, 65, 67, 69, 72, 74, 76, 
	78, 42, 111, 112, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 60, 
	63, 65, 67, 69, 72, 74, 76, 78, 
	44, 109, 110, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 60, 63, 
	65, 67, 69, 72, 74, 76, 78, 46, 
	107, 108, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 60, 63, 65, 
	67, 69, 72, 74, 76, 78, 48, 105, 
	106, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 60, 63, 65, 67, 
	69, 72, 74, 76, 78, 50, 103, 104, 
	2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 23, 26, 28, 30, 32, 34, 
	37, 39, 41, 43, 45, 47, 49, 51, 
	53, 55, 57, 60, 63, 65, 67, 69, 
	72, 74, 76, 78, 52, 101, 102, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 60, 63, 65, 67, 69, 72, 
	74, 76, 78, 54, 99, 100, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 
	23, 26, 28, 30, 32, 34, 37, 39, 
	41, 43, 45, 47, 49, 51, 53, 55, 
	57, 60, 63, 65, 67, 69, 72, 74, 
	76, 78, 56, 97, 98, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	60, 63, 65, 67, 69, 72, 74, 76, 
	78, 58, 59, 96, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 60, 
	63, 65, 67, 69, 72, 74, 76, 78, 
	59, 96, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 60, 63, 65, 
	67, 69, 72, 74, 76, 78, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 
	23, 26, 28, 30, 32, 34, 37, 39, 
	41, 43, 45, 47, 49, 51, 53, 55, 
	57, 60, 63, 65, 67, 69, 72, 74, 
	76, 78, 61, 62, 95, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	60, 63, 65, 67, 69, 72, 74, 76, 
	78, 62, 95, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 60, 63, 
	65, 67, 69, 72, 74, 76, 78, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 60, 63, 65, 67, 69, 72, 
	74, 76, 78, 64, 93, 94, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 
	23, 26, 28, 30, 32, 34, 37, 39, 
	41, 43, 45, 47, 49, 51, 53, 55, 
	57, 60, 63, 65, 67, 69, 72, 74, 
	76, 78, 66, 91, 92, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	60, 63, 65, 67, 69, 72, 74, 76, 
	78, 68, 89, 90, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 60, 
	63, 65, 67, 69, 72, 74, 76, 78, 
	70, 71, 88, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 60, 63, 
	65, 67, 69, 72, 74, 76, 78, 71, 
	88, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 60, 63, 65, 67, 
	69, 72, 74, 76, 78, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	60, 63, 65, 67, 69, 72, 74, 76, 
	78, 73, 86, 87, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 60, 
	63, 65, 67, 69, 72, 74, 76, 78, 
	75, 84, 85, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 60, 63, 
	65, 67, 69, 72, 74, 76, 78, 77, 
	82, 83, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 60, 63, 65, 
	67, 69, 72, 74, 76, 78, 79, 80, 
	81, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 60, 63, 65, 67, 
	69, 72, 74, 76, 78, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	60, 63, 65, 67, 69, 72, 74, 76, 
	78, 81, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 60, 63, 65, 
	67, 69, 72, 74, 76, 78, 83, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 60, 63, 65, 67, 69, 72, 
	74, 76, 78, 85, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 60, 
	63, 65, 67, 69, 72, 74, 76, 78, 
	87, 88, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 60, 63, 65, 
	67, 69, 72, 74, 76, 78, 90, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 60, 63, 65, 67, 69, 72, 
	74, 76, 78, 92, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 60, 
	63, 65, 67, 69, 72, 74, 76, 78, 
	94, 95, 96, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 60, 63, 
	65, 67, 69, 72, 74, 76, 78, 98, 
	2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 23, 26, 28, 30, 32, 34, 
	37, 39, 41, 43, 45, 47, 49, 51, 
	53, 55, 57, 60, 63, 65, 67, 69, 
	72, 74, 76, 78, 100, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	60, 63, 65, 67, 69, 72, 74, 76, 
	78, 102, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 60, 63, 65, 
	67, 69, 72, 74, 76, 78, 104, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 60, 63, 65, 67, 69, 72, 
	74, 76, 78, 106, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 60, 
	63, 65, 67, 69, 72, 74, 76, 78, 
	108, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 60, 63, 65, 67, 
	69, 72, 74, 76, 78, 110, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 
	23, 26, 28, 30, 32, 34, 37, 39, 
	41, 43, 45, 47, 49, 51, 53, 55, 
	57, 60, 63, 65, 67, 69, 72, 74, 
	76, 78, 112, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 60, 63, 
	65, 67, 69, 72, 74, 76, 78, 114, 
	2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 23, 26, 28, 30, 32, 34, 
	37, 39, 41, 43, 45, 47, 49, 51, 
	53, 55, 57, 60, 63, 65, 67, 69, 
	72, 74, 76, 78, 116, 117, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 
	23, 26, 28, 30, 32, 34, 37, 39, 
	41, 43, 45, 47, 49, 51, 53, 55, 
	57, 60, 63, 65, 67, 69, 72, 74, 
	76, 78, 119, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 60, 63, 
	65, 67, 69, 72, 74, 76, 78, 121, 
	2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 23, 26, 28, 30, 32, 34, 
	37, 39, 41, 43, 45, 47, 49, 51, 
	53, 55, 57, 60, 63, 65, 67, 69, 
	72, 74, 76, 78, 123, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	60, 63, 65, 67, 69, 72, 74, 76, 
	78, 125, 126, 127, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 60, 
	63, 65, 67, 69, 72, 74, 76, 78, 
	129, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 26, 28, 30, 32, 
	34, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 60, 63, 65, 67, 
	69, 72, 74, 76, 78, 131, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 
	23, 26, 28, 30, 32, 34, 37, 39, 
	41, 43, 45, 47, 49, 51, 53, 55, 
	57, 60, 63, 65, 67, 69, 72, 74, 
	76, 78, 133, 2, 4, 6, 8, 10, 
	12, 14, 16, 18, 20, 23, 26, 28, 
	30, 32, 34, 37, 39, 41, 43, 45, 
	47, 49, 51, 53, 55, 57, 60, 63, 
	65, 67, 69, 72, 74, 76, 78, 135, 
	2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 23, 26, 28, 30, 32, 34, 
	37, 39, 41, 43, 45, 47, 49, 51, 
	53, 55, 57, 60, 63, 65, 67, 69, 
	72, 74, 76, 78, 137, 2, 4, 6, 
	8, 10, 12, 14, 16, 18, 20, 23, 
	26, 28, 30, 32, 34, 37, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	60, 63, 65, 67, 69, 72, 74, 76, 
	78, 139, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 23, 26, 28, 30, 
	32, 34, 37, 39, 41, 43, 45, 47, 
	49, 51, 53, 55, 57, 60, 63, 65, 
	67, 69, 72, 74, 76, 78, 141, 2, 
	4, 6, 8, 10, 12, 14, 16, 18, 
	20, 23, 26, 28, 30, 32, 34, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	55, 57, 60, 63, 65, 67, 69, 72, 
	74, 76, 78, 143, 2, 4, 6, 8, 
	10, 12, 14, 16, 18, 20, 23, 26, 
	28, 30, 32, 34, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 60, 
	63, 65, 67, 69, 72, 74, 76, 78, 
	145
};

static const unsigned char _trans_actions[] = {
	2, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 5, 0, 6, 
	7, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 5, 0, 6, 10, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 5, 0, 6, 13, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 5, 0, 6, 16, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 5, 0, 6, 19, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	5, 0, 6, 22, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 5, 
	0, 6, 25, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 5, 0, 
	6, 28, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 5, 0, 6, 
	31, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 0, 0, 6, 34, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 37, 38, 39, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 42, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 0, 0, 6, 
	45, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 37, 38, 48, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 51, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 5, 0, 
	6, 54, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 5, 0, 6, 
	57, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 5, 0, 6, 60, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 5, 0, 6, 63, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 0, 0, 6, 66, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 37, 38, 69, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 72, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 5, 0, 6, 75, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 5, 0, 6, 78, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 5, 0, 6, 81, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	5, 0, 6, 84, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 5, 
	0, 6, 87, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 5, 0, 
	6, 90, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 5, 0, 6, 
	93, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 5, 0, 6, 96, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 5, 0, 6, 99, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 5, 0, 6, 102, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 0, 0, 6, 105, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	37, 38, 108, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 111, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 0, 0, 6, 114, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 37, 38, 117, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 120, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 5, 0, 6, 123, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 5, 0, 6, 126, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 5, 0, 6, 129, 130, 130, 130, 
	130, 130, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 130, 130, 130, 130, 
	0, 0, 6, 132, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 37, 
	38, 135, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 138, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 5, 0, 6, 141, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	5, 0, 6, 144, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 5, 
	0, 6, 147, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 5, 0, 
	6, 150, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 153, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 155, 157, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 155, 160, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 155, 163, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	155, 155, 166, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 155, 169, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 155, 172, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	155, 155, 155, 175, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 155, 
	178, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 155, 181, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 155, 184, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 155, 187, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 155, 190, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	155, 193, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 155, 196, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 155, 199, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 155, 
	202, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 155, 155, 205, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 155, 208, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 155, 
	211, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 155, 214, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 155, 155, 155, 217, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	155, 220, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 155, 223, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 155, 226, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 155, 
	229, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 155, 232, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 155, 235, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 155, 238, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 155, 241, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	155
};

static const unsigned char _eof_actions[] = {
	0, 1, 4, 4, 9, 9, 12, 12, 
	15, 15, 18, 18, 21, 21, 24, 24, 
	27, 27, 30, 30, 33, 36, 41, 44, 
	47, 50, 53, 53, 56, 56, 59, 59, 
	62, 62, 65, 68, 71, 74, 74, 77, 
	77, 80, 80, 83, 83, 86, 86, 89, 
	89, 92, 92, 95, 95, 98, 98, 101, 
	101, 104, 107, 110, 113, 116, 119, 122, 
	122, 125, 125, 128, 128, 131, 134, 137, 
	140, 140, 143, 143, 146, 146, 149, 149, 
	152, 149, 156, 146, 159, 143, 162, 140, 
	131, 165, 128, 168, 125, 171, 122, 113, 
	104, 174, 101, 177, 98, 180, 95, 183, 
	92, 186, 89, 189, 86, 192, 83, 195, 
	80, 198, 77, 201, 74, 65, 204, 62, 
	207, 59, 210, 56, 213, 53, 44, 33, 
	216, 30, 219, 27, 222, 24, 225, 21, 
	228, 18, 231, 15, 234, 12, 237, 9, 
	240, 4
};

static const int start = 1;

static const int en_main = 1;


	{
	cs = start;
	}

	{
	int _slen;
	int _trans;
	const char *_keys;
	const short *_inds;
	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _trans_keys + (cs<<1);
	_inds = _indicies + _index_offsets[cs];

	_slen = _key_spans[cs];
	_trans = _inds[ _slen > 0 && _keys[0] <=(*p) &&
		(*p) <= _keys[1] ?
		(*p) - _keys[0] : _slen ];

	cs = _trans_targs[_trans];

	if ( _trans_actions[_trans] == 0 )
		goto _again;

	switch ( _trans_actions[_trans] ) {
	case 3:
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 6:
	{
    count = (*p) - '0';
  }
	break;
	case 155:
	{
    count = count * 10 + ((*p) - '0');
  }
	break;
	case 37:
	{
    platform = true;
  }
	break;
	case 5:
	{
    unpack18::non_native_error(state, *p);
  }
	break;
	case 2:
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 38:
	{
    platform = true;
  }
	{
    count = (*p) - '0';
  }
	break;
	case 82:
	{
    if(rest) count = bytes_size - index;
    index -= count;
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 151:
	{
    if(rest) {
      index = bytes_size;
    } else {
      index += count;
    }
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 8:
	{
    if(!rest) {
      index = count;
    }
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 197:
	{
    count = 0;
    rest = true;
  }
	{
    if(rest) count = bytes_size - index;
    index -= count;
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 154:
	{
    count = 0;
    rest = true;
  }
	{
    if(rest) {
      index = bytes_size;
    } else {
      index += count;
    }
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 242:
	{
    count = 0;
    rest = true;
  }
	{
    if(!rest) {
      index = count;
    }
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 81:
	{
    if(rest) count = bytes_size - index;
    index -= count;
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 150:
	{
    if(rest) {
      index = bytes_size;
    } else {
      index += count;
    }
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 7:
	{
    if(!rest) {
      index = count;
    }
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 196:
	{
    count = 0;
    rest = true;
  }
	{
    if(rest) count = bytes_size - index;
    index -= count;
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 153:
	{
    count = 0;
    rest = true;
  }
	{
    if(rest) {
      index = bytes_size;
    } else {
      index += count;
    }
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 241:
	{
    count = 0;
    rest = true;
  }
	{
    if(!rest) {
      index = count;
    }
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 17:
	{
    width = 1;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(ubyte);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 94:
	{
    width = 1;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(sbyte);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 67:
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 133:
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 127:
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes_be);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 145:
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes_le);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 35:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 106:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 58:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes_be);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 79:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes_le);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 97:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float_le;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 26:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 100:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float_be;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 64:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u8bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 130:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s8bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 20:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 23:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double_le;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 29:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double_be;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 46:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(u4bytes);
#else
      unpack_integer(u8bytes);
#endif
    } else {
      unpack_integer(u4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 115:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(s4bytes);
#else
      unpack_integer(s8bytes);
#endif
    } else {
      unpack_integer(s4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 61:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    for(; index < stop; index += RBX_SIZEOF_LONG) {
      array->append(state, cNil);
      if(count > 0) count--;
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 233:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(ubyte);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 185:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(sbyte);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 73:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 139:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 170:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes_be);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 161:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes_le);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 43:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 112:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 212:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes_be);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 200:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes_le);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 182:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float_le;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 224:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 179:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float_be;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 206:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u8bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 167:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s8bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 230:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 227:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double_le;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 221:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double_be;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 52:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(u4bytes);
#else
      unpack_integer(u8bytes);
#endif
    } else {
      unpack_integer(u4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 121:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(s4bytes);
#else
      unpack_integer(s8bytes);
#endif
    } else {
      unpack_integer(s4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 209:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    for(; index < stop; index += RBX_SIZEOF_LONG) {
      array->append(state, cNil);
      if(count > 0) count--;
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 70:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 136:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 40:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 109:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 49:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(u4bytes);
#else
      unpack_integer(u8bytes);
#endif
    } else {
      unpack_integer(u4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 118:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(s4bytes);
#else
      unpack_integer(s8bytes);
#endif
    } else {
      unpack_integer(s4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 16:
	{
    width = 1;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(ubyte);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 93:
	{
    width = 1;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(sbyte);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 66:
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 132:
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 126:
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes_be);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 144:
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes_le);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 34:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 105:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 57:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes_be);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 78:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes_le);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 96:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float_le;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 25:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 99:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float_be;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 63:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u8bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 129:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s8bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 19:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 22:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double_le;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 28:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double_be;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 45:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(u4bytes);
#else
      unpack_integer(u8bytes);
#endif
    } else {
      unpack_integer(u4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 114:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(s4bytes);
#else
      unpack_integer(s8bytes);
#endif
    } else {
      unpack_integer(s4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 60:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    for(; index < stop; index += RBX_SIZEOF_LONG) {
      array->append(state, cNil);
      if(count > 0) count--;
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 76:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest) {
      count = remainder;
    } else if(count > remainder) {
      count = remainder;
    }
  }
	{
    unpack18::utf8_decode(state, array, bytes, bytes_end, count, index);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 148:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest) {
      count = remainder;
    } else if(count > remainder) {
      count = remainder;
    }
  }
	{
    unpack18::ber_decode(state, array, bytes, bytes_end, count, index);
    index = bytes - (const char*)self->byte_address();
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 55:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::quotable_printable(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 124:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::base64_decode(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 142:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::uu_decode(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 11:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    String* string;

    if(count > 0) {
      native_int i;
      for(i = count; i > 0; i--) {
        uint8_t c = bytes[i-1];
        if(c != ' ' && c != '\0')
          break;
      }
      string = String::create(state, bytes, i);
    } else {
      string = String::create(state, "");
    }

    array->append(state, string);
    unpack18::increment(index, count, bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 88:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, String::create(state, bytes, count));

    unpack18::increment(index, count, bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 85:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    native_int c;
    for(c = 0; c < count; c++) {
      if(bytes[c] == '\0') break;
    }
    array->append(state, String::create(state, bytes, c));

    if(rest) {
      unpack18::increment(index, c < count ? c + 1 : count, bytes_size);
    } else {
      unpack18::increment(index, count, bytes_size);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 232:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(ubyte);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 184:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(sbyte);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 72:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 138:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 169:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes_be);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 160:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes_le);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 42:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 111:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 211:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes_be);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 199:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes_le);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 181:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float_le;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 223:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 178:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float_be;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 205:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u8bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 166:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s8bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 229:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 226:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double_le;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 220:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double_be;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 51:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(u4bytes);
#else
      unpack_integer(u8bytes);
#endif
    } else {
      unpack_integer(u4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 120:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(s4bytes);
#else
      unpack_integer(s8bytes);
#endif
    } else {
      unpack_integer(s4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 208:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    for(; index < stop; index += RBX_SIZEOF_LONG) {
      array->append(state, cNil);
      if(count > 0) count--;
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 203:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest) {
      count = remainder;
    } else if(count > remainder) {
      count = remainder;
    }
  }
	{
    unpack18::utf8_decode(state, array, bytes, bytes_end, count, index);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 158:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest) {
      count = remainder;
    } else if(count > remainder) {
      count = remainder;
    }
  }
	{
    unpack18::ber_decode(state, array, bytes, bytes_end, count, index);
    index = bytes - (const char*)self->byte_address();
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 215:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::quotable_printable(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 173:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::base64_decode(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 164:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::uu_decode(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 239:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    String* string;

    if(count > 0) {
      native_int i;
      for(i = count; i > 0; i--) {
        uint8_t c = bytes[i-1];
        if(c != ' ' && c != '\0')
          break;
      }
      string = String::create(state, bytes, i);
    } else {
      string = String::create(state, "");
    }

    array->append(state, string);
    unpack18::increment(index, count, bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 191:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, String::create(state, bytes, count));

    unpack18::increment(index, count, bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 194:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    native_int c;
    for(c = 0; c < count; c++) {
      if(bytes[c] == '\0') break;
    }
    array->append(state, String::create(state, bytes, c));

    if(rest) {
      unpack18::increment(index, c < count ? c + 1 : count, bytes_size);
    } else {
      unpack18::increment(index, count, bytes_size);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 69:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 135:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 39:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 108:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 48:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(u4bytes);
#else
      unpack_integer(u8bytes);
#endif
    } else {
      unpack_integer(u4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 117:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(s4bytes);
#else
      unpack_integer(s8bytes);
#endif
    } else {
      unpack_integer(s4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 75:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest) {
      count = remainder;
    } else if(count > remainder) {
      count = remainder;
    }
  }
	{
    unpack18::utf8_decode(state, array, bytes, bytes_end, count, index);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 147:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest) {
      count = remainder;
    } else if(count > remainder) {
      count = remainder;
    }
  }
	{
    unpack18::ber_decode(state, array, bytes, bytes_end, count, index);
    index = bytes - (const char*)self->byte_address();
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 54:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::quotable_printable(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 123:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::base64_decode(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 141:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::uu_decode(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 10:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    String* string;

    if(count > 0) {
      native_int i;
      for(i = count; i > 0; i--) {
        uint8_t c = bytes[i-1];
        if(c != ' ' && c != '\0')
          break;
      }
      string = String::create(state, bytes, i);
    } else {
      string = String::create(state, "");
    }

    array->append(state, string);
    unpack18::increment(index, count, bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 87:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, String::create(state, bytes, count));

    unpack18::increment(index, count, bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 84:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    native_int c;
    for(c = 0; c < count; c++) {
      if(bytes[c] == '\0') break;
    }
    array->append(state, String::create(state, bytes, c));

    if(rest) {
      unpack18::increment(index, c < count ? c + 1 : count, bytes_size);
    } else {
      unpack18::increment(index, count, bytes_size);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 14:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 8;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::bit_high(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 91:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 8;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::bit_low(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 32:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 2;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::hex_high(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 103:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 2;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::hex_low(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 202:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest) {
      count = remainder;
    } else if(count > remainder) {
      count = remainder;
    }
  }
	{
    unpack18::utf8_decode(state, array, bytes, bytes_end, count, index);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 157:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest) {
      count = remainder;
    } else if(count > remainder) {
      count = remainder;
    }
  }
	{
    unpack18::ber_decode(state, array, bytes, bytes_end, count, index);
    index = bytes - (const char*)self->byte_address();
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 214:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::quotable_printable(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 172:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::base64_decode(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 163:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::uu_decode(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 238:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    String* string;

    if(count > 0) {
      native_int i;
      for(i = count; i > 0; i--) {
        uint8_t c = bytes[i-1];
        if(c != ' ' && c != '\0')
          break;
      }
      string = String::create(state, bytes, i);
    } else {
      string = String::create(state, "");
    }

    array->append(state, string);
    unpack18::increment(index, count, bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 190:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, String::create(state, bytes, count));

    unpack18::increment(index, count, bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 193:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    native_int c;
    for(c = 0; c < count; c++) {
      if(bytes[c] == '\0') break;
    }
    array->append(state, String::create(state, bytes, c));

    if(rest) {
      unpack18::increment(index, c < count ? c + 1 : count, bytes_size);
    } else {
      unpack18::increment(index, count, bytes_size);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 236:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 8;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::bit_high(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 188:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 8;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::bit_low(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 218:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 2;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::hex_high(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 176:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 2;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::hex_low(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	break;
	case 13:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 8;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::bit_high(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 90:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 8;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::bit_low(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 31:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 2;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::hex_high(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 102:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 2;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::hex_low(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 235:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 8;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::bit_high(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 187:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 8;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::bit_low(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 217:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 2;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::hex_high(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	case 175:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 2;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::hex_low(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	break;
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	switch ( _eof_actions[cs] ) {
	case 1:
	{
    return array;
  }
	break;
	case 80:
	{
    if(rest) count = bytes_size - index;
    index -= count;
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    return array;
  }
	break;
	case 149:
	{
    if(rest) {
      index = bytes_size;
    } else {
      index += count;
    }
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    return array;
  }
	break;
	case 4:
	{
    if(!rest) {
      index = count;
    }
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    return array;
  }
	break;
	case 195:
	{
    count = 0;
    rest = true;
  }
	{
    if(rest) count = bytes_size - index;
    index -= count;
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    return array;
  }
	break;
	case 152:
	{
    count = 0;
    rest = true;
  }
	{
    if(rest) {
      index = bytes_size;
    } else {
      index += count;
    }
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    return array;
  }
	break;
	case 240:
	{
    count = 0;
    rest = true;
  }
	{
    if(!rest) {
      index = count;
    }
  }
	{
    if(index < 0 || index > bytes_size) {
      unpack18::outside_of_string(state, *p);
    }
  }
	{
    return array;
  }
	break;
	case 15:
	{
    width = 1;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(ubyte);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 92:
	{
    width = 1;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(sbyte);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 65:
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 131:
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 125:
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes_be);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 143:
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes_le);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 33:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 104:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 56:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes_be);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 77:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes_le);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 95:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float_le;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 24:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 98:
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float_be;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 62:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u8bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 128:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s8bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 18:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 21:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double_le;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 27:
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double_be;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 44:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(u4bytes);
#else
      unpack_integer(u8bytes);
#endif
    } else {
      unpack_integer(u4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 113:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(s4bytes);
#else
      unpack_integer(s8bytes);
#endif
    } else {
      unpack_integer(s4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 59:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    for(; index < stop; index += RBX_SIZEOF_LONG) {
      array->append(state, cNil);
      if(count > 0) count--;
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 231:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(ubyte);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 183:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(sbyte);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 71:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 137:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 168:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes_be);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 159:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes_le);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 41:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 110:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 210:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes_be);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 198:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes_le);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 180:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float_le;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 222:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 177:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_float_be;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 204:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u8bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 165:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s8bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 228:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 225:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double_le;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 219:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_double_be;
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 50:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(u4bytes);
#else
      unpack_integer(u8bytes);
#endif
    } else {
      unpack_integer(u4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 119:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(s4bytes);
#else
      unpack_integer(s8bytes);
#endif
    } else {
      unpack_integer(s4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 207:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    for(; index < stop; index += RBX_SIZEOF_LONG) {
      array->append(state, cNil);
      if(count > 0) count--;
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 68:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 134:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s2bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 36:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(u4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 107:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    unpack_integer(s4bytes);
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 47:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(u4bytes);
#else
      unpack_integer(u8bytes);
#endif
    } else {
      unpack_integer(u4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 116:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    if(!rest) {
      stop = index + width * count;
    }

    if(rest || stop > bytes_size) {
      stop = index + ((bytes_size - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      unpack_integer(s4bytes);
#else
      unpack_integer(s8bytes);
#endif
    } else {
      unpack_integer(s4bytes);
    }
  }
	{
    for(; count > 0; count--) {
      array->append(state, cNil);
    }
  }
	{
    return array;
  }
	break;
	case 74:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest) {
      count = remainder;
    } else if(count > remainder) {
      count = remainder;
    }
  }
	{
    unpack18::utf8_decode(state, array, bytes, bytes_end, count, index);
  }
	{
    return array;
  }
	break;
	case 146:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest) {
      count = remainder;
    } else if(count > remainder) {
      count = remainder;
    }
  }
	{
    unpack18::ber_decode(state, array, bytes, bytes_end, count, index);
    index = bytes - (const char*)self->byte_address();
  }
	{
    return array;
  }
	break;
	case 53:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::quotable_printable(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    return array;
  }
	break;
	case 122:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::base64_decode(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    return array;
  }
	break;
	case 140:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::uu_decode(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    return array;
  }
	break;
	case 9:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    String* string;

    if(count > 0) {
      native_int i;
      for(i = count; i > 0; i--) {
        uint8_t c = bytes[i-1];
        if(c != ' ' && c != '\0')
          break;
      }
      string = String::create(state, bytes, i);
    } else {
      string = String::create(state, "");
    }

    array->append(state, string);
    unpack18::increment(index, count, bytes_size);
  }
	{
    return array;
  }
	break;
	case 86:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, String::create(state, bytes, count));

    unpack18::increment(index, count, bytes_size);
  }
	{
    return array;
  }
	break;
	case 83:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    native_int c;
    for(c = 0; c < count; c++) {
      if(bytes[c] == '\0') break;
    }
    array->append(state, String::create(state, bytes, c));

    if(rest) {
      unpack18::increment(index, c < count ? c + 1 : count, bytes_size);
    } else {
      unpack18::increment(index, count, bytes_size);
    }
  }
	{
    return array;
  }
	break;
	case 201:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest) {
      count = remainder;
    } else if(count > remainder) {
      count = remainder;
    }
  }
	{
    unpack18::utf8_decode(state, array, bytes, bytes_end, count, index);
  }
	{
    return array;
  }
	break;
	case 156:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest) {
      count = remainder;
    } else if(count > remainder) {
      count = remainder;
    }
  }
	{
    unpack18::ber_decode(state, array, bytes, bytes_end, count, index);
    index = bytes - (const char*)self->byte_address();
  }
	{
    return array;
  }
	break;
	case 213:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::quotable_printable(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    return array;
  }
	break;
	case 171:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::base64_decode(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    return array;
  }
	break;
	case 162:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    bytes_end = (const char*)self->byte_address() + bytes_size;
  }
	{
    remainder = bytes_size - index;
  }
	{
    array->append(state, unpack18::uu_decode(state, bytes, bytes_end, remainder));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    return array;
  }
	break;
	case 237:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    String* string;

    if(count > 0) {
      native_int i;
      for(i = count; i > 0; i--) {
        uint8_t c = bytes[i-1];
        if(c != ' ' && c != '\0')
          break;
      }
      string = String::create(state, bytes, i);
    } else {
      string = String::create(state, "");
    }

    array->append(state, string);
    unpack18::increment(index, count, bytes_size);
  }
	{
    return array;
  }
	break;
	case 189:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, String::create(state, bytes, count));

    unpack18::increment(index, count, bytes_size);
  }
	{
    return array;
  }
	break;
	case 192:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 1;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    native_int c;
    for(c = 0; c < count; c++) {
      if(bytes[c] == '\0') break;
    }
    array->append(state, String::create(state, bytes, c));

    if(rest) {
      unpack18::increment(index, c < count ? c + 1 : count, bytes_size);
    } else {
      unpack18::increment(index, count, bytes_size);
    }
  }
	{
    return array;
  }
	break;
	case 12:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 8;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::bit_high(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    return array;
  }
	break;
	case 89:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 8;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::bit_low(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    return array;
  }
	break;
	case 30:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 2;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::hex_high(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    return array;
  }
	break;
	case 101:
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 2;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::hex_low(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    return array;
  }
	break;
	case 234:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 8;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::bit_high(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    return array;
  }
	break;
	case 186:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 8;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::bit_low(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    return array;
  }
	break;
	case 216:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 2;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::hex_high(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    return array;
  }
	break;
	case 174:
	{
    count = 0;
    rest = true;
  }
	{
    bytes = (const char*)self->byte_address() + index;
  }
	{
    width = 2;
  }
	{
    remainder = bytes_size - index;
  }
	{
    if(rest || count > remainder * width) {
      count = remainder * width;
    }
  }
	{
    array->append(state, unpack18::hex_low(state, bytes, count));
  }
	{
    unpack18::increment(index,
                      bytes - ((const char*)self->byte_address() + index),
                      bytes_size);
  }
	{
    return array;
  }
	break;
	}
	}

	_out: {}
	}



    if(en_main) {
      // do nothing
    }

    return force_as<Array>(Primitives::failure());
  }
}
